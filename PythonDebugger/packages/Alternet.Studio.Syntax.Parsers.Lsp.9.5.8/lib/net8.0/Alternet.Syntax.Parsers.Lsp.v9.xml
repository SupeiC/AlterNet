<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alternet.Syntax.Parsers.Lsp.v9</name>
    </assembly>
    <members>
        <member name="T:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode">
            <summary>
            Specifies possible language server deployment modes.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode.Embedded">
            <summary>
            Copies the embedded server distribution to the user TEMP directory, if needed.
            Use <see cref="P:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.EmbeddedDeploymentTargetDirectory"/> to override
            the target directory with an application-defined location.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode.System">
            <summary>
            Tries to locate and use the system server installation, if applicable.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode.ApplicationDefined">
            <summary>
            Use <see cref="P:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.ApplicationDefinedServerDirectory"/> to specify a custom server installation directory.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions">
            <summary>
            Specifies options for the LSP server deployment.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions"/> class.
            </summary>
            <param name="isConnectedToServer">A function indicating whether a connection to LSP server already has been made.</param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.Mode">
            <summary>
            Gets or sets the LSP server deployment mode.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.ApplicationDefinedServerDirectory">
            <summary>
            Gets or sets a server directory used with <see cref="F:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode.ApplicationDefined"/> mode.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions.EmbeddedDeploymentTargetDirectory">
            <summary>
            Gets or sets a bundled embedded server target directory used with <see cref="F:Alternet.Syntax.Parsers.Lsp.ServerDeploymentMode.Embedded"/> mode.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.ServerLocator">
            <summary>
            Finds location of the language server executable.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerLocator.GetServerStartInfo(Alternet.Syntax.Parsers.Lsp.ServerDeploymentOptions)">
            <summary>
            Gets <see cref="T:System.Diagnostics.ProcessStartInfo"/> of the LSP server executable.
            </summary>
            <param name="options">The server deployment options.</param>
            <returns>A <see cref="T:System.Diagnostics.ProcessStartInfo"/> which can be used to start a server process.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerLocator.DeployEmbeddedServer(System.String)">
            <summary>
            When implemented in a derived class, deploys the embedded LSP server and returns the <see cref="T:System.Diagnostics.ProcessStartInfo"/> to start it.
            </summary>
            <param name="targetDirectory">The directory to deploy the embedded server to, or <c>null</c> to use the default location in TEMP folder.</param>
            <returns>The <see cref="T:System.Diagnostics.ProcessStartInfo"/> to start the deployed server with.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerLocator.LocateSystemServer">
            <summary>
            When implemented in a derived class, finds the server installed globally on the host system.
            Throws an exception when the server was not found, or if a server doesn't support system-wide installation.
            </summary>
            <returns>The <see cref="T:System.Diagnostics.ProcessStartInfo"/> to start the found server with.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerLocator.LocateApplicationDefinedServer(System.String)">
            <summary>
            Finds the server in the given user directory and returns the <see cref="T:System.Diagnostics.ProcessStartInfo"/> to start it.
            Throws exception when a server was not found in the specified directory.
            </summary>
            <param name="applicationDefinedServerDirectory">The user directory to look for the server in.</param>
            <returns>The <see cref="T:System.Diagnostics.ProcessStartInfo"/> to start the found server with.</returns>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.LspDocument">
            <summary>
            Represents a Language Server source code document that provides access to the source text.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspDocument.#ctor(System.String,OmniSharp.Extensions.LanguageServer.Client.LanguageClient,Alternet.Syntax.IStringList)">
            <summary>
            Initializes a new instance of the <c>LspDocument</c> class with specified parameters.
            </summary>
            <param name="fileName">Name of file associated with this new instance.</param>
            <param name="client">LanguageClient associates this new instance with the language server.</param>
            <param name="strings">List of strings contains some text.</param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspDocument.FileName">
            <summary>
            Gets name of file associated with document.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspDocument.Client">
            <summary>
            Gets language Client associated with the language server.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspDocument.Strings">
            <summary>
            Gets the list of strings containing document text.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.LspListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups used to describe LSP-based language code.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>LspListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspListMember.#ctor(Alternet.Syntax.CodeCompletion.IListMembers)">
            <summary>
            Initializes a new instance of the <c>LspListMember</c> class with a specified owner.
            <param name="owner"><c>IListMembers</c> owning this instance</param>
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspListMember.Selected">
            <summary>
            Gets or sets a boolean value indicating whether this member is in the selected state.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.LspListMembers">
            <summary>
            Represents data collection related to popup list box controls used provide code completion for LSP-based language code.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspListMembers.NeedSort">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.LspParser">
            <summary>
            Represents base class for LSP parsers. This class is abstract.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspParser.Strings">
            <inheritdoc/>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspParser.Repository">
            <summary>
            Gets a <c>LspRepository</c> that holds methods for code completion purposes.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspParser.Document">
            <summary>
            Gets a <c>LspDocument</c> associated with this parser.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.Prepare(System.String,Alternet.Syntax.IStringList,Alternet.Syntax.ISyntaxTree,System.Boolean,Alternet.Syntax.PrepareReason)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.GetSmartIndent(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.GetSmartIndentString(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.SmartFormat(System.Drawing.Point@,System.Boolean,System.Int32,Alternet.Syntax.ITextUndoList,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.SmartFormat(System.Drawing.Point@,System.Drawing.Point@,System.Boolean,System.Int32,System.Boolean,Alternet.Syntax.ITextUndoList)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.StopParsing">
            <summary>
            Aborts parsing process.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.CreateRepository">
            <summary>
            Creates <c>ICodeCompletionRepository</c> to perform code completion functionality for this parser.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that is created.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.ResetParseInterval">
            <summary>
            Resets <c>ParseInterval</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.ShouldSerializeParseInterval">
            <summary>
            Indicates whether the <c>ParseInterval</c> property should be persisted.
            </summary>
            <returns>True if <c>ParseInterval</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.GetCompletionType(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.FindDeclarationAsync(System.Drawing.Point,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.FindReferencesAsync(System.Drawing.Point,Alternet.Common.IRangeList,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.CodeCompletion(System.String,Alternet.Syntax.StringItemInfo[],System.Drawing.Point,Alternet.Syntax.CodeCompletionArgs)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="textData">Specifies data containing color information for the given string.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.DoCodeCompletionAsync(System.Drawing.Point,Alternet.Syntax.CodeCompletionArgs,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="position">Specifies current position in text.</param>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for the code completion event.</param>
            <param name="cancellationToken">Represents a token handles cancellation operation.</param>
            <param name="async">Specifies whether code completion request can be run asynchronously.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.SupportsAsyncParsing">
            <summary>
            Indicates whether parser supports async parsing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.SupportsAdvancedFormatting">
            <summary>
            Indicates whether advanced code formatting or smart indenting is supported.
            </summary>
            <returns>True if advanced code formatting is supported; false otherwise</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspParser.Outline">
            <summary>
            Creates outlined sections for parsed text using result of syntax analysis.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.LspRepository">
            <summary>
            Represents properties and methods to perform code completion functionality for LSP-based languages.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspRepository.#ctor(System.Boolean,Alternet.Syntax.Parsers.Lsp.ILspDocumentProvider,Alternet.Syntax.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>LspRepository</c> class with specified parameters.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="documentProvider"><c>ILspDocumentProvider</c> for this new instance.</param>
            <param name="syntaxTree"><c>ISyntaxTree</c> for this new instance.</param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspRepository.Images">
            <summary>
            Represents collection of images used for code completion.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspRepository.ImagesHighDpi">
            <summary>
            Represents the ImageList for code completion items for high DPI.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspRepository.AlphaImages">
            <summary>
            Represents collection of images used for code completion.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspRepository.AlphaImagesHighDpi">
            <summary>
            Represents the ImageList for code completion items for high DPI.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspRepository.Document">
            <summary>
            Represents a <c>LspDocument</c> object associated with this repository.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspRepository.FillMembers(OmniSharp.Extensions.LanguageServer.Protocol.Models.CompletionItem[],Alternet.Syntax.CodeCompletion.IListMembers,System.Int32@)">
            <summary>
            Fills a provider with the members, providing available choices for the specified language element.
            </summary>
            <param name="completionItems">Contains list of code completion data.</param>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="selectedIndex">Receives index of default list member.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspRepository.CodeCompletionAsync(System.Drawing.Point,Alternet.Syntax.CodeCompletionArgs,System.Threading.CancellationToken)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="position">Specifies current position in text.</param>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for the code completion event.</param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspWorkspace.ServerDeploymentOptions">
            <summary>
            Gets a <see cref="P:Alternet.Syntax.Parsers.Lsp.LspWorkspace.ServerDeploymentOptions"/> instance which allows to set LSP server deployment options.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.LspWorkspace.IsLanguageClientCreated">
            <summary>
            Returns a value indicating whether the LSP client has been created.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.LspWorkspace.CreateServerLocator">
            <summary>
            Creates a <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerLocator"/> for use with this <see cref="T:Alternet.Syntax.Parsers.Lsp.LspParser"/> instance.
            </summary>
            <returns>A <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerLocator"/> instance.</returns>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.ParserConsts">
            <summary>
            Contains default constants related to lexical and syntax analyzers.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.ServerProcess">
            <summary>
                A <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerProcess"/> is responsible for launching or attaching to a language server, providing access to its input and output streams, and tracking its lifetime.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Create a new <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerProcess"/>.
            </summary>
            <param name="loggerFactory">
                The factory for loggers used by the process and its components.
            </param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.Finalize">
            <summary>
                Finaliser for <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerProcess"/>.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.Exited">
            <summary>
                Event raised when the server has exited.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.IsRunning">
            <summary>
                Is the server running?
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.HasStarted">
            <summary>
                A <see cref="T:System.Threading.Tasks.Task"/> that completes when the server has started.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.HasExited">
            <summary>
                A <see cref="T:System.Threading.Tasks.Task"/> that completes when the server has exited.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.InputStream">
            <summary>
                The server's input stream.
            </summary>
            <remarks>
                The connection will write to the server's input stream, and read from its output stream.
            </remarks>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.OutputStream">
            <summary>
                The server's output stream.
            </summary>
            <remarks>
                The connection will read from the server's output stream, and write to its input stream.
            </remarks>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.LoggerFactory">
            <summary>
                The factory for loggers used by the process and its components.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.Log">
            <summary>
                The process's logger.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.ServerStartCompletion">
            <summary>
                The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> used to signal server startup.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.ServerExitCompletion">
            <summary>
                The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> used to signal server exit.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.StartAsync">
            <summary>
                Start or connect to the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.StopAsync">
            <summary>
                Stop or disconnect from the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.Dispose">
            <summary>
                Dispose of resources being used by the launcher.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.Dispose(System.Boolean)">
            <summary>
                Dispose of resources being used by the launcher.
            </summary>
            <param name="disposing">
                Explicit disposal?
            </param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.ServerProcess.OnExited">
            <summary>
                Raise the <see cref="P:Alternet.Syntax.Parsers.Lsp.ServerProcess.Exited"/> event.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcess">
            <summary>
                A <see cref="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcess"/> is a <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerProcess"/> that launches its server as an external process and communicates with it over STDIN / STDOUT.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.serverStartInfo">
            <summary>
                A <see cref="T:System.Diagnostics.ProcessStartInfo"/> that describes how to start the server.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.serverProcess">
            <summary>
                The current server process (if any).
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.ProcessStartInfo)">
            <summary>
                Create a new <see cref="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcess"/>.
            </summary>
            <param name="loggerFactory">
                The factory for loggers used by the process and its components.
            </param>
            <param name="serverStartInfo">
                A <see cref="T:System.Diagnostics.ProcessStartInfo"/> that describes how to start the server.
            </param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.IsRunning">
            <summary>
                Is the server running?
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.InputStream">
            <summary>
                The server's input stream.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.OutputStream">
            <summary>
                The server's output stream.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.StartAsync">
            <summary>
                Start or connect to the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.StopAsync">
            <summary>
                Stop or disconnect from the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.Dispose(System.Boolean)">
            <summary>
                Dispose of resources being used by the launcher.
            </summary>
            <param name="disposing">
                Explicit disposal?
            </param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcess.ServerProcess_Exit(System.Object,System.EventArgs)">
            <summary>
                Called when the server process has exited.
            </summary>
            <param name="sender">
                The event sender.
            </param>
            <param name="args">
                The event arguments.
            </param>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx">
            <summary>
                A <see cref="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcess"/> is a <see cref="T:Alternet.Syntax.Parsers.Lsp.ServerProcess"/> that launches its server as an external process and communicates with it over STDIN / STDOUT.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.srvStartInfo">
            <summary>
                A <see cref="T:System.Diagnostics.ProcessStartInfo"/> that describes how to start the server.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.srvProcess">
            <summary>
                The current server process (if any).
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.ProcessStartInfo)">
            <summary>
                Create a new <see cref="T:Alternet.Syntax.Parsers.Lsp.StdioServerProcess"/>.
            </summary>
            <param name="loggerFactory">
                The factory for loggers used by the process and its components.
            </param>
            <param name="serverStartInfo">
                A <see cref="T:System.Diagnostics.ProcessStartInfo"/> that describes how to start the server.
            </param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.IsRunning">
            <summary>
                Is the server running?
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.InputStream">
            <summary>
                The server's input stream.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.OutputStream">
            <summary>
                The server's output stream.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.StartAsync">
            <summary>
                Start or connect to the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.StopAsync">
            <summary>
                Stop or disconnect from the server.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.Dispose(System.Boolean)">
            <summary>
                Dispose of resources being used by the launcher.
            </summary>
            <param name="disposing">
                Explicit disposal?
            </param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Lsp.StdioServerProcessEx.ServerProcess_Exit(System.Object,System.EventArgs)">
            <summary>
                Called when the server process has exited.
            </summary>
            <param name="sender">
                The event sender.
            </param>
            <param name="args">
                The event arguments.
            </param>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alternet.Editor.Wpf.v9</name>
    </assembly>
    <members>
        <member name="T:Alternet.Editor.Wpf.BooleanToVisibilityInverseConverter">
            <summary>
            Provides a boolean to <c>System.Windows.Visibility</c> converter.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BooleanToVisibilityInverseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BooleanToVisibilityInverseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
             Converts a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ClosenessExtensions">
            <summary>
            Provides methods to coerce values.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ClosenessExtensions.CoerceValue(System.Double,System.Double,System.Double)">
            <summary>
            Forces the value to stay between minimum and maximum.
            </summary>
            <param name="value">Value to process.</param>
            <param name="minimum">Possible minimum.</param>
            <param name="maximum">Possible maximum.</param>
            <returns>Minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ClosenessExtensions.CoerceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the value to stay between minimum and maximum.
            </summary>
            <param name="value">Value to process.</param>
            <param name="minimum">Possible minimum.</param>
            <param name="maximum">Possible maximum.</param>
            <returns>Minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.CloseThisWindowCommand">
            <summary>
            Represents a command that closes specified window.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CloseThisWindowCommand.Instance">
            <summary>
            Represents an instance of <c>CloseThisWindowCommand</c> class.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CloseThisWindowCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to a null reference.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CloseThisWindowCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to a null reference.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlerUtils.AddValueChangedWeak(System.Windows.DependencyProperty,System.Object,System.EventHandler)">
            <summary>
            Adds new handler to respond a notification.
            </summary>
            <param name="prop">The DependencyProperty object that can respond a notification.</param>
            <param name="component">The DependencyObject which property's change we need to listen to.</param>
            <param name="handler">Handler to respond notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlerUtils.AddValueChangedWeak(System.ComponentModel.DependencyPropertyDescriptor,System.Object,System.EventHandler)">
            <summary>
            Adds new handler to respond a notification.
            </summary>
            <param name="dpd">The DependencyPropertyDescriptor object that can respond a notification.</param>
            <param name="component">The DependencyObject which property's change we need to listen to.</param>
            <param name="handler">Handler to respond notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlerUtils.MakeWeak``1(System.EventHandler{``0},Alternet.Editor.Wpf.UnregisterCallback{``0})">
            <summary>
            Extension method for EventHandler.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="eventHandler">The EventHandler</param>
            <param name="unregister">EventHandler unregister delegate</param>
            <returns>An EventHandler</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlerUtils.MakeWeak(System.EventHandler,Alternet.Editor.Wpf.UnregisterCallback)">
            <summary>
            Extension method for EventHandler
            </summary>
            <param name="eventHandler">The EventHandler</param>
            <param name="unregister">EventHandler unregister delegate</param>
            <returns>An EventHandler</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlerUtils.MakeWeak(System.ComponentModel.PropertyChangedEventHandler,Alternet.Editor.Wpf.PropertyChangedUnregisterCallback)">
            <summary>
            Extension method for EventHandler
            </summary>
            <param name="eventHandler">The PropertyChangedEventHandler</param>
            <param name="unregister">EventHandler unregister delegate</param>
            <returns>An EventHandler</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.PropertyChangedWeakEventHandler`1">
            <summary>
            Provides methods for creating PropertyChangedWeakEvent handlers.
            </summary>
            <typeparam name="T">The type of the event source.</typeparam>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangedWeakEventHandler`1.#ctor(System.ComponentModel.PropertyChangedEventHandler,Alternet.Editor.Wpf.PropertyChangedUnregisterCallback)">
            <summary>
            Constructs a new WeakEventHandler.
            </summary>
            <param name="eventHandler">The Event handler.</param>
            <param name="unregister">Unregister delegate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangedWeakEventHandler`1.Invoke(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invokes the event handler if the source is still alive.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Specifies an event data.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PropertyChangedWeakEventHandler`1.Handler">
            <summary>
            Get an event handler.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UnregisterCallback`1">
            <summary>
            Represents a method that will handle an unregister callback event.
            </summary>
            <typeparam name="T">Specifies event args contains an event data.</typeparam>
            <param name="eventHandler">The eventHandler to unregister.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.UnregisterCallback">
            <summary>
            Represents a method that will handle an unregister callback event.
            </summary>
            <param name="eventHandler">The eventHandler to unregister.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.PropertyChangedUnregisterCallback">
            <summary>
            Represents a method that will handle an unregister callback event.
            </summary>
            <param name="eventHandler">The eventHandler to unregister.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IWeakEventHandler`1">
            <summary>
            Represents an EventHandler for WeakEvent handlers.
            </summary>
            <typeparam name="T">The EventArgs parameter.</typeparam>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWeakEventHandler`1.Handler">
            <summary>
            When implemented by a class, gets an EventHandler.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IPropertyChangedWeakEventHandler">
            <summary>
            Represents an PropertyChangedEventHandler for PropertyChanged WeakEvent handlers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPropertyChangedWeakEventHandler.Handler">
            <summary>
            When implemented by a class, gets an PropertyChangedEventHandler.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IWeakEventHandler">
            <summary>
            Represents an EventHandler for WeakEvent handlers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWeakEventHandler.Handler">
            <summary>
            When implemented by a class, gets an EventHandler.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PropertyChangeNotifier">
            <summary>
            Helper class for receiving DependencyProperty change notifications without memory leaks.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PropertyChangeNotifier.PinnedProperty">
            <summary>
            Gets pinned property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.String)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="path">The path which change we need to listen to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="property">The DependencyProperty which change we need to listen to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.PropertyPath)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="property">The PropertyPath which change we need to listen to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="path">The path which change we need to listen to.</param>
            <param name="pinToSource">Pin the lifetime of our object to the propertySource object.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="property">The DependencyProperty which change we need to listen to.</param>
            <param name="pinToSource">Pin the lifetime of our object to the propertySource object.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.PropertyPath,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>PropertyChangeNotifier</c> class with specified parameters.
            </summary>
            <param name="propertySource">The DependencyObject which property's change we need to listen to.</param>
            <param name="property">The PropertyPath which change we need to listen to.</param>
            <param name="pinToSource">Pin the lifetime of our object to the propertySource object.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PropertyChangeNotifier.PropertySource">
            <summary>
            The DependencyObject which property's change we need to listen to.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.PropertyChangeNotifier.Value"/> dependency property
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property
            </summary>
            <seealso cref="F:Alternet.Editor.Wpf.PropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="E:Alternet.Editor.Wpf.PropertyChangeNotifier.ValueChanged">
            <summary>
            Occurs when the value of the <c>ValueProperty</c> changes.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.GetPinned(System.Windows.DependencyObject)">
            <summary>
            Indicates whether specifies object is already pinned.
            </summary>
            <param name="obj">Specifies object to check.</param>
            <returns>true if object is pinned; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PropertyChangeNotifier.Dispose">
            <summary>
            Release resources of the <c>PropertyChangeNotifier</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.WeakEventHandler`2">
            <summary>
            Provides methods for creating WeakEvent handlers.
            </summary>
            <typeparam name="T">The type of the event source.</typeparam>
            <typeparam name="E">The EventArgs.</typeparam>
        </member>
        <member name="M:Alternet.Editor.Wpf.WeakEventHandler`2.#ctor(System.EventHandler{`1},Alternet.Editor.Wpf.UnregisterCallback{`1})">
            <summary>
            Constructs a new WeakEventHandler.
            </summary>
            <param name="eventHandler">The Event handler.</param>
            <param name="unregister">Unregister delegate.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.WeakEventHandler`2.Handler">
            <summary>
            Get an event handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WeakEventHandler`2.Invoke(System.Object,`1)">
            <summary>
            Invokes the event handler if the source is still alive.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Specifies an event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.WeakEventHandler`1">
            <summary>
            Provides methods for creating WeakEvent handlers.
            </summary>
            <typeparam name="T">The type of the event source.</typeparam>
        </member>
        <member name="M:Alternet.Editor.Wpf.WeakEventHandler`1.#ctor(System.EventHandler,Alternet.Editor.Wpf.UnregisterCallback)">
            <summary>
            Constructs a new WeakEventHandler.
            </summary>
            <param name="eventHandler">The Event handler.</param>
            <param name="unregister">Unregister delegate.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.WeakEventHandler`1.Handler">
            <summary>
            Get an event handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WeakEventHandler`1.Invoke(System.Object,System.EventArgs)">
            <summary>
            Invokes the event handler if the source is still alive.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Specifies an event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.NumericTextBoxExtension">
            <summary>
            Represents extension for textbox numeric input.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NumericTextBoxExtension.IsNumericOnlyProperty">
            <summary>
            TextBox Attached Dependency Property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.NumericTextBoxExtension.GetIsNumericOnly(System.Windows.DependencyObject)">
            <summary>
            Gets the IsNumericOnly property.  This dependency property indicates the text box only allows numeric or not.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/>To get the property from.</param>
            <returns>The value of the StatusBarContent property.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.NumericTextBoxExtension.SetIsNumericOnly(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsNumericOnly property.  This dependency property indicates the text box only allows numeric or not.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/>To set the property on.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.NumericTextBoxExtension.OnIsNumericOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IsNumericOnly property.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/>That fired the event.</param>
            <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.NumericTextBoxExtension.BlockNonDigitCharacters(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Disallows non-digit character.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.Windows.Input.TextCompositionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.NumericTextBoxExtension.ReviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Disallows a space key.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.InteropOwnerWindow">
            <summary>
            An owner window backed by a Win32 window handle.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.OwnerWindow">
            <summary>
            Abstraction over owner windows for both WPF and WinForms interop host cases.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.WpfOwnerWindow">
            <summary>
            An owner window backed by System.Windows.Window
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CategorizedCodeCompletionBox.DefaultCategoriesIncludedInFilterPredicate">
            <summary>
            Gets or sets a function which determines default categories to be displayed in the code completion box.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CategorizedCodeCompletionList.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionBox">
            <summary>
            Represents class that implements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window containing Code Completion information presented in the form of a list.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionBox.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionBox</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.Filter">
            <summary>
            Gets or sets filter string to filter <c>CodeCompletionBox</c> content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.ShowTabs">
            <summary>
            Gets or sets boolean value that indicates whether codecompletion window should display additional tabs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.CompletionHint">
            <summary>
            Represents CodeCompletion hint object used to display hints next to completion box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.List">
            <summary>
            Represents a content container for <c>ICodeCompletionBox</c> popup control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.CompletionToolTip">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CodeCompletionBox</c> should filter its content using <c>Filter</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionBox.Sorted">
            <summary>
            Gets or sets a value indicating whether the items in the <c>CodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionBox.SelectionChanged">
            <summary>
            Occurs when index specifying the currently selected item is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionBox.ResetContent">
            <summary>
            Updates <c>CodeCompletionBox</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionBox.PopupAt(System.Windows.Point,Alternet.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
            <param name="provider">Specifies source of the content for this window</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionBox.PerformSearch">
            <summary>
            Performs searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionBox.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionButton">
            <summary>
            Represents class that implements <c>ICodeCompletionButton</c> interface. This object is used to display a popup window containing Code Fix information presented in the form of popup menu.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionButton.#ctor(System.Windows.Controls.Control,System.Windows.Media.ImageSource)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionButton</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
            <param name="image">Specifies bulb image for the new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionButton.IsDropDown">
            <summary>
            Determines if button menu is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionButton.CanCloseNow">
            <summary>
            Indicates if popup window can be closed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionButton.PopupAt(System.Windows.Point,Alternet.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="position">Screen coordinates at which popup window should be displayed.</param>
            <param name="provider">Specifies source of the content for this window</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionButton.DropDown">
            <summary>
            Display drop down menu.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionButton.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionColumn">
            <summary>
            Represents individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionColumn.Name">
            <summary>
            Gets or sets the name of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionColumn.FontStyle">
            <summary>
            Gets or sets style information for <c>CodeCompletionColumn</c> font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionColumn.ForeColor">
            <summary>
            Gets or sets Color structure that represents foreground color of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionColumn.Visible">
            <summary>
            Gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionColumn.ResetFontStyle">
            <summary>
            Resets the <c>FontStyle</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionColumn.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionColumn.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to its default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c>object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionHint">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionHint</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionHint.HyperTextClick">
            <summary>
            Occurs when hypertext is clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.InnerControl">
            <summary>
            Represents <c>CodeCompletionHintControl</c> control contained in popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.Lexer">
            <summary>
            Gets or sets an object that can make lexical analysis for the hint control content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.Text">
            <summary>
            Gets or sets text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.HintName">
            <summary>
            Gets or sets Name part of the text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.Description">
            <summary>
            Gets or sets Description part of the text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.CurrentIndexText">
            <summary>
            Gets or sets string information about current index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.UseHtmlFormatting">
            <summary>
            Gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.NeedArrows">
            <summary>
            Indicates whether hint control have to paint up/down arrows.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected hint item.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.AutoHide">
            <summary>
            Gets or sets a value indicating whether <c>CodeCompletionHint</c> should be closed after some period of time.
            <seealso cref="P:Alternet.Editor.Wpf.CodeCompletionHint.AutoHidePause"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.AutoHidePause">
            <summary>
            Gets or sets a value that specifies delay, in milliseconds, between displaying and hiding popup hint.
            <seealso cref="P:Alternet.Editor.Wpf.CodeCompletionHint.AutoHide"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.Enabled">
            <summary>
            Gets or sets a value indicating whether the hint control can respond to user interaction.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHint.Alternet#Editor#Wpf#ICodeCompletionHint#Visible">
            <summary>
            Gets or sets a value indicating whether the hint control are displayed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.ResetAutoHide">
            <summary>
            Resets the <c>AutoHide</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.ResetAutoHidePause">
            <summary>
            Resets the <c>AutoHidePause</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.ResetContent">
            <summary>
            Updates <c>CodeCompletionHint</c> content from its Provider.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.ProviderChanged(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,System.Int32)">
            <summary>
            Updates provider and related properties to this control.
            </summary>
            <param name="provider">New provider.</param>
            <param name="index">New index.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.ChangeSelection(System.Boolean)">
            <summary>
            Increments or decrements<c>SelectedIndex</c> property.
            </summary>
            <param name="inc">Specifies whether <c>SelectedIndex</c> should be incremented.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHint.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionHintControl">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.UseHtmlFormattingProperty">
            <summary>
            Gets a DependencyProperty bind <c>UseHtmlFormatting</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionHintBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionHintBackground"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionButtonArrowProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionButtonArrow"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.CurrentIndexTextProperty">
            <summary>
            Gets a DependencyProperty bind <c>CurrentIndexText</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.NeedArrowsProperty">
            <summary>
            Gets a DependencyProperty bind <c>NeedArrows</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.TextProperty">
            <summary>
            Gets a DependencyProperty bind <c>Text</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.HintNameProperty">
            <summary>
            Gets a DependencyProperty bind <c>HintName</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.DescriptionProperty">
            <summary>
            Gets a DependencyProperty bind <c>Description</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.DescriptionVisibleProperty">
            <summary>
            Gets a DependencyProperty bind <c>DescriptionVisible</c> property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionHintControl.Image"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageHeightProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageHeight"/> dependency property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHintControl.#cctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionHintControl</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHintControl.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionHintControl</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.Editor">
            <summary>
            Represents a <c>TextEditor</c> control owning this <c>CodeCompletionHintControl</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.Text">
            <summary>
            Gets or sets text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.HintName">
            <summary>
            Gets or sets Name part of the text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.Description">
            <summary>
            Gets or sets Description part  of the text displayed in the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.DescriptionVisible">
            <summary>
            Gets or sets a boolean value indicating whether Description part of text should be visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.CurrentIndexText">
            <summary>
            Gets or sets string information about current index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.NeedArrows">
            <summary>
            Indicates whether hint control have to paint up/down arrows.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.UseHtmlFormatting">
            <summary>
            Gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionHintBackground">
            <summary>
            Gets or sets brush used to paint background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.CompletionButtonArrow">
            <summary>
            Gets or sets brush used to paint arrow.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.Image">
            <summary>
            Gets or sets Image associated with this hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageWidth">
            <summary>
            Gets or sets Image width associated with this hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionHintControl.ImageHeight">
            <summary>
            Gets or sets Image height associated with this hint.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionHintControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionList">
            <summary>
            Represents a content container for <c>CodeCompletionBox</c> popup control.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionList.EmptyTemplateProperty">
            <summary>
            Gets a DependencyProperty bind <c>EmptyTemplate</c> property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.#cctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionList</c> class with a specified owner.
            </summary>
            <param name="editor"><c>TextEditor</c> object owns this new instance.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionList.SelectionChanged">
            <summary>
            Occurs when the SelectedItem property changes.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionList.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Items">
            <summary>
            Gets the items of the CodeCompletionList.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Provider">
            <summary>
            Represents the object that provides data for code completion.
            <seealso cref="T:Alternet.Syntax.CodeCompletion.ICodeCompletionProvider"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.ListBox">
            <summary>
            Gets the list box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.ScrollViewer">
            <summary>
            Gets the scroll viewer used in this list box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.EmptyTemplate">
            <summary>
            Gets or sets an empty template.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CompletionListBox</c> should filter its content using <c>Filer</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Filter">
            <summary>
            Gets or sets filter string to filter <c>CompletionListBox</c> content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Priority">
            <summary>
            Gets or sets priority filter to filter <c>CompletionListBox</c> content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.SelectedIndex">
            <summary>
            Gets or sets the index of the first item in the current selection or returns negative one (-1) if the selection is empty.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Editor">
            <summary>
            Represents a <c>TextEditor</c> control owning this <c>CodeCompletionList</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.FocusMode">
            <summary>
            Specifies item preselection mode.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.Sorted">
            <summary>
            Gets or sets a value indicating whether the items in the list are sorted alphabetically.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.CurrentTheme">
            <summary>
            Gets or sets a dictionary containing theme-related resources for the code completion window, such as scrollbar background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.MeasureTextSize(System.String,System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.FontStretch,System.Double)">
            <summary>
            Measures specified text according to the font settings.
            </summary>
            <param name="text">String to measure.</param>
            <param name="fontFamily">FontFamily used to measure text.</param>
            <param name="fontStyle">FontStyle used to measure text.</param>
            <param name="fontWeight">FontWeight used to measure text.</param>
            <param name="fontStretch">FontStretch used to measure text.</param>
            <param name="fontSize">Font size used to measure text.</param>
            <returns>Size of measured text.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.GetIndex">
            <summary>
            Returns current index.
            </summary>
            <returns>Index of the currently selected item.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.GetIndex(System.Boolean)">
            <summary>
            Returns current index.
            </summary>
            <param name="acceptIfFocused">specifies if focused item will be returned</param>
            <returns>Index of the currently selected item.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.GetIndex(System.Int32)">
            <summary>
            Returns current index.
            </summary>
            <param name="index">Default index value.</param>
            <returns>Index of the currently selected item.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.ResetContent(System.Int32)">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
            <param name="index">The integer value that specifies <c>SelectedIndex</c> property of the <c>CompletionListBox</c>.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.ResetContent">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.HandleKey(System.Windows.Input.KeyEventArgs)">
            <summary>
             Process key input.
            </summary>
            <param name="e">An KeyEventArgs that contains the key data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.SelectItem(System.String)">
            <summary>
            Selects the best match, and filter the items.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionList.ItemData">
            <summary>
            Stores data for particular code completion item.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.ItemData.#ctor(System.String,System.Int32,System.Windows.Media.ImageSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>ItemData</c> class with specified parameters.
            </summary>
            <param name="s">Text of this new instance.</param>
            <param name="index">Index of this new instance.</param>
            <param name="image">Image of this new instance.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionList.ItemData.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.ItemData.String">
            <summary>
            Gets or set item text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.ItemData.Index">
            <summary>
            Gets or sets item index within items collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionList.ItemData.Image">
            <summary>
            Gets or sets an image corresponding to the item.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionList.ItemData.ToString">
            <summary>
            Returns string represents current ItemData.
            </summary>
            <returns>String representation of the ItemData.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionListBox">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedBackground"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedForegroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedForeground"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedBorderProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionListBox.SelectedBorder"/> dependency property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListBox.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionListBox</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionListBox.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.Provider">
            <summary>
            Represents the object that provides data for code completion.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.Editor">
            <summary>
            Gets or sets TextEditor owning this <c>CodeCompletionBox</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.CodeCompletionBorderColor">
            <summary>
            Gets or sets <c>CodeCompletionListBox</c> border color.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.FirstVisibleItem">
            <summary>
            Gets or sets the index of the first visible item in the codecompletion window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.VisibleItemCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListBox.FocusMode">
            <summary>
            Specifies item preselection mode.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListBox.ClearSelection">
            <summary>
            Removes the selection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListBox.SelectIndex(System.Int32)">
            <summary>
            Selects the item with the specified index and scrolls it into view.
            </summary>
            <param name="index">Index of item to select.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListBox.CenterViewOn(System.Int32)">
            <summary>
            Centers the view on the item with the specified index.
            </summary>
            <param name="index">Index of item to center.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionListItemToolTip">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListItemToolTip.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionListItemToolTip</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTip.Editor">
            <summary>
            Gets or sets TextEditor owning this <c>CodeCompletionListItemToolTip</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTip.Text">
            <summary>
            Gets or sets tool-tip text.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl">
            <summary>
            Represents inner control for <c>CodeCompletionListItemToolTip</c>.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.TextProperty">
            <summary>
            Dependency property for <see cref="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.Text"/>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.CompletionTooltipBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.CompletionTooltipBackground"/> dependency property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.#cctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionListItemToolTipControl</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionListItemToolTipControl</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.Editor">
            <summary>
            Gets or sets TextEditor owning this <c>CodeCompletionListItemToolTipControl</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.Text">
            <summary>
            Gets or sets tool-tip text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.CompletionTooltipBackground">
            <summary>
            Gets or sets brush used to paint background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionListItemToolTipControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionWindowBase">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.ClosePopup">
            <summary>
            Occurs when the popup window is closed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.HwndSourceInitialized">
            <summary>
            Occurs when the popup window source initialized.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.ShowPopup">
            <summary>
            Occurs when the popup window is displayed.
            </summary>
            <remarks>The event handler receives an argument of type <c>ShowingEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.Disposed">
            <summary>
            Occurs when the popup window is disposed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message.
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:Alternet.Editor.Wpf.CodeCompletionWindowBase.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.#cctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionWindowBase</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionWindowBase</c> class with default settings.
            </summary>
            <param name="owner">The <c>TextEditor</c> control owning this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Editor">
            <summary>
            Represents a <c>TextEditor</c> control owning this <c>CodeCompletionWindowBase</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.IsOpen">
            <summary>
            Gets or set open state of the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.EndPos">
            <summary>
            Specifies ending position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.StartPos"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.DisplayPos">
            <summary>
            Specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Size">
            <summary>
            Returns size of the window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.StartPos">
            <summary>
            Specifies beginning position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.EndPos"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Sizeable">
            <summary>
            Gets or sets a value indicating whether the border of the popup window is sizable.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.AutoSize">
            <summary>
            Gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Images">
            <summary>
            Gets or sets the <c>ImageList</c> for code completion items.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.OwnerControl">
            <summary>
            Represents a control owning this <c>CodeCompletionWindowBase</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Provider">
            <summary>
            Gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Visible">
            <summary>
            Indicates if window is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.CanCloseNow">
            <summary>
            Indicates if popup window can be closed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Location">
            <summary>
            Gets or sets the System.Windows.Point that represents the upper-left corner of the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.CompletionFlags">
            <summary>
            Gets or sets collection of attributes that specifies behavior of the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Columns">
            <summary>
            Represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion List.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.DropDownCount">
            <summary>
            Gets or sets a value that specifies maximum visible amount of the ListBox items within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeCompletionWindowBase.Window">
            <summary>
            Returns itself as a Window control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.Popup">
            <summary>
            Displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.PopupAt(System.Double,System.Double)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.CloseDelayed(System.Boolean)">
            <summary>
            Closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on changing position in the popup window.
            </summary>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.PopupAt(System.Windows.Point)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="point">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.PopupAt(System.Windows.Point,Alternet.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="point">The Point object that specifies the coordinates at which popup window should be displayed.</param>
            <param name="provider">Specifies source of the content for this window</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.Close(System.Boolean,System.Char)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
            <param name="keyChar">Represents key code causing code completion window to close.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
            <param name="setFocus">Indicates whether the owner control should be focused after closing popup window.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ResetContent">
            <summary>
            Updates <c>CodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            Retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ResetSizeable">
            <summary>
            Resets the <c>Sizeable</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ClearColumns">
            <summary>
            Removes all columns from the <c>CodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.AddColumn">
            <summary>
            Adds a new column to the <c>CodeCompletionBox</c> column collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.RemoveColumnAt(System.Int32)">
            <summary>
            Removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ResetDropDownCount">
            <summary>
            Resets the <c>DropDownCount</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.PerformSearch">
            <summary>
            Performs searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ContainsMouseCursor(System.Int32)">
            <summary>
            Determines whether control contains mouse position, with specified therehold.
            </summary>
            <param name="therehold">Specifies size, in pixels, of the inflated boundary of the control.</param>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.EnsureVisible(System.Windows.Point@)">
            <summary>
            Ensures that the popup window is visible in the screen working area, moving it if necessary.
            </summary>
            <param name="position">Position in screen coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ResetAutoSize">
            <summary>
            Resets the AutoSize property to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.ResetCodeCompletionFlags">
            <summary>
            Resets the <c>CompletionFlags</c> property to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.Close(System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.OnDeactivated(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeCompletionWindowBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.CompletionButton">
            <summary>
            Interaction logic for CompletionButton.xaml
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ImageProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.Image"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ImageWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ImageWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ImageHeightProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ImageHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ContextMenuBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ContextMenuBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuBackground"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.CompletionButtonBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.CompletionButtonBackground"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBackgoundProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBackgound"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBorderProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBorder"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CompletionButton.CompletionButtonArrowProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CompletionButton.CompletionButtonArrow"/> dependency property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CompletionButton.#cctor">
            <summary>
            Initializes a new instance of the <c>CompletionButton</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.CompletionButtonBackground">
            <summary>
            Gets or sets brush used to paint background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBackgound">
            <summary>
            Gets or sets brush used to paint context menu backgound in highlighted state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuHighlightBorder">
            <summary>
            Gets or sets brush used to paint context menu border in highlighted state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.CompletionButtonArrow">
            <summary>
            Gets or sets brush used to paint arrow.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuBackground">
            <summary>
            Gets or sets brush used to paint context menu background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ContextMenuBorderColor">
            <summary>
            Gets or sets border color for the context menu.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.Image">
            <summary>
            Gets or sets Image associated with this control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ImageWidth">
            <summary>
            Gets or sets Image width associated with this control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.ImageHeight">
            <summary>
            Gets or sets Image height associated with this control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.Menu">
            <summary>
            Gets or sets a ContextMenuStrip associated with this control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.Provider">
            <summary>
            Represents the object that provides data for code completion.
            <seealso cref="T:Alternet.Syntax.CodeCompletion.ICodeCompletionProvider"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CompletionButton.IsDropDown">
            <summary>
            Indicates if button's Menu is open.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CompletionButton.ResetContent">
            <summary>
            Updates <c>CompletionButton</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CompletionButton.GetSelectedItem(System.Boolean)">
            <summary>
            Returns currently selected item.
            </summary>
            <param name="acceptIfFocused">specifies if focused item will be returned</param>
            <returns>Currently selected item.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CompletionButton.DropDown">
            <summary>
            Display drop down menu.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CompletionButton.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="F:Alternet.Editor.Wpf.CustomContextMenu.BackgroundColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CustomContextMenu.BackgroundColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CustomContextMenu.BorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.CustomContextMenu.BorderColor"/> dependency property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CustomContextMenu.BackgroundColor">
            <summary>
            Gets or sets Color used to paint background area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CustomContextMenu.BorderColor">
            <summary>
            Gets or sets Color used to paint menu border.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DlgPrintOptions">
            <summary>
            Interaction logic for DlgPrintOptions.xaml.
            </summary>
            <summary>
            DlgPrintOptions
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DlgPrintOptions.Options">
            <summary>
            Gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DlgPrintOptions.AllowedOptions">
            <summary>
            Gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DlgPrintOptions.FileName">
            <summary>
            Gets or sets the name of the file to be printed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DlgPrintOptions.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DlgPrintOptions.ResetAllowedOptions">
            <summary>
            Resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DlgPrintOptions.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialog.#ctor">
            <summary>
            Initializes a new instance of the <c>GotoLineDialog</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.GotoLineDialog.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GotoLineDialog.AdditionalResources">
            <summary>
            Gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GotoLineDialog.Font">
            <summary>
            Gets or sets the font used for the dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialog.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialog.Execute(System.Object,System.Int32,System.Int32@,System.Windows.Window)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialog.Execute(System.Object,System.Int32,System.Int32@,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.GotoLineDialogWindow">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
            <summary>
            GotoLineDialogWindow
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialogWindow.#ctor">
            <summary>
            Initializes a new instance of the <c>GotoLineDialogWindow</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GotoLineDialogWindow.Line">
            <summary>
            Gets or sets index of the current line. When dialog executes receives index of the new line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GotoLineDialogWindow.Lines">
            <summary>
            Sets number of lines in the control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialogWindow.Execute(System.Object,System.Int32,System.Int32@,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.GotoLineDialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LabelHotkeyConverter">
            <summary>
            Provides a type converter to convert string with hotkey symbol.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LabelHotkeyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LabelHotkeyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
             Converts a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.PersistentSettings">
            <summary>
            Represents a base class for classes designed to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.SaveFile(System.String)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.SaveStream(System.IO.Stream)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream.
            </summary>
            <param name="stream">The Stream object to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream with specific encoding.
            </summary>
            <param name="stream">The Stream object to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.LoadFile(System.String)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of the file to load.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream.
            </summary>
            <param name="reader">The TextReader object to read.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream with specified encoding.
            </summary>
            <param name="stream">The Stream object to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.LoadStream(System.IO.Stream)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream with specified encoding.
            </summary>
            <param name="stream">The Stream object to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.PersistentSettings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>PersistentSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.Assign(Alternet.Editor.Wpf.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PersistentSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain control's settings information. In this class method returns null. Descendant classes can override this method.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PopupPanelSearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialog.AdditionalResources">
            <summary>
            Gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.PopupPanelSearchDialog.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialog.OwnerForm">
            <summary>
            Gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialog.Visible">
            <summary>
            Gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialog.IsFocused">
            <summary>
            Gets a boolean value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialog.SearchSettings">
            <summary>
            Gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.Done(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Frees search engine.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,System.Windows.Window)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.DoneSearch(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.EnsureVisible(System.Windows.Rect)">
            <summary>
            Ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ThemeChanged">
            <summary>
            Applies visual theme changes to the search dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.EnableRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should b enabled.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ShowRegularExpressions(System.Boolean)">
            <summary>
            Shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should b visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialog.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow">
            <summary>
            Represents a dialog box used to provide search and replace dialog.
            </summary>
            <summary>
            PopupPanelSearchDialogWindow
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.#ctor">
            <summary>
            Initializes a new instance of the <c>SearchDialogWindow</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.Search">
            <summary>
            Gets or sets <c>ISearch</c> interface owning the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.AdditionalResources">
            <summary>
            Gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.Painter">
            <summary>
            Gets or sets the painter used to draw dialog's controls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.Options">
            <summary>
            Gets or sets options that defines search and replace behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.SelectionEnabled">
            <summary>
            Gets or sets a boolean value that indicates whether search can be executed through selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.IsReplace">
            <summary>
            Gets or sets a boolean value that indicates whether search or replace dialog should be executed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ParentEditorControl">
            <summary>
            Represents the parent control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.SearchList">
            <summary>
            Represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ReplaceList">
            <summary>
            Represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.EnableRegularExpressions(System.Boolean)">
            <summary>
            Enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should be enabled.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.ShowRegularExpressions(System.Boolean)">
            <summary>
            Shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should be visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.UpdateFindText(System.String)">
            <summary>
            Updates text to find.
            </summary>
            <param name="text">New text to search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.Init">
            <summary>
            Resets <c>DlgSearch</c> to the start of search.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.Init(Alternet.Editor.Wpf.ISearch,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Resets <c>IDlgSearch</c> to the start of search.
            <param name="search">New <c>ISearch</c> object that performs search.</param>
            <param name="options">New search options.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.HighlightAll">
            <summary>
            Highlights all occurrences of the search text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.UpdateSearch(Alternet.Editor.Wpf.ISearch,System.Boolean)">
            <summary>
            Updates search engine.
            </summary>
            <param name="newSearch">New <c>ISearch</c> object performs search.</param>
            <param name="update">True if given search engine should be set as current search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PopupPanelSearchDialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.Owner">
            <summary>
            Gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.AdditionalResources">
            <summary>
            Gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.CurrentTheme">
            <summary>
            Gets or sets a dictionary containing theme-related resources for the dialog window, such as combobox or button background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.Visible">
            <summary>
            Gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.IsFocused">
            <summary>
            Gets a boolean value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialog.SearchSettings">
            <summary>
            Gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.SearchDialog.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.Done(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Frees search engine.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,System.Windows.Window)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.DoneSearch(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.EnsureVisible(System.Windows.Rect)">
            <summary>
            Ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ThemeChanged">
            <summary>
            Applies visual theme changes to the search dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.EnableRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should b enabled.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ShowRegularExpressions(System.Boolean)">
            <summary>
            Shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should b visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialog.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SearchDialogWindow">
            <summary>
            Represents a dialog box used to provide search and replace dialog.
            </summary>
            <summary>
            SearchDialogWindow
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.#ctor">
            <summary>
            Initializes a new instance of the <c>SearchDialogWindow</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.SearchDialogWindow.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.AdditionalResources">
            <summary>
            Gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.Search">
            <summary>
            Gets or sets <c>ISearch</c> interface owning the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.Painter">
            <summary>
            Gets or sets the painter used to draw dialog's controls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.Options">
            <summary>
            Gets or sets options that defines search and replace behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.SelectionEnabled">
            <summary>
            Gets or sets a boolean value that indicates whether search can be executed through selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.IsReplace">
            <summary>
            Gets or sets a boolean value that indicates whether search or replace dialog should be executed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.OptionsVisible">
            <summary>
            Indicates whether options group box should be visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.SearchList">
            <summary>
            Represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.ReplaceList">
            <summary>
            Represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.ParentEditorControl">
            <summary>
            Represents the parent control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchDialogWindow.CurrentTheme">
            <summary>
            Gets or sets a dictionary containing theme-related resources for the dialog window, such as combobox or button background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.Init">
            <summary>
            Resets <c>DlgSearch</c> to the start of search.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.Init(Alternet.Editor.Wpf.ISearch,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Resets <c>IDlgSearch</c> to the start of search.
            <param name="search">New <c>ISearch</c> object that performs search.</param>
            <param name="options">New search options.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.UpdateFindText(System.String)">
            <summary>
            Updates text to find.
            </summary>
            <param name="text">New text to search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.HighlightAll">
            <summary>
            Highlights all occurrences of the search text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.EnableRegularExpressions(System.Boolean)">
            <summary>
            Enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should be enabled.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.ShowRegularExpressions(System.Boolean)">
            <summary>
            Shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should be visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.UpdateSearch(Alternet.Editor.Wpf.ISearch,System.Boolean)">
            <summary>
            Updates search engine.
            </summary>
            <param name="newSearch">New <c>ISearch</c> object that performs search.</param>
            <param name="update">True if given search engine should be set as current search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchDialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.XmlSearchSettingsInfo">
            <summary>
            Contains information about <c>ISearchSettings</c> object's settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.XmlSearchSettingsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.XmlSearchSettingsInfo.#ctor(Alternet.Editor.Wpf.ISearchSettings)">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies <c>ISearchSettings</c> object to store settings.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.XmlSearchSettingsInfo.SearchList">
            <summary>
            Stores <c>ISearchSettings.SearchList</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.XmlSearchSettingsInfo.ReplaceList">
            <summary>
            Stores <c>ISearchSettings.ReplaceList</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.XmlSearchSettingsInfo.SearchOptions">
            <summary>
            Stores <c>ISearchSettings.SearchOptions</c> property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.XmlSearchSettingsInfo.Load">
            <summary>
            Reads property values from external object. Reserved for internal use.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.XmlSearchSettingsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IDlgSearchWindow">
            <summary>
            Represents a dialog control associated with search dialog.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IDlgSearchWindow.Closed">
            <summary>
            When implemented by a class, occurs when the dialog control is closed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.Search">
            <summary>
            When implemented by a class, gets or sets <c>ISearch</c> interface owning the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.Painter">
            <summary>
            When implemented by a class, gets or sets the painter used to draw dialog's controls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.Width">
            <summary>
            When implemented by a class, gets or sets the width of the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.Height">
            <summary>
            When implemented by a class, gets or sets the height of the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.IsVisible">
            <summary>
            When implemented by a class, gets a value indicating whether this element is visible in the user interface.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.Options">
            <summary>
            When implemented by a class, gets or sets options that define search and replace behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.IsReplace">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether the search or replace dialog should be executed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.ClearBookmarks">
            <summary>
            When implemented by a class, indicates whether all unnumbered bookmarks should be removed from the bookmark collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.SelectionEnabled">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether search can be executed through selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.SearchList">
            <summary>
            When implemented by a class, represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.ReplaceList">
            <summary>
            When implemented by a class, represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.ParentEditorControl">
            <summary>
            When implemented by a class, represents the parent control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.IsFocused">
            <summary>
            When implemented by a class, gets a value that determines whether this element has logical focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.IsKeyboardFocusWithin">
            <summary>
            When implemented by a class, gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSearchWindow.AdditionalResources">
            <summary>
            When implemented by a class, gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ToggleWholeWord">
            <summary>
            When implemented by a class, toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ToggleRegularExpressions">
            <summary>
            When implemented by a class, toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ToggleMatchCase">
            <summary>
            When implemented by a class, toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.TogglePromptOnReplace">
            <summary>
            When implemented by a class, toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ToggleSearchUp">
            <summary>
            When implemented by a class, toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ToggleHiddenText">
            <summary>
            When implemented by a class, toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.EnableRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should be enabled.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.ShowRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should be visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.Init">
            <summary>
            When implemented by a class, resets <c>IDlgSearch</c> to the start of search.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.Init(Alternet.Editor.Wpf.ISearch,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            When implemented by a class, resets <c>IDlgSearch</c> to the start of search.
            <param name="search">New <c>ISearch</c> object performs search.</param>
            <param name="options">New search options.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.UpdateSearch(Alternet.Editor.Wpf.ISearch,System.Boolean)">
            <summary>
            When implemented by a class, updates search engine.
            </summary>
            <param name="newSearch">New <c>ISearch</c> object that performs search.</param>
            <param name="update">True if given search engine should be set as current search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.UpdateFindText(System.String)">
            <summary>
            When implemented by a class, updates text to find.
            </summary>
            <param name="text">New text to search.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.HighlightAll">
            <summary>
            When implemented by a class, highlights all occurrences of the search text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.Show(System.Windows.Controls.Control,Alternet.Editor.Wpf.PopupPanelSearchDialogPainter)">
            <summary>
            When implemented by a class, displays the dialog with the specified parameters.
            </summary>
            <param name="parentEditorControl">Parent of this dialog.</param>
            <param name="painter">Painter of this dialog.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSearchWindow.Close">
            <summary>
            When implemented by a class, closes the dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSeparateWindow.OptionsVisible">
            <summary>
            When implemented by a class, indicates whether the options group box should be visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSeparateWindow.Topmost">
            <summary>
            When implemented by a class, gets or sets a value that indicates whether a window appears in the topmost z-order.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSeparateWindow.Left">
            <summary>
            When implemented by a class, gets or sets the position of the window's left edge, in relation to the desktop.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDlgSeparateWindow.Top">
            <summary>
            When implemented by a class, gets or sets the position of the window's top edge, in relation to the desktop.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSeparateWindow.Show">
            <summary>
            When implemented by a class, displays the dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDlgSeparateWindow.Hide">
            <summary>
            When implemented by a class, makes a dialog window invisible.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IGotoLineDialog">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IGotoLineDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IGotoLineDialog.AdditionalResources">
            <summary>
            When implemented by a class, gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IGotoLineDialog.Font">
            <summary>
            When implemented by a class, gets or sets a font for the dialog to use.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@,System.Windows.Window)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IPersistentSettings">
            <summary>
            Represents methods to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPersistentSettings.Assign(Alternet.Editor.Wpf.IPersistentSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IPrintOptionsDialog">
            <summary>
            Represents properties and methods to manipulate print settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintOptionsDialog.Options">
            <summary>
            When implemented by a class, gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintOptionsDialog.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintOptionsDialog.FileName">
            <summary>
            When implemented by a class, gets or sets the name of the file to be printed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintOptionsDialog.ShowDialog">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintOptionsDialog.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintOptionsDialog.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISearchDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchDialog.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchDialog.AdditionalResources">
            <summary>
            When implemented by a class, gets or sets a dictionary containing additional resources for the dialog window, such as control styles.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchDialog.IsFocused">
            <summary>
            When implemented by a class, gets a boolean value indicating whether dialog box has input focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchDialog.SearchSettings">
            <summary>
            When implemented by a class, gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,System.Windows.Window)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.Execute(Alternet.Editor.Wpf.ISearch,System.Boolean,System.Boolean,Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.DoneSearch(Alternet.Editor.Wpf.ISearch)">
            <summary>
            When implemented by a class, finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.EnsureVisible(System.Windows.Rect)">
            <summary>
            When implemented by a class, ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ThemeChanged">
            <summary>
            When implemented by a class, applies visual theme changes to the search dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ToggleHiddenText">
            <summary>
            When implemented by a class, toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ToggleMatchCase">
            <summary>
            When implemented by a class, toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ToggleRegularExpressions">
            <summary>
            When implemented by a class, toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ToggleSearchUp">
            <summary>
            When implemented by a class, toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.ToggleWholeWord">
            <summary>
            When implemented by a class, toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchDialog.Close">
            <summary>
            When implemented by a class, closes the dialog.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DisplayStrings">
            <summary>
            Represents a collection of visible strings in the text Edit control.
            </summary>
            <remarks>Use <c>SyntaxStrings</c> to access "real" lines stored in the <c>TextSource</c>. DisplayStrings provides an access to lines as they are displayed in the Edit control, assuming tabulation, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.#ctor(Alternet.Editor.Wpf.TextEditor,Alternet.Editor.Wpf.ITextStrings)">
            <summary>
            Initializes a new instance of the <c>DisplayStrings</c> class with specified parameters.
            </summary>
            <param name="owner">Specifies owner of this new instance.</param>
            <param name="strings">Specifies collection of underlying lines.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.SuppressTabs">
            <summary>
            Gets or sets boolean value indicating if conversion from tabs to spaces is suppressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual string stored in the collection.
            </summary>
            <summary>
            Provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="item">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="item">Specifies string to insert.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.RemoveAt(System.Int32)">
            <summary>
            Removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Add(System.String)">
            <summary>
            Adds a new item to the end of string collection.
            </summary>
            <param name="item">String to be added to the end of the collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Clear">
            <summary>
            Removes all items from string collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Contains(System.String)">
            <summary>
            Indicates whether string collection contains specified string.
            </summary>
            <param name="item">String to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire string collection to a another array, starting at the specified index of the target array.
            </summary>
            <param name="array">The Array that is the destination of the elements copied from string collection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Remove(System.String)">
            <summary>
            Removes the first occurrence of given string from the string collection.
            </summary>
            <param name="item">String to remove.</param>
            <returns>True if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.DisplayCount">
            <summary>
            Returns number of visible lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.LineEnd">
            <summary>
            Gets or sets boolean value indicating if the text position can be set to the end of the wrapped line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Loaded">
            <summary>
            Gets or sets boolean value indicating if the display strings was fully formatted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Lines">
            <summary>
            Gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.MaxLineWidth">
            <summary>
            Gets width of the largest line in the <c>DisplayString</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Count">
            <summary>
            Returns number of visible lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Text">
            <summary>
            Gets or sets the strings in the <c>IDisplayStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsPointVisible(System.Drawing.Point)">
            <summary>
            Indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position is invisible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsPointCollapsed(System.Drawing.Point,Alternet.Common.IRange@)">
            <summary>
            Indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <param name="range">Receives range contains the point. Null if specified position is visible.</param>
            <returns>True if position is invisible due to outlining; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Responds on deleting some block of lines within the editor control.
            </summary>
            <param name="rect">Rectangle area of block being deleted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UpdateNeeded">
            <summary>
            Forces <c>IDisplayStrings</c> to recalculate its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PositionChanged(Alternet.Editor.Wpf.UpdateReason,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on changing position in the editor.
            </summary>
            <param name="reason">Reason of changing position.</param>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="position">The Point value that specifies text coordinates to convert.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PointToDisplayPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="position">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="wrapEnd">Reserved for internal use.</param>
            <param name="rangeStart">Reserved for internal use.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetColorData(System.Int32)">
            <summary>
            Returns color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetStringAndColorData(System.Int32,System.String@,Alternet.Syntax.StringItemInfo[]@)">
            <summary>
            Returns text and color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <param name="text">Returns text of the given line.</param>
            <param name="data">Returns color information of specified line.</param>
            <returns>Corresponding index within <c>ISyntaxStrings</c>collection.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
            <remarks>If each successive tab stop is not larger than its predecessor, you will receive an error.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetTabString(System.String)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetTabString(System.String,Alternet.Syntax.ITextUndoList)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs).</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetPrevTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetIndentString(System.Int32,System.Int32)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.TabPosToPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PosToTabPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.WordWrap">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.WrapAtMargin">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.WrapMargin">
            <summary>
            Gets position of the wrap margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UpdateWordWrap">
            <summary>
            Re-wraps all lines in <c>DisplayStrings</c> collection.
            </summary>
            <returns>True if succeed otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Updates wrapped lines within specific scope in <c>DisplayStrings</c> object.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies first line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetWrapMargin">
            <summary>
            Returns position of the wrap margin.
            </summary>
            <returns>Return width of client rectangle or position of margin depending of <c>WrapAtMargin</c> property.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.Boolean)">
            <summary>
            Searches for given text within the <c>DisplayStrings</c> contents.
            </summary>
            <param name="s">The text to locate in the strings.</param>
            <param name="options">Search parameters.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <param name="searchHiddenLines">Specifies if hidden lines should be processed.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.Delimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of string is word delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the string.</param>
            <returns>True if specified character is delimiter character; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsWhitespace(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is word delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter character; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos"> The index of character within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Char[])">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of character in the text string.</param>
            <param name="line">Specifies index of visible string.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the default value.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.DisplayStrings.Expanding">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.DisplayStrings.Collapsing">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining is enabled.
            </summary>
            <remarks>Setting this property to false causes removing all outline sections.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.AllowHiddenLines">
            <summary>
            Gets or sets a value indicating whether hidden lines are enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.OutlineOptions">
            <summary>
            Gets or sets options representing outlining appearance and behavior.
            <seealso cref="T:Alternet.Editor.Wpf.OutlineOptions"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, If <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope with the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope with specific level of outline nesting and specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outlined section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UnOutline(System.Drawing.Point)">
            <summary>
            This method removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in text coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UnOutline(System.Int32)">
            <summary>
            This method removes all outlined section containing the given line.
            </summary>
            <param name="index">Specifies line in text coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UnOutline">
            <summary>
            This method removes all outlined section within the <c>DisplayStrings</c> collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section representing text substituting outline section and level of outline nesting at the specific position.
            <seealso cref="T:Alternet.Syntax.IOutlineRange"/>
            </summary>
            <param name="position">Specifies position in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substring outline section and level of outline nesting at the specific line.
            <seealso cref="T:Alternet.Syntax.IOutlineRange"/>
            </summary>
            <param name="index">Index of the line in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined section at the specified line is expanded.
            <seealso cref="M:Alternet.Editor.Wpf.DisplayStrings.IsCollapsed(System.Int32)"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is expanded; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outline section at the specified line is collapsed.
            <seealso cref="M:Alternet.Editor.Wpf.DisplayStrings.IsExpanded(System.Int32)"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is collapsed; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies an index of the line in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Expand(System.Int32)">
            <summary>
            Expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies an index of the line in text coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in text coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.FullExpand">
            <summary>
            Expands all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.FullExpand(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.FullCollapse">
            <summary>
            Collapses all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.FullCollapse(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ToggleOutlining">
            <summary>
            Toggles expanded state for current outline sections.
            </summary>
            <remarks>If there is no outline section at the current point, method does nothing, otherwise it changes collapsed state of the section to the expanded and vice versa.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ToggleOutlining(System.Collections.Generic.IList{Alternet.Common.IRange},Alternet.Syntax.IOutlineRange)">
            <summary>
            Toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.CollapseToDefinitions">
            <summary>
            Collapses and expands some outline section to get a quick overall view of the content.
            </summary>
            <remarks>Use this command to ensure that only more important for your outline sections starts to be expanded. For Example owner Edit control may expand only bodies of namespaces and classes and collapse all other sections.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineHint(Alternet.Syntax.IOutlineRange)">
            <summary>
            Returns the string that appears in the hint window when mouse pointer over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string for given <c>IOutlineRange</c> object.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Int32)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies line in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Start position in text coordinates.</param>
            <param name="endPoint">End position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Fills list specified by Ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.CanExpand(Alternet.Syntax.IOutlineRange)">
            <summary>
            Returns boolean value indicating that given outline section can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.CanExpand(System.Int32)">
            <summary>
            Returns boolean value indicating that outline section at given line can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.CanCollapse(System.Int32)">
            <summary>
            Returns boolean value indicating that outline section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetAllowOutlining">
            <summary>
            Resets the <c>AllowOutlining</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.ResetOutlineOptions">
            <summary>
            Resets the <c>OutlineOptions</c> to its default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveFile(System.String)">
            <summary>
            Saves content to the specific file in the text format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves content to the specific file in the specific format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the specific file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.TextWriter,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the specific stream in the specific format and specific encoding.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.UpdateHiddenLines">
            <summary>
            Updates outline ranges for the hidden lines
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetVisibleLines(System.Int32@,System.Int32@)">
            <summary>
            Gets max range containing visible lines
            </summary>
            <param name="first">First visible line</param>
            <param name="last">Last visible line</param>
            <returns>True if there's any visible lines in the editor; otherwise false</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of a text file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.TextReader,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>ICollapsable.EndUpdate</c> method.
            </summary>
            <returns>Number of the updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>ICollapsable.BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Update">
            <summary>
            Updates an object state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.Notify(Alternet.Editor.Wpf.NotifyState,System.Int32,System.Int32)">
            <summary>
            Notifies editor about updating <c>IDisplayStrings</c> state.
            </summary>
            <param name="state">Changes reason.</param>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.GetFlowDocument(Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            Gets FlowDocument object describes DisplayStrings content accordingly to specified settings.
            </summary>
            <param name="options">Specifies settings to describe ITextSource content.</param>
            <returns>FlowDocument describes DisplayStrings content.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.DisplayStrings.DisplayEnumerator.Current">
            <summary>
            Gets an object that represents current string.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayEnumerator.MoveNext">
            <summary>
            Moves to the next line in the string collection.
            </summary>
            <returns>false if current line is the last line; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.DisplayStrings.DisplayEnumerator.Reset">
            <summary>
            Moves to the first line within the string collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditConsts">
            <summary>
            Contains default constants related to Edit control.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditHyperText">
            <summary>
            Represents properties and methods to operate with hypertext within Edit control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.#ctor">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.EditHyperText.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url by clicking on it in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditHyperText.ShowHints">
            <summary>
            Gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditHyperText.UrlStyle">
            <summary>
            Gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditHyperText.UrlColor">
            <summary>
            Gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.Assign(Alternet.Editor.Wpf.IEditHyperText)">
            <summary>
            Copies the contents from another <c>IEditHyperText</c> object.
            </summary>
            <param name="source">Specifies <c>IEditHyperText</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.UrlJump(System.String)">
            <summary>
            Tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.ResetUrlStyle">
            <summary>
            Resets the <c>UrlStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.ResetUrlColor">
            <summary>
            Resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.EditHyperText.HyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditHyperText.UrlTable">
            <summary>
            Represents hash table containing hyper-text characters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditHyperText.HighlightHyperText">
            <summary>
            Gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.IsUrlAtPoint(System.Double,System.Double,System.String@,System.Boolean)">
            <summary>
            Indicates whether text at specified position contains a hyperlink.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of hyperlink under text point.</param>
            <param name="needUrl">Specifies whether method should return hypertext.</param>
            <returns>True if text at given position is hyperlink; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.ResetHighlightHyperText">
            <summary>
            Resets <c>HighlightHyperText</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.IsUrlAtPoint(System.Double,System.Double)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.IsUrlAtPoint(System.Double,System.Double,System.String@)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditHyperText.IsUrlAtTextPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check in text coordinates.</param>
            <param name="y">The Y-constituent of Point value to check in text coordinates.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditLineStyle">
            <summary>
            Represents a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.#ctor(Alternet.Editor.Wpf.TextEditor,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Alternet.Editor.Wpf.LineStyleOptions)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
            <param name="name">Name of the new instance.</param>
            <param name="foreColor">Foreground color of the new instance.</param>
            <param name="backColor">Background color of the new instance.</param>
            <param name="penColor">Pen color of the new instance.</param>
            <param name="imageIndex">Image index of the new instance.</param>
            <param name="options">Options of the new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.Name">
            <summary>
            Gets or sets name of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.ForeColor">
            <summary>
            Gets or sets foreground color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.BackColor">
            <summary>
            Gets or sets background color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.PenColor">
            <summary>
            Gets or sets background color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyle.Options">
            <summary>
            Gets or sets display options for the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.Assign(Alternet.Editor.Wpf.IEditLineStyle)">
            <summary>
            Copies the contents from another <c>IEditLineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyle</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.GetBackColor(System.Drawing.Color)">
            <summary>
            Returns <c>BackColor</c> or <c>ForeColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>ForeColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>BackColor</c>.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.GetForeColor(System.Drawing.Color)">
            <summary>
            Returns <c>ForeColor</c> or <c>BackColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>BackColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>ForeColor</c>.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.ResetImageIndex">
            <summary>
            Resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyle.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditLineStyles">
            <summary>
            Represents a collection of the <c>ILineStyle</c> objects for Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.#ctor">
            <summary>
            Initializes a new instance of the <c>EditLineStyles</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>EditLineStyles</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditLineStyles.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.Assign(Alternet.Editor.Wpf.IEditLineStyles)">
            <summary>
            Copies the contents from another <c>IEditLineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyles</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.IndexOfName(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.AddLineStyle">
            <summary>
            Adds a new <c>LineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditLineStyles.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Alternet.Editor.Wpf.LineStyleOptions)">
            <summary>
            Adds a new <c>LineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>LineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>LineStyle</c>.</param>
            <param name="backColor">Background color of new <c>LineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>LineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>LineStyle</c>.</param>
            <param name="options">Options of new <c>LineStyle</c>.</param>
            <returns>Index of the added element in the <c>LineStyle</c> collection.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditorPrintDocument">
            <summary>
            Defines a reusable object that sends output to a printer.
            </summary>
            <remarks>Normally you do not need to use this class. It's used internally by Edit control.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditorPrintDocument.#ctor(Alternet.Editor.Wpf.IPrintingWpf)">
            <summary>
            Initializes a new instance of the <c>EditorPrintDocument</c> class with specified parameters.
            </summary>
            <param name="printing">Specifies <c>IPrintingWpf</c> object for print document.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditorPrintDocument.Init(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>ItextEdit</c> object owning <c>EditorPrintDocument</c>.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditorPrintDocument.Init(Alternet.Editor.Wpf.TextEditor,System.Boolean)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>TextEditor</c> object owning <c>EditorPrintDocument</c>.</param>
            <param name="calcPages">Indicates whether <c>EditorPrintDocument</c> should calculate count of pages to print.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditorPrintDocument.GetPrintDocument(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Gets FlowDocument object describes TextEditor content accordingly to printing demands.
            </summary>
            <param name="edit">TextEditor to print.</param>
            <returns>FlowDocument describes TextEditor content.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditSpelling">
            <summary>
            Represents properties and methods allowing to visually highlight misspelled words in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Spelling</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.SpellColor">
            <summary>
            Gets or sets a value representing color to draw wavy underlines under misspelled words.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.Assign(Alternet.Editor.Wpf.IEditSpelling)">
            <summary>
            Copies the contents from another <c>IEditSpelling</c> object.
            </summary>
            <param name="source">Specifies <c>IEditSpelling</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.ResetSpellColor">
            <summary>
            Resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.SpellDelimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.SpellDelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.HasSpelling">
            <summary>
            Gets boolean value indicating that editor has external spell checker assigned.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditSpelling.SpellTable">
            <summary>
            Represents a hash table containing delimiters.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.EditSpelling.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.IsWordCorrect(System.String,System.Drawing.Point)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <param name="position">Specifies position of the word inside the text</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditSpelling.ResetSpellDelimiters">
            <summary>
            Resets the <c>SpellDelimiters</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.AutoCorrectEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.AutoCorrect</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>AutoCorrectEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.AutoCorrectEventArgs">
            <summary>
            Provides data for the <c>AutoCorrectEvent</c> handler.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.AutoCorrectEventArgs.Word">
            <summary>
            Represents words to correct.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.AutoCorrectEventArgs.CorrectWord">
            <summary>
            Represents corrected word.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.AutoCorrectEventArgs.HasCorrection">
            <summary>
            Represents a value indicating whether specified word is corrected.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CreatePrintEditEvent">
            <summary>
            Represents a method that will handle the <c>Printing.CreatePrintEdit</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>CreatePrintEditEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.CreatePrintEditEventArgs">
            <summary>
            Provides data for the <c>CreatePrintEdit</c> handler.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CreatePrintEditEventArgs.PrintEdit">
            <summary>
            Edit control that is created to be printed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawHeaderEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.DrawHeader</c>, <c>EditPages.DrawHeader</c> or <c>CodeCompletionHint.CustomDraw</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawHeaderEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawHeaderEventArgs">
            <summary>
            Provides data for the <c>DrawHeaderEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DrawHeaderEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DrawHeaderEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.DrawHeaderEventArgs.Tag">
            <summary>
            String containing formatting elements used to format <c>DrawHeaderEventArgs.Text</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DrawHeaderEventArgs.Text">
            <summary>
            String to replace formatting tag.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.DrawHeaderEventArgs.Handled">
            <summary>
            Represents a value indicating whether draw header event is handled.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawUserMarginEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.DrawUserMargin</c>, <c>EditPages.DrawHeader</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawUserMarginArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawUserMarginEventArgs">
            <summary>
            Provides data for the <c>DrawUserMarginEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.DrawUserMarginEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>DrawUserMarginEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
            <param name="line">Line number being drawn.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.DrawUserMarginEventArgs.Line">
            <summary>
            Line number being drawn.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EventHandlers">
            <summary>
            Represents key events for default keymapping.
            </summary>
            <remarks>Normally you do not need to use this class directly, it's used internally by edit control.</remarks>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.TabifyEvent">
            <summary>
            Raises the key event that calls <c>ISelection.Tabify</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.UnTabifyEvent">
            <summary>
            Raises the key event that calls <c>ISelection.UnTabify</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.LowerCaseEvent">
            <summary>
            Raises the key event that calls <c>ISelection.LowerCase</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.UpperCaseEvent">
            <summary>
            Raises the key event that calls <c>ISelection.UpperCase</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CapitalizeEvent">
            <summary>
            Raises the key event that calls <c>ISelection.Capitalize</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.DeleteWhiteSpaceEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteWhiteSpace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CommentSelectionEvent">
            <summary>
            Raises the key event that calls <c>ISelection.CommentSelection</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.UncommentSelectionEvent">
            <summary>
            Raises the key event that calls <c>ISelection.UncommentSelection</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveCharLeftEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveCharLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveCharRightEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveCharRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveLineUpEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveLineUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveLineDownEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveLineDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveWordLeftEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveWordLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveWordRightEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveWordRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MovePageUpEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MovePageUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MovePageDownEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MovePageDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveScreenTopEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveScreenTop</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveScreenBottomEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveScreenBottom</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveLineBeginEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveLineBeginCycled</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveLineEndEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveLineEnd</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveFileBeginEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveFileBegin</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveFileEndEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.MoveFileEnd</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectCharLeftEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectCharLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectCharRightEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectCharRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectLineUpEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectLineUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectLineDownEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectLineDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveSelectionUpEvent">
            <summary>
            Raises the key event that calls <c>ISelection.MoveSelectionUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveSelectionDownEvent">
            <summary>
            Raises the key event that calls <c>ISelection.MoveSelectionDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectWordLeftEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectWordLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectWordRightEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectWordRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectPageUpEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectPageUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectPageDownEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectPageDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectScreenTopEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectScreenTop</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectScreenBottomEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectScreenBottom</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectLineBeginEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectLineBegin</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectLineEndEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectLineEnd</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectFileBeginEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectFileBegin</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectFileEndEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectFileEnd</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectAllEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectAll</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleBookMarkEvent">
            <summary>
            Raises the key event that calls <c>IBookMarks.ToggleBookMark</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.NextBookMarkEvent">
            <summary>
            Raises the key event that calls <c>IBookMarks.GotoNextBookMark</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.PrevBookMarkEvent">
            <summary>
            Raises the key event that calls <c>IBookMarks.GotoPrevBookMark</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ClearBookMarkEvent">
            <summary>
            Raises the key event that calls <c>IBookMarks.ClearAllBookMarks</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleBookMarkEventEx">
            <summary>
            Raises the key event that calls <c>IBookMarks.ToggleBookMark</c> method with parameter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveBookMarkEvent">
            <summary>
            Raises the key event that calls <c>IBookMarks.GotoBookMark</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CollapseAllOutliningEvent">
            <summary>
            Raises the key event that calls <c>IOutlining.FullCollapse</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ExpandAllOutliningEvent">
            <summary>
            Raises the key event that calls <c>IOutlining.FullExpand</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleOutliningEvent">
            <summary>
            Raises the key event that calls <c>IOutlining.ToggleOutlining</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleOutliningSelectionEvent">
            <summary>
            Raises the key event that calls <c>ISelection.ToggleOutlining</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CollapseToDefinitionsEvent">
            <summary>
            Raises the key event that calls <c>IOutlining.CollapseToDefinitions</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SwapAnchorEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SwapAnchor</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.DeleteLeftEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.DeleteWordLeftEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteWordLeft</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.DeleteWordRightEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteWordRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.DeleteRightEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteRight</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.NewLineEvent">
            <summary>
            Raises the key event that calls <c>ISelection.NewLine</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ProcessEscapeEvent">
            <summary>
            Raises the key event that calls <c>ISelection.ProcessEscape</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ProcessTabEvent">
            <summary>
            Raises the key event that calls <c>ISelection.ProcessTab</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ProcessShiftTabEvent">
            <summary>
            Raises the key event that calls <c>ISelection.ProcessShiftTab</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleOverwriteEvent">
            <summary>
            Raises the key event that calls <c>ISelection.ToggleOverWrite</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.UndoEvent">
            <summary>
            Raises the key event that calls <c>ITextSource.Undo</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.RedoEvent">
            <summary>
            Raises the key event that calls <c>ITextSource.Redo</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FindEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.DisplaySearchDialog</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FindNextEvent">
            <summary>
            Raises the key event that calls <c>FindNext</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FindPreviousEvent">
            <summary>
            Raises the key event that calls <c>FindPrevious</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FindNextSelectedEvent">
            <summary>
            Raises the key event that calls <c>FindNextSelected</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FindPreviousSelectedEvent">
            <summary>
            Raises the key event that calls <c>FindPreviousSelected</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ReplaceEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.DisplayReplaceDialog</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.GotolineEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.DisplayGotoLineDialog</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.InitIncrementalSearchEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.StartIncrementalSearch</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.InitReverseIncrementalSearchEvent">
            <summary>
            Raises the key event that calls <c>StartReverseIncrementalSearch</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CutEvent">
            <summary>
            Raises the key event that calls <c>ISelection.Cut</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CopyEvent">
            <summary>
            Raises the key event that calls <c>ISelection.Copy</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.PasteEvent">
            <summary>
            Raises the key event that calls <c>ISelection.Paste</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CompleteWordEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.CompleteWord</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CompleteCodeActions">
            <summary>
            Raises the key event that calls <c>TextEditor.CompleteCodeActions</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ListMembersEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.ListMembers</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.QuickInfoEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.ListMembers</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CodeSnippetsEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.QuickInfo</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ParameterInfoEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.ParameterInfo</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FormatSelectionEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SmartFormat</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.FormatDocumentEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SmartFormatDocument</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.CharTransposeEvent">
            <summary>
            Raises the key event that calls <c>ISelection.CharTransponse</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.WordTransposeEvent">
            <summary>
            Raises the key event that calls <c>ISelection.WordTransponse</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.LineTransposeEvent">
            <summary>
            Raises the key event that calls <c>ISelection.LineTransponse</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleHiddenTextEvent">
            <summary>
            Raises the key event that calls <c>ToggleHiddenText</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleMatchCaseEvent">
            <summary>
            Raises the key event that calls <c>ToggleMatchCase</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleRegularExpressionsEvent">
            <summary>
            Raises the key event that calls <c>ToggleRegularExpressions</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleSearchUpEvent">
            <summary>
            Raises the key event that calls <c>ToggleSearchUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleWholeWordEvent">
            <summary>
            Raises the key event that calls <c>ToggleWholeWord</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ScrollLineUpEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.ScrollLineUp</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ScrollLineDownEvent">
            <summary>
            Raises the key event that calls <c>TextEditor.ScrollLineDown</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToOpenBraceEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToOpenBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToOpenBraceExtendEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToOpenBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToCloseBraceEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToCloseBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToCloseBraceExtendEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToCloseBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToBraceEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.MoveToBraceExtendEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectToBrace</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.NewLineAboveEvent">
            <summary>
            Raises the key event that calls <c>ISelection.NewLineAbove</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.NewLineBelowEvent">
            <summary>
            Raises the key event that calls <c>ISelection.NewLineBelow</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.SelectWordEvent">
            <summary>
            Raises the key event that calls <c>ISelection.SelectWord</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.LineCutEvent">
            <summary>
            Raises the key event that calls <c>ISelection.CutLine</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.LineDeleteEvent">
            <summary>
            Raises the key event that calls <c>ISelection.DeleteLine</c> method.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ToggleMacroRecording">
            <summary>
            Raises the key event that toggles recording the command sequence.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.PlayBackMacro">
            <summary>
            Raises the key event that repeats the stored command sequence.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.EventHandlers.ProcessKey">
            <summary>
            Raises the key event that calls <c>PressKey</c> method.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EventHandlers.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>EventHandlers</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.EventHandlers.MacroRecordEvent">
            <summary>
            Represents an event to process macro recording.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.EventHandlers.EventNames">
            <summary>
            Represents names of all available event handlers.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.GetSearchEventArgs">
            <summary>
            Provides data for the <c>GetSearchEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GetSearchEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>GetSearchEventArgs</c> class with specified parameters.
            </summary>
            <param name="fileName">Name of file where search processed.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.GetSearchEventArgs.Search">
            <summary>
            Search engine where search processed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GetSearchEventArgs.FileName">
            <summary>
            Name of file where search processed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEventHandlers">
            <summary>
            Represents key events for default keymapping.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEventHandlers.EventNames">
            <summary>
            When implemented by a class, represents names of all available event handlers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEventHandlers.MacroRecordEvent">
            <summary>
            When implemented by a class, represents an event to process macro recording.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.InitSearchEventArgs">
            <summary>
            Provides data for the <c>InitSearchEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.InitSearchEventArgs.#ctor(Alternet.Editor.Wpf.ISearch,System.Collections.Generic.IList{System.String},Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Initializes a new instance of the <c>InitSearchEventArgs</c> class with specified parameters.
            </summary>
            <param name="search">ISearch engine where search should be processed.</param>
            <param name="searchList">Receives list of search engines.</param>
            <param name="options">SearchOptions defines search behavior.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.InitSearchEventArgs.SearchList">
            <summary>
            List  of search engines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.InitSearchEventArgs.Options">
            <summary>
            Defines search behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.InitSearchEventArgs.Search">
            <summary>
            Search engine where search should be processed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyPreviewEvent">
            <summary>
            Represents a method that will handle the <c>ICodeCompletionWindow.KeyPreview</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>KeyPreviewEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyPreviewEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionWindow.KeyPreviewEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyPreviewEventArgs.#ctor(System.Windows.Forms.Message)">
            <summary>
            Initializes a new instance of the <c>KeyPreviewEventArgs</c> class with specified parameters.
            </summary>
            <param name="message">Represents key message.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyPreviewEventArgs.Message">
            <summary>
            Key message.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyPreviewEventArgs.Handled">
            <summary>
            Specifies whether painting is handled by an event, preventing further processing of the key message.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.NotifyEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.SourceStateChanged</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>NotifyEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.NotifyEventArgs">
            <summary>
            Provides data for the <c>NotifyEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.NotifyEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.NotifyEventArgs.#ctor(Alternet.Editor.Wpf.NotifyState,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with specified parameters.
            </summary>
            <param name="state">State of the new instance.</param>
            <param name="first">First changed line of new instance.</param>
            <param name="last">Last changed line of new instance.</param>
            <param name="update">Specifies Update field of the instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.NotifyEventArgs.State">
            <summary>
            Represents the reason of change.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.NotifyEventArgs.FirstChanged">
            <summary>
            Represents index of the first changed line in the text portion of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.NotifyEventArgs.LastChanged">
            <summary>
            Represents index of the last changed line in the text portion of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.NotifyEventArgs.Update">
            <summary>
            Indicates whether <c>TextEditor</c> control should update its scroll bars and caret position.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.OutlineEvent">
            <summary>
            Represents a method that will handle the <c>IOutlining.Expanding</c> and <c>IOutlining.Collapsing</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>OutlineEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.OutlineEventArgs">
            <summary>
            Provides data for the <c>AutoCorrectEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.OutlineEventArgs.#ctor(System.Int32)">
            <summary>
            Initialized OutlineEventArgs class with specified line index.
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutlineEventArgs.Line">
            <summary>
            Represents line to be collapsed or expanded.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutlineEventArgs.CanExpand">
            <summary>
            Indicates that outline section at given line can be expanded.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutlineEventArgs.CanCollapse">
            <summary>
            Indicates that outline section at given line can be collapsed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PasteTextEventArgs">
            <summary>
            Provides data for the <c>BeforePaste</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PasteTextEventArgs.#ctor(System.String,Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Initialized PasteTextEventArgs class with specified text and selection type.
            </summary>
            <param name="text">Text to be pasted</param>
            <param name="selType">Selection type of the pasted text</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PasteTextEventArgs.Text">
            <summary>
            Specifies text to be pasted
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PasteTextEventArgs.SelType">
            <summary>
            Specifies new selection type of the pasted text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PasteTextEventArgs.Handled">
            <summary>
            Indicates that if further processing is required.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PositionChangedEventArgs">
            <summary>
            Provides data for the event that occurs when the position within the text part of the <c>ITextSource</c> is changed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PositionChangedEventArgs.#ctor(Alternet.Editor.Wpf.UpdateReason,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>PositionChangedEventArgs</c> class with specified parameters.
            </summary>
            <param name="reason">Reason of the position change.</param>
            <param name="deltaX">Horizontal displacement of the current position.</param>
            <param name="deltaY">Vertical displacement of the current position.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PositionChangedEventArgs.Reason">
            <summary>
            Represents the reason of the position change, such as insert new symbol, delete symbol, navigate and so on.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PositionChangedEventArgs.DeltaX">
            <summary>
            Represents the horizontal displacement of the current position within the text of the <c>ITextSource</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PositionChangedEventArgs.DeltaY">
            <summary>
            Represents the vertical displacement of the current position within the text of the <c>ITextSource</c> control.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PromptOnReplaceEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.PromptOnReplace</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>PromptReplaceEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.PromptReplaceEventArgs">
            <summary>
            Provides data for the <c>PromptOnReplaceEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PromptReplaceEventArgs.#ctor(System.String,System.Boolean,System.Windows.MessageBoxResult,System.Boolean)">
            <summary>
            Initializes PromptReplaceEventArgs with default parameters.
            </summary>
            <param name="text">The text to replace.</param>
            <param name="handled">Specifies whether prompt on replace event already handled.</param>
            <param name="dialogResult">Specifies dialog result for the prompt.</param>
            <param name="yesToAll">Specifies "yes" answer for all rest prompts.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PromptReplaceEventArgs.Text">
            <summary>
            Represents the text to replace.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PromptReplaceEventArgs.Handled">
            <summary>
            Represents a value indicating whether prompt on replace event is handled, disabling use default prompt dialog. By default this value is false.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PromptReplaceEventArgs.DialogResult">
            <summary>
            Represents dialog result for the prompt.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PromptReplaceEventArgs.YesToAll">
            <summary>
            Represent a value indicating "yes" answer to all rest prompts, prevents following prompts.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.StringEvent">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>
            </summary>
            <param name="s">String to be replaced.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextFoundEventArgs">
            <summary>
            Provides data for the <c>TextFoundEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextFoundEventArgs.#ctor(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Initializes a new instance of the <c>TextFoundEventArgs</c> class with specified parameters.
            </summary>
            <param name="search">ISearch engine where text was found.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextFoundEventArgs.#ctor(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TextFoundEventArgs</c> class with specified parameters.
            </summary>
            <param name="fileName">Name of file where text found.</param>
            <param name="text">Found text.</param>
            <param name="options">SearchOptions defines search behavior.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="match">Match if regular expression search successful.</param>
            <param name="position">Position where text was found.</param>
            <param name="len">Length of found text.</param>
            <param name="multiLine">Determines if search text is found on multiple lines.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.FileName">
            <summary>
            Name of file where text found.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Text">
            <summary>
            Found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Options">
            <summary>
            Defines search behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Expression">
            <summary>
            Represents a regular expression to find text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Match">
            <summary>
            Match if regular expression search successful.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Position">
            <summary>
            Position where text was found.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Len">
            <summary>
            Length of found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.MultiLine">
            <summary>
            Determines if search text is found on multiple lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFoundEventArgs.Search">
            <summary>
            Search engine where text was found.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextUndoEvent">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>.
            </summary>
            <param name="s">String to be replaced.</param>
            <param name="operations">List containing insertion or deletion of text fragments.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextUndoEventEx">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>.
            </summary>
            <param name="s">String to be replaced.</param>
            <param name="operations">List containing insertion or deletion of text fragments.</param>
            <param name="range">Range representing text to change.</param>
            <param name="index">Index of line to be changed.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.UrlJumpEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.JumpToUrl</c> or <c>HyperTextEx.JumpToUrl</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>UrlJumpEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.UrlJumpEventArgs">
            <summary>
            Provides data for the <c>UrlJumpEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UrlJumpEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>UrlJumpEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">The Url address.</param>
            <param name="handled">Specifies whether jump to url event already handled.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.UrlJumpEventArgs.Text">
            <summary>
            Represents the Url address.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UrlJumpEventArgs.Handled">
            <summary>
            Represents a value indicating whether jump to url event is handled, disabling opening default browser. By default this value is false.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FlowDocumentExporter">
            <summary>
            Represents a text exporter for FlowDocument.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FlowDocumentExporter.BeginExport(System.Windows.Documents.FlowDocument,Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            Initializes document export.
            </summary>
            <param name="document">FlowDocument to export data to.</param>
            <param name="options">FlowDocumentExportOptions determines export behavior.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.FlowDocumentExporter.ExportLine(Alternet.Editor.Wpf.FlowDocumentExportLineData)">
            <summary>
            Exports single line.
            </summary>
            <param name="data">FlowDocumentExportLineData data to export.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.FlowDocumentExporter.EndExport">
            <summary>
            Finalizes export.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FlowDocumentExportFlags">
            <summary>
            Determines behavior of the FlowDocument export.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.FlowDocumentExportFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.FlowDocumentExportFlags.IncludeLineNumbers">
            <summary>
            Specifies that numbers of lines should be included into document.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.FlowDocumentExportFlags.IgnoreTextColors">
            <summary>
            Specifies that document should ignore color information.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FlowDocumentExportLineData">
            <summary>
            Stores data for FlowDocument export.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FlowDocumentExportLineData.StringItem">
            <summary>
            Gets or sets the <c>IStringItem</c> object corresponding to the individual line in the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FlowDocumentExportLineData.LineNumber">
            <summary>
            Gets or sets a texts line number.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FlowDocumentExportOptions">
            <summary>
            Contains settings of the FlowDocument export.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FlowDocumentExportOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>FlowDocumentExportOptions</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FlowDocumentExportOptions.Flags">
            <summary>
            Gets or sets FlowDocumentExportFlags to determine behavior of the FlowDocument export.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FlowDocumentExportOptions.Editor">
            <summary>
            TextEditor which content should be exported.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FlowDocumentExportOptions.LineNumbersStart">
            <summary>
            Gets or sets index of the first line being exported.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IFlowDocumentExporter">
            <summary>
            Provides methods to export FlowDocument.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IFlowDocumentExporter.BeginExport(System.Windows.Documents.FlowDocument,Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            When implemented by a class, initializes document export.
            </summary>
            <param name="document">FlowDocument to export data to.</param>
            <param name="options">FlowDocumentExportOptions determines export behavior.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IFlowDocumentExporter.ExportLine(Alternet.Editor.Wpf.FlowDocumentExportLineData)">
            <summary>
            When implemented by a class, exports single line.
            </summary>
            <param name="data">FlowDocumentExportLineData data to export.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IFlowDocumentExporter.EndExport">
            <summary>
            When implemented by a class, finalizes export.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FmtExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtExport.#ctor">
            <summary>
            Initializes a new instance of the <c>FmtExport</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtExport.WriteLine(Alternet.Syntax.IStringItem)">
            <summary>
            Saves a particular <c>IStringItem</c> object.
            </summary>
            <param name="item"><c>IStringItem</c> to save.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtExport.Write">
            <summary>
            Saves entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.HtmlExport">
            <summary>
            Represents class that can export Edit control's content to HTML format.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.HtmlExport.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlExport</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.HtmlExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.HtmlExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.RtfExport">
            <summary>
            Represents class that can export Edit control's content to rich text format.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.RtfExport.#ctor">
            <summary>
            Initializes a new instance of the <c>RtfExport</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.RtfExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.RtfExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FmtImport">
            <summary>
            Represents basic class to import Edit control's content from various formats.
            </summary>
            <remarks>Do not create instances of this class directly; use derived classes like <c>XmlImportet</c> and <c>RtfImporter</c>.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.#ctor">
            <summary>
            Initializes a new instance of the <c>FmtImporter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.Finalize">
            <summary>
            Destroys the instance of the <c>HtmlImporter</c> class.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.FmtImport.ReadFormattedText">
            <summary>
            Occurs when formatted text is read.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.FmtImport.DefaultForeColor">
            <summary>
            Defines default fore color of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FmtImport.DefaultBackColor">
            <summary>
            Defines default back color of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.FmtImport.DefaultStyle">
            <summary>
            Defines default font style of the text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.BeginRead(System.IO.TextReader,System.Object)">
            <summary>
            Starts reading routine.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="userData">Data to be loaded.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.Read">
            <summary>
            Loads entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.EndRead">
            <summary>
            Finalizes reading routine.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.FmtImport.Dispose">
            <summary>
            Release resources of the <c>PropertyChangeNotifier</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.HitTestInfo">
            <summary>
            Contains information about an area of an Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.HitTest">
            <summary>
            Gets or sets the <c>HitTest</c> that represents the area of the Edit control evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Line">
            <summary>
            Gets or sets the index of line evaluated by the hit-test operation.
            Contains index of line if mouse is over text line in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Pos">
            <summary>
            Gets or sets the index of character within the line evaluated by the hit-test operation.
            Contains index of line if mouse is over some text in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Item">
            <summary>
            Gets or sets the <c>IStrItem</c> object evaluated by the hit-test operation.
            Contains instance of <c>IStrItem</c> object if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.String">
            <summary>
            Gets or sets the text string evaluated by the hit-test operation.
            Contains string if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Word">
            <summary>
            Gets or sets the word evaluated by the hit-test operation.
            Contains string if mouse is over some word in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Url">
            <summary>
            Gets or sets the hypertext string evaluated by the hit-test operation.
            Contains string if mouse is over hypertext section in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.GutterImage">
            <summary>
            Gets or sets the <c>Gutter</c> ImageIndex, evaluated by the hit-test operation.
            Contains index of image if mouse is over the gutter image; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.OutlineIndex">
            <summary>
            Gets or sets the index of line where outline image is displayed, evaluated by the hit-test operation.
            Contains index of line if mouse is over the outline button; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.OutlineRange">
            <summary>
            Gets or sets the <c>IOutlineRange</c> object evaluated by the hit-test operation.
            Contains instance of <c>IOutlineRange</c> object if mouse is over outline button; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.SyntaxError">
            <summary>
            Gets or sets the <c>ISyntaxError</c> object evaluated by the hit-test operation.
            Contains instance of <c>ISyntaxError</c> object if mouse is over syntax error; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.Style">
            <summary>
            Gets or sets the index of lexical style evaluated by the hit-test operation.
            Contains index of lexical style if mouse is over the text; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HitTestInfo.TextStyle">
            <summary>
            Gets or sets the set of additional flags for the text fragment evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.HitTestInfo.Reset">
            <summary>
            Resets <c>HitTestInfo</c> members to their default values.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.HtmlImporter">
            <summary>
            Represents class that can import Edit control's content stored in HTML format.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ImageSourceCollection">
            <summary>
            Represents a collection of ImageSource objects.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyData">
            <summary>
            Represents data for a particular record in the Hashtable that contains keys with attached actions.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyData.#ctor">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyData.#ctor(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent,Alternet.Editor.Wpf.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with specified parameters.
            </summary>
            <param name="keys">Specifies key data of this new instance.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.Keys">
            <summary>
            Key to which some action is attached.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.Param">
            <summary>
            Object passed as a parameter to the extended action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.State">
            <summary>
            State of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.LeaveState">
            <summary>
            State of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.Action">
            <summary>
            Action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.ActionEx">
            <summary>
            Extended action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyData.EventName">
            <summary>
            String representation of the action .
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyData.ToString">
            <summary>
            Converts <c>KeyListData</c> content to string.
            </summary>
            <returns>String that represents this <c>KeyListData</c>.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
            <remarks>KeyList class is used to dynamically link key sequences with executing some actions within Edit control. You can use this class to customize reaction on pressing certain keys sequences in the Edit control.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>KeyList</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyList.EventData">
            <summary>
            Represents array of event handlers associated with keys.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.KeyList.Handlers">
            <summary>
            Represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>KeyList</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent,Alternet.Editor.Wpf.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified action.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.AddNormal(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.AddNormal(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Remove(Alternet.Editor.Wpf.Keys,System.Int32)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Remove(Alternet.Editor.Wpf.Keys)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.RemoveState(System.Int32)">
            <summary>
            Removes the given state with all keys related to it.
            </summary>
            <param name="state">State of the Edit control to be removed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.Clear">
            <summary>
            Removes all elements from the key list.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.ExecuteKey(Alternet.Editor.Wpf.Keys,System.Int32@)">
            <summary>
            Executes action or extended action attached to the specified key.
            </summary>
            <param name="keys">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.KeyList.FindKey(Alternet.Editor.Wpf.Keys,System.Int32)">
            <summary>
            Indicates whether given key locates within the collection.
            </summary>
            <param name="keys">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.BackgroundLayer">
            <summary>
            Represents a surface for rendering TextEditor background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BackgroundLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>BackgroundLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BackgroundLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BackgroundVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BackgroundVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>BackgroundVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owner of this new instance.</param>
            <param name="index">Index of the text line to which this item belongs.</param>
            <param name="length">Number of characters in the text line to which this item belongs.</param>
            <param name="realLine">Specifies real line number to process.</param>
            <param name="hasOutline">Specifies whether outline bounds drawing.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BackgroundVisualItem.Index">
            <summary>
            Gets number of the text line to which this item belongs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BackgroundVisualItem.Length">
            <summary>
            Gets number of characters in the text line to which this item belongs.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CaretLayer">
            <summary>
            Represents a surface for rendering TextEditor caret.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CaretLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>CaretLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CaretLayer.ShowCaret(System.Windows.Rect)">
            <summary>
            Makes the caret visible on the screen at the specified position.
            </summary>
            <param name="caretRectangle">Caret location and dimension.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CaretLayer.HideCaret">
            <summary>
            Hides the caret's current shape.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeActionLayer">
            <summary>
            Represents a surface for rendering TextEditor code action images.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeActionLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>CodeActionLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeActionLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeActionLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeActionVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor code action image.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeActionVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <c>CodeActionVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="imageIndices">Collection of image indexes should be displayed in this new instance.</param>
            <param name="isBookmark">Indicates whether specified text line is bookmarked.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeActionVisualItem.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeActionVisualItem.IsBookmark">
            <summary>
            Gets a boolean value indicating whether current line is bookmarked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeActionVisualItem.ImageIndices">
            <summary>
            Gets a collation of image indexes should be displayed in this visual element.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditMarginLayer">
            <summary>
            Represents a surface for rendering TextEditor Edit Margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditMarginLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>EditMarginLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditMarginLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.EditMarginVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor Edit Margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditMarginVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>EditMarginVisualItem</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.EditMarginVisualItem.Height">
            <summary>
            Gets or sets a Edit Margin height.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.EditMarginVisualItem.Render">
            <summary>
            Renders Edit Margin content.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.GutterBackgroundVisual">
            <summary>
            Represents a visual item to render graphics on the TextEditor gutter background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterBackgroundVisual.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>GutterBackgroundVisual</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.GutterBackgroundVisual.Height">
            <summary>
            Gets or sets a gutter background height.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterBackgroundVisual.Render">
            <summary>
            Renders gutter background content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterCustomVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <c>GutterCustomVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="imageIndices">Collection of image indexes should be displayed in this new instance.</param>
            <param name="isBookmark">Indicates whether specified text line is bookmarked.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.GutterLayer">
            <summary>
            Represents a surface for rendering TextEditor gutter.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>GutterLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.GutterVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor gutter.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.GutterVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <c>GutterVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="imageIndices">Collection of image indexes should be displayed in this new instance.</param>
            <param name="isBookmark">Indicates whether specified text line is bookmarked.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.GutterVisualItem.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GutterVisualItem.IsBookmark">
            <summary>
            Gets a boolean value indicating whether current line is bookmarked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.GutterVisualItem.ImageIndices">
            <summary>
            Gets a collation of image indexes should be displayed in this visual element.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineModificatorState">
            <summary>
            Defines line modificator states.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineModificatorState.None">
            <summary>
            Specifies regular line state.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineModificatorState.Changed">
            <summary>
            Indicates that line is in changed state.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineModificatorState.Saved">
            <summary>
            Indicates that line in the saved state.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Layer">
            <summary>
            Base class to represents a surface for rendering TextEditor area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.Layer.TextEditorView">
            <summary>
            Gets TextEditorView owner of the layer.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Layer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Layer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineModificatorsLayer">
            <summary>
            Represents a surface for rendering TextEditor line modificators area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineModificatorsLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>LineModificatorsLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineModificatorsLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineModificatorsLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineModificatorsVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor line modificators area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineModificatorsVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,Alternet.Editor.Wpf.LineModificatorState,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineNumbersVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="lineModificatorState">LineModificatorState of specified line.</param>
            <param name="realLine">Specifies real line number to process.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineModificatorsVisualItem.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineModificatorsVisualItem.LineModificatorState">
            <summary>
            Gets modification state of current line.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineNumbersBackgroundVisual">
            <summary>
            Represents a visual item to render graphics on the TextEditor gutter background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersBackgroundVisual.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>LineNumbersBackgroundVisual</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineNumbersBackgroundVisual.Height">
            <summary>
            Gets or sets a gutter background height.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersBackgroundVisual.Render">
            <summary>
            Renders gutter background content.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineNumbersLayer">
            <summary>
            Represents a surface for rendering TextEditor line numbers area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>LineNumbersLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersLayer.GetLineNumbersWidth">
            <summary>
            Calculates line numbers area width.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineNumbersVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor line numbers area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineNumbersVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="lineNumberText">Text to display line number information.</param>
            <param name="realLine">Specifies real line number to process.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineNumbersVisualItem.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineNumbersVisualItem.LineNumberWidth">
            <summary>
            Gets or sets horizontal dimension of area where line numbers displayed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineNumbersVisualItem.MeasureLineNumberText(System.String,Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Measure specified line number text.
            </summary>
            <param name="text">Text to measure.</param>
            <param name="editor">TextEditor owns this visual item.</param>
            <returns>Double that represents dimension of specified text.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapBackgroundVisual">
            <summary>
            Represents a visual item to render graphics on the TextEditor minimap background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapBackgroundVisual.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>MinimapBackgroundVisual</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.MinimapBackgroundVisual.Height">
            <summary>
            Gets or sets a minimap background height.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapBackgroundVisual.Render">
            <summary>
            Renders minimap background content.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapCurrentFrameVisual">
            <summary>
            Represents a visual item to render graphics on the TextEditor minimap current frame.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapCurrentFrameVisual.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>MinimapCurrentFrameVisual</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.MinimapCurrentFrameVisual.FrameRect">
            <summary>
            Gets or sets a minimap current frame rect.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapCurrentFrameVisual.Render">
            <summary>
            Renders minimap current frame content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapDragLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>MinimapDragLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapDragLayer.Show(System.Double)">
            <summary>
            Makes the caret visible on the screen at the specified position.
            </summary>
            <param name="caretRectangle">Caret location and dimension.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapDragLayer.Hide">
            <summary>
            Hides the caret's current shape.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapLayer">
            <summary>
            Represents a surface for rendering minimap text area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>TextLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor text area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.String,Alternet.Syntax.StringItemInfo[],System.Boolean,System.Int32,Alternet.Syntax.SyntaxErrorType)">
            <summary>
            Initializes a new instance of the <c>MinimapVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="line">Text line to which this new instance belongs.</param>
            <param name="colorData">Color information related to the specified line.</param>
            <param name="needsErrorUnderlineAfterLineEnd">Specifies whether item should paint error underline after line end.</param>
            <param name="realLine">Specifies real line number to process.</param>
            <param name="errorType">Specifies type of error.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.MinimapVisualItem.Index">
            <summary>
            Gets or sets index of the text line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MinimapVisualItem.TextSource">
            <summary>
            Gets <c>LineTextSource</c> corresponding to this visual line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapVisualItem.GetLexStyle(Alternet.Syntax.StringItemInfo,Alternet.Syntax.TextStyle@)">
            <summary>
            Retrieves lex state corresponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapVisualItem.EqualStyles(Alternet.Syntax.StringItemInfo,Alternet.Syntax.StringItemInfo,System.Boolean)">
            <summary>
            Indicates whether given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whether colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapVisualItem.GetFontStyle(System.Drawing.FontStyle,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapVisualItem.GetFontColor(System.Drawing.Color,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font color corresponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.OutliningLayer">
            <summary>
            Represents a surface for rendering TextEditor outlining area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.OutliningLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>OutliningLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.OutliningLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.OutliningLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.OutliningVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor outlining area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.OutliningVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <c>OutliningVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="isOutlineHeader">Specifies whether it is an outline header.</param>
            <param name="isLine">Specifies whether it is a simple outline line.</param>
            <param name="isExpanded">Expanded state for the new instance.</param>
            <param name="lineBeforeButton">Line before outlining button should be drawn.</param>
            <param name="lineAfterButton">Line after outlining button should be drawn.</param>
            <param name="drawEndTick">Horizontal segment at the end of outlining line should be drawn.</param>
            <param name="realLine">Specifies real line number to process.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.Index">
            <summary>
            Gets an index of the text line to which this visual item belongs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.IsOutlineHeader">
            <summary>
            Gets a boolean value indicating whether this visual item is outline header.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.IsLine">
            <summary>
            Gets a boolean value indicating whether this visual item is a simple outlining line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.IsExpanded">
            <summary>
            Gets a boolean value indicating whether this visual item is in expanded state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.DrawContent">
            <summary>
            Gets a boolean value indicating whether this visual item should draw outline primitives.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.LineBeforeButton">
            <summary>
            Gets a boolean value indicating whether this visual item should draw line before outlining button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.LineAfterButton">
            <summary>
            Gets a boolean value indicating whether this visual item should draw line after outlining button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.OutliningVisualItem.DrawEndTick">
            <summary>
            Gets a boolean value indicating whether this visual item should draw horizontal segment at the end of outlining line.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.FontRenderingProperties">
            <summary>
            Class for combining Font and other text related properties.
            (Typeface, Alignment, Decorations, etc).
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.GenericTextParagraphProperties">
            <summary>
            Class to implement TextParagraphProperties, used by TextSource.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.GenericTextRunProperties">
            <summary>
            Class used to implement TextRunProperties.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextFragmentData">
            <summary>
            Represent data for particular text fragment.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextFragmentData.#ctor(System.Int32,System.Int32,System.Double,System.Windows.Media.Brush,System.Windows.Media.Brush,System.String,System.Windows.Media.Typeface)">
            <summary>
            Initializes a new instance of the <c>TextFragmentData</c> class with specified parameters.
            </summary>
            <param name="textStartIndex">Specifies start text index of the fragment.</param>
            <param name="textLength">Specifies text length of the fragment.</param>
            <param name="textWidth">Specifies text width of the fragment.</param>
            <param name="foregroundColor">Specifies brash to paint foreground of the text fragment.</param>
            <param name="backgroundColor">Specifies brash to paint background of the text fragment.</param>
            <param name="overrideText">Specifies text should be displayed instead of original text.</param>
            <param name="typeface">Typeface describes this fragment.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.OverrideText">
            <summary>
            Gets or sets text should be displayed instead of original text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.TextStartIndex">
            <summary>
            Gets or sets start text index of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.TextLength">
            <summary>
            Gets or sets text length of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.TextWidth">
            <summary>
            Gets or sets text width of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.Foreground">
            <summary>
            Gets or sets brash to paint foreground of the text fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.Background">
            <summary>
            Gets or sets brash to paint background of the text fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.Typeface">
            <summary>
            Gets or sets Typeface describes the text fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.IsUnderline">
            <summary>
            Gets or sets a boolean value indicating whether text fragment is underlined.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentData.IsStrikethrough">
            <summary>
            Gets or sets a boolean value indicating whether text fragment is strikeout.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextFragmentRenderingArgs">
            <summary>
            Provides data for the rendering text fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.Line">
            <summary>
            Gets or sets text of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.LineStyle">
            <summary>
            Gets or sets an IEditLineStyle of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.Style">
            <summary>
            Gets or sets lexical style number of the fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.InSelection">
            <summary>
            Gets or set a boolean value indicating whether fragment selected.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.InSearchSelection">
            <summary>
            Gets or set a boolean value indicating whether fragment is search selection state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.LineIndex">
            <summary>
            Gets or sets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.StartCharIndex">
            <summary>
            Gets or sets start character index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.EndCharIndex">
            <summary>
            Gets or sets end character index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.IsSpecialSymbol">
            <summary>
            Get or sets a boolean value indicating whether fragment contains special symbol.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextFragmentRenderingArgs.InGuideLine">
            <summary>
            Get or sets a boolean value indicating whether fragment contains guide line.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextLayer">
            <summary>
            Represents a surface for rendering TextEditor text area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>TextLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextLayer.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the layer at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of layer.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.VisualLine">
            <summary>
            Represents a visual item to render graphics on the TextEditor text area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualLine.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.String,Alternet.Syntax.StringItemInfo[],System.Boolean,System.Int32,Alternet.Syntax.SyntaxErrorType)">
            <summary>
            Initializes a new instance of the <c>VisualLine</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="line">Text line to which this new instance belongs.</param>
            <param name="colorData">Color information related to the specified line.</param>
            <param name="needsErrorUnderlineAfterLineEnd">Specifies whether item should paint error underline after line end.</param>
            <param name="realLine">Specifies real line number to process.</param>
            <param name="errorType">Specifies type of error.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualLine.OutlineSectionBounds">
            <summary>
            Gets a rectangle around outline section.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualLine.Index">
            <summary>
            Gets or sets index of the text line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualLine.TextSource">
            <summary>
            Gets <c>LineTextSource</c> corresponding to this visual line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualLine.GetLexStyle(Alternet.Syntax.StringItemInfo,Alternet.Syntax.TextStyle@)">
            <summary>
            Retrieves lex state corresponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualLine.EqualStyles(Alternet.Syntax.StringItemInfo,Alternet.Syntax.StringItemInfo,System.Boolean)">
            <summary>
            Indicates whether given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whether colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualLine.GetFontStyle(System.Drawing.FontStyle,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualLine.GetFontColor(System.Drawing.Color,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font color corresponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.UserMarginLayer">
            <summary>
            Represents a surface for rendering TextEditor user margin area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UserMarginLayer.#ctor(Alternet.Editor.Wpf.TextEditorView)">
            <summary>
            Initializes a new instance of the <c>UserMarginLayer</c> class with specified parameters.
            </summary>
            <param name="view">TextEditorView owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.UserMarginLayer.RemoveAllItems">
            <summary>
            Clears visual items collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UserMarginVisualItem">
            <summary>
            Represents a visual item to render graphics on the TextEditor user margin area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UserMarginVisualItem.#ctor(Alternet.Editor.Wpf.TextEditorView,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>UserMarginVisualItem</c> class with specified parameters.
            </summary>
            <param name="textEditorView">TextEditorView owns this new instance.</param>
            <param name="index">Index of the text line to which this new instance belongs.</param>
            <param name="userMarginText">Text to display in the user margin area.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.UserMarginVisualItem.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.#ctor">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.BeginUpdate">
            <summary>
            Prevents LineSeparator updating until calling <c>LineSeparator.EndUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>LineSeparator.BeginUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.DisableUpdate">
            <summary>
            Prevents LineSeparator updating until calling <c>LineSeparator.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.EnableUpdate">
            <summary>
            Re-enables LineSeparator updating, that was turn of by calling <c>LineSeparator.BeginUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.Update">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.Options">
            <summary>
            Gets or sets a set of flags customizing appearance and behavior of the <c>LineSeparator</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.HighlightBackColor">
            <summary>
            Gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.HighlightForeColor">
            <summary>
            Gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.LineColor">
            <summary>
            Gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineSeparator.ContentDividerColor">
            <summary>
            Gets or sets color of horizontal lines between particular sections (for example, methods) in the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.Assign(Alternet.Editor.Wpf.ILineSeparator)">
            <summary>
            Copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.NeedHighlightLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.NeedHighlightDisplayLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index in display coordinates.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.NeedHighlight">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.NeedHide">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.ResetHighlightForeColor">
            <summary>
            Resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.ResetHighlightBackColor">
            <summary>
            Resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.ResetLineColor">
            <summary>
            Resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.ResetContentDividerColor">
            <summary>
            Resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            Temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlighting from temporary highlighted line.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LowFootprintStringItem">
            <summary>
            Represents string-like object with extended properties.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LowFootprintStringItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StringItem</c> class with specified string.
            </summary>
            <param name="s">Specifies string content of this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LowFootprintStringItem.String">
            <summary>
            Gets or sets string content of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LowFootprintStringItem.TextData">
            <summary>
            Gets or sets information of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LowFootprintStringItem.State">
            <summary>
            Gets or sets current the state of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LowFootprintStringItem.LexState">
            <summary>
            Gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LowFootprintStringItem.PrevLexState">
            <summary>
            Gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LowFootprintStringItem.SetTextStyle(System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Sets style information to specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to set.</param>
            <param name="len">Specifies number of characters in string to set.</param>
            <param name="style">Specifies <c>TextStyle</c> to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LowFootprintStringItem.ClearTextStyle(System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Removes style information from specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to remove.</param>
            <param name="len">Specifies number of characters in string to remove.</param>
            <param name="style">Specifies <c>TextStyle</c> to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LowFootprintStringItem.TextStyleAt(System.Int32)">
            <summary>
            Retrieves style information from <c>IStringItem</c>.
            </summary>
            <param name="pos">Specifies position in <c>IStringItem</c> to obtain style information.</param>
            <returns><c>TextStyle</c> at specified position.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.MacroKeyData">
            <summary>
            Represents macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MacroKeyData.#ctor(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent,Alternet.Editor.Wpf.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MacroKeyListData</c> class with specified settings.
            </summary>
            <param name="keyData">Specifies key data of this new instance.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">Current state of the Edit control.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MacroKeyData.#ctor">
            <summary>
            Initializes a new instance of the <c>MacroKeyListData</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MacroKeyData.ParamType">
            <summary>
            Gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MacroKeyData.ParamStr">
            <summary>
            String representation of the parameter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MacroKeyData.FullName">
            <summary>
            String representation of the action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MacroKeyData.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ColorTheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Alternet.Editor.Wpf.MacroKeyList">
            <summary>
            Represents list of macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MacroKeyList.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ColorTheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.MacroKeyList.LinkMacros(System.Object,Alternet.Editor.Wpf.IEventHandlers)">
            <summary>
            Links macro actions to the editor events.
            </summary>
            <param name="owner">Editor control containing macros.</param>
            <param name="keyHandlers">Collection of events.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.Margin">
            <summary>
            Represents an appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.#ctor">
            <summary>
            Initializes a new instance of the <c>Margin</c> with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Margin</c> with specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Finalize">
            <summary>
            Destroys the instance of the <c>Margin</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.BeginUpdate">
            <summary>
            Prevents Margin updating until calling <c>Margin.EndUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.DisableUpdate">
            <summary>
            Prevents Margin updating until calling <c>Margin.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.EnableUpdate">
            <summary>
            Re-enables Margin updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Update(System.Boolean)">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Update">
            <summary>
            Forces editor control to invalidate it's area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.Position">
            <summary>
            Gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.ColumnPositions">
            <summary>
            Gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.Pen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.PenColor">
            <summary>
            Gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.ColumnPen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.ColumnPenColor">
            <summary>
            Gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.Visible">
            <summary>
            Gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.ColumnsVisible">
            <summary>
            Gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.IsDragging">
            <summary>
            Indicates whether <c>Margin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.AllowDrag">
            <summary>
            Indicates whether drag operation can performed to <c>Margin</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Margin.ShowHints">
            <summary>
            Gets or sets a value indicating whether <c>Margin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Assign(Alternet.Editor.Wpf.IMargin)">
            <summary>
            Copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Paint(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws <c>Margin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.PaintColumn(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetPosition">
            <summary>
            Resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetColumnPositions">
            <summary>
            Resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetColumnsVisible">
            <summary>
            Resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetAllowDrag">
            <summary>
            Resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.CancelDragging">
            <summary>
            Cancels dragging the margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Contains(System.Int32,System.Int32)">
            <summary>
            Indicates whether <c>Margin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.DragTo(System.Int32,System.Int32)">
            <summary>
            Moves <c>Margin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Margin.Dispose">
            <summary>
            Release resources of the <c>Margin</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Minimap">
            <summary>
            Represents the minimap at the right side of the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.#ctor">
            <summary>
            Initializes a new instance of the <c>Minimap</c> with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Minimap</c> with specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.Options">
            <summary>
            Gets or sets a <c>MinimapOptions</c> that determine minimap appearance and behaviour.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.Visible">
            <summary>
            Gets or sets a value indicating whether minimap area should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.IsDragging">
            <summary>
            Indicates whether <c>Minimap</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.IsScrolling">
            <summary>
            Indicates whether <c>Minimap</c> is in scrolling state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.AllowDrag">
            <summary>
            Indicates whether drag operation can performed to <c>Minimap</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.AllowScroll">
            <summary>
            Indicates whether scroll operation can performed to <c>Minimap</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.GetHint(System.Int32,System.Int32)">
            <summary>
            Gets a text under the cursor to be displayed in the hint
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>Text under the cursor</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.GetDisplayLine(System.Int32)">
            <summary>
            Gets a line to be displayed at y-position
            </summary>
            <param name="y">the vertical position in screen coordinates.</param>
            <returns>Text line, in display coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.GetDisplayPoint(System.Int32)">
            <summary>
            Gets a display position at minimap y-position
            </summary>
            <param name="y">the vertical position in screen coordinates.</param>
            <returns>Text position, in display coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.CancelDragging">
            <summary>
            Cancels dragging the minimap.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.CancelScrolling">
            <summary>
            Cancels scrolling the minimap.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.Contains(System.Int32,System.Int32)">
            <summary>
            Indicates whether <c>Minimap</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.ContainsBorder(System.Double,System.Double)">
            <summary>
            Indicates whether left border of <c>Minimap</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.DragTo(System.Double,System.Double)">
            <summary>
            Moves <c>Minimap</c> left border to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.ScrollTo(System.Double,System.Double)">
            <summary>
            Scrolls <c>Minimap</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.OnClick(System.Drawing.Point)">
            <summary>
            Handles <c>IMinimap</c> click.
            </summary>
            <param name="pos">Position of click</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.Minimap.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.BeginUpdate">
            <summary>
            Prevents Margin updating until calling <c>Minimap.EndUpdate</c> method.
            </summary>
            <returns>Number of Minimap updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>Minimap.BeginUpdate</c> method.
            </summary>
            <returns>Number of Minimap updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.DisableUpdate">
            <summary>
            Prevents Minimap updating until calling <c>Minimap.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.EnableUpdate">
            <summary>
            Re-enables Minimap updating, that was turn of by calling <c>Minimap.DisableUpdate</c> method.
            </summary>
            <returns>Number of Minimap updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.Update">
            <summary>
            Forces editor control to invalidate it's area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Minimap.Dispose">
            <summary>
            Release resources of the <c>Margin</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapHint">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapHint.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the <c>MinimapHint</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.MinimapHint.InnerControl">
            <summary>
            Represents <c>MinimapHintControl</c> control contained in popup window.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapHintControl">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapHintControl.#cctor">
            <summary>
            Initializes a new instance of the <c>MinimapHintControl</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapHintControl.#ctor">
            <summary>
            Initializes a new instance of the <c>MinimapHintControl</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MinimapHintControl.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.ModifyTextDisplayEventArgs">
            <summary>
            Provides data for the <c>ModifyTextDisplay</c> event.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ModifyTextDisplayEventArgs.#ctor(Alternet.Editor.Wpf.TextFragmentRenderingArgs,Alternet.Editor.Wpf.TextFragmentData)">
            <summary>
            Initializes a new instance of the <c>ModifyTextDisplayEventArgs</c> class with specified parameters.
            </summary>
            <param name="renderingArgs">Specifies rendering text fragment data.</param>
            <param name="textFragmentData">Specified a particular text fragment.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifyTextDisplayEventArgs.RenderingArgs">
            <summary>
            Gets data for rendering the text fragment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifyTextDisplayEventArgs.TextFragmentData">
            <summary>
            Gets data for a particular text fragment.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Outlining">
            <summary>
            Represents properties and methods that affects appearance and behavior of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Outlining</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.OutlineColor">
            <summary>
            Gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.CollapsedLineColor">
            <summary>
            Gets or sets color that is used to draw collapsed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.OutlineCollapsedImageIndex">
            <summary>
            Gets or sets image index to draw outline button in the collapsed state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.OutlineExpandedImageIndex">
            <summary>
            Gets or sets image index to draw outline button in the expanded state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.UseRoundRect">
            <summary>
            Gets or sets a boolean value indicating whether outlining buttons should be drawn with rounded corners.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Assign(Alternet.Editor.Wpf.IOutlining)">
            <summary>
            Copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.OutlineText">
            <summary>
            Tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.UnOutlineText">
            <summary>
            Removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ResetOutlineColor">
            <summary>
            Resets <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ResetCollapsedLineColor">
            <summary>
            Resets <c>CollapsedLineColor</c> to the default value.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Outlining.Expanding">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Outlining.Collapsing">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Outlining.OutlineOptions">
            <summary>
            Gets or sets outlining options.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.UnOutline(System.Drawing.Point)">
            <summary>
            Removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.UnOutline(System.Int32)">
            <summary>
            Removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.UnOutline">
            <summary>
            Removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.Expand(System.Int32)">
            <summary>
            Expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.FullExpand">
            <summary>
            Expands all outlining sections.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.FullExpand(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.FullCollapse(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ToggleOutlining(System.Collections.Generic.IList{Alternet.Common.IRange},Alternet.Syntax.IOutlineRange)">
            <summary>
            Toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.CollapseToDefinitions">
            <summary>
            Collapses and expands some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineHint(Alternet.Syntax.IOutlineRange)">
            <summary>
            Returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Int32)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.CanExpand(System.Int32)">
            <summary>
            Returns boolean value indicating that outline section at given line can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.CanExpand(Alternet.Syntax.IOutlineRange)">
            <summary>
            Returns boolean value indicating that given outline section can be expanded.
            </summary>
            <param name="range">Specifies outline range.</param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.CanCollapse(System.Int32)">
            <summary>
            Returns boolean value indicating that outline section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ResetAllowOutlining">
            <summary>
            Resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Outlining.ResetOutlineOptions">
            <summary>
            Resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PrintingWpf">
            <summary>
            Represents properties and methods for printing and print previewing of Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>PrintingWpf</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.PrintingWpf.Alternet#Editor#Wpf#IPrintingWpf#PrintDocument">
            <summary>
            Represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.OnInitialized">
            <summary>
            Raises the <c>Initialized</c> event.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PrintingWpf.Options">
            <summary>
            Gets or sets <c>PrintOptions</c> that determines printing behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PrintingWpf.AllowedOptions">
            <summary>
            Gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PrintingWpf.PrintDialog">
            <summary>
            Represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.PrintingWpf.ShowPrintOptionsDialog">
            <summary>
            Gets or sets a value indicating whether Print Options Dialog can be opened.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.Assign(Alternet.Editor.Wpf.IPrintingWpf)">
            <summary>
            Copies the contents of another <c>IPrintingWpf</c> object.
            </summary>
            <param name="source">Specifies <c>IPrintingWpf</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.Print">
            <summary>
            Sends <c>PrintingWpf.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.ExecutePrintPreviewDialog(System.Windows.DependencyObject)">
            <summary>
            Initializes and runs print preview dialog.
            </summary>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.ExecutePrintDialog">
            <summary>
            Initializes and runs print dialog.
            </summary>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.ExecutePrintOptionsDialog">
            <summary>
            Initializes and runs print options dialog.
            </summary>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.PrintingWpf.ResetAllowedOptions">
            <summary>
            Resets <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationsPainter">
            <summary>
            Represents a class used to paint scrollbar annotations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationsPainter.Dispose">
            <summary>
            Disposes this <c>ScrollBarAnnotationsPainter</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationsPainter.Initialize(Alternet.Editor.Wpf.TextEditor,Alternet.Editor.Wpf.IScrollBarAnnotationsPainterSite)">
            <summary>
            Initializes an instance of the <c>ScrollBarAnnotationsPainter</c> class with a specified owner.
            </summary>
            <param name="editor"><c>TextEditor</c> to which this new instance belongs.</param>
            <param name="site"><c>IScrollBarAnnotationsPainterSite</c> used to retrieve <c>ScrollBarAnnotationPaintData</c></param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationsPainter.RedrawAnnotations">
            <summary>
            Updates the layout and redraws all scrollbar annotations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationsPainter.Paint(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draws annotations using the specified DrawingContext.
            </summary>
            <param name="drawingContext">DrawingContext used to draw annotations.</param>
            <param name="paintRect">Rectangular area where annotations will be drawn.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotations">
            <summary>
            Represents a class that handles various scroll bar annotations.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ScrollBarAnnotations.CustomAnnotationsRequested">
            <summary>
            Occurs when a custom annotation is requested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotations.Enabled">
            <summary>
            Indicates whether <c>IScrollBarAnnotations</c> is enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotations.EnabledAnnotationKinds">
            <summary>
            Gets or sets active scrollbar annotation kinds.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.Dispose">
            <summary>
            Disposes this <c>ScrollBarAnnotations</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.GetAnnotationTypeAppearance(Alternet.Editor.Wpf.ScrollBarAnnotationType)">
            <summary>
            Gets appearance for a specified type.
            </summary>
            <param name="type"><c>ScrollBarAnnotationType</c> to check.</param>
            <returns><c>ScrollBarAnnotationTypeAppearance</c> that describes how given type should appear.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.Initialize(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes an instance of the <c>ScrollBarAnnotations</c> class with a specified owner.
            </summary>
            <param name="editor"><c>TextEditor</c> to which this new instance belongs.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.Invalidate">
            <summary>
            Updates the layout and redraws all scrollbar annotations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.SetAnnotationTypeAppearance(Alternet.Editor.Wpf.ScrollBarAnnotationType,Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance)">
            <summary>
            Sets appearance for a specified type.
            </summary>
            <param name="type"><c>ScrollBarAnnotationType</c> to update.</param>
            <param name="appearance">A new appearance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotations.SetLineStyleAnnotationAppearance(System.Int32,Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance)">
            <summary>
            Sets appearance for specified line style.
            </summary>
            <param name="lineStyleIndex">Index of line style to update.</param>
            <param name="appearance">New appearance.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.Scrolling">
            <summary>
            Represents properties and methods that describe scrolling behavior of Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Scrolling</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.Finalize">
            <summary>
            Destroys the instance of the <c>Scrolling</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.Annotations">
            <summary>
            Gets the scroll bars annotations control interface.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.BeginUpdate">
            <summary>
            Prevents <c>Scrolling</c> updating until the <c>EndUpdate</c> method is called.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.EndUpdate">
            <summary>
            Re-enables <c>Scrolling</c> updating turned off by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.Update">
            <summary>
            Updates the <c>Scrolling</c> size and position.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Scrolling.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Scrolling.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizontal direction. This can be caused by dragging horizontal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Scrolling.ScrollButtonClick">
            <summary>
            Occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.WindowOriginX">
            <summary>
            Gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.WindowOriginY">
            <summary>
            Gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.HScrollBar">
            <summary>
            Gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.VScrollBar">
            <summary>
            Gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.HasHScrollBar">
            <summary>
            Indicates whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.FixedScrollSize">
            <summary>
            Indicates whether horz scrollbar has fixed size.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.HasVScrollBar">
            <summary>
            Indicates whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.HorzButtons">
            <summary>
            Represents a collection of additional buttons displayed at the horizontal scroll bar area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.VertButtons">
            <summary>
            Represents a collection of additional buttons displayed at the vertical scroll bar area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.Options">
            <summary>
            Gets or sets a <c>ScrollingOptions</c> that determine scrolling behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.VertScrollbarVisible">
            <summary>
            Indicates whether vertical scrollbar is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.HorzScrollbarVisible">
            <summary>
            Indicates whether horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.ScrollByPixels">
            <summary>
            Indicates whether scrollbars should use pixels rather than characters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Scrolling.Owner">
            <summary>
            Represents owner of this <c>IScrolling</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.Assign(Alternet.Editor.Wpf.IScrolling)">
            <summary>
            Copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.UpdateScroll">
            <summary>
            Updates scrolling control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.UpdateScroll(System.Boolean)">
            <summary>
            Updates scrolling control.
            </summary>
            <param name="updateSize">True if scrolling control should be resized; otherwise false.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.SystemScroll(System.Int32,System.Boolean)">
            <summary>
            Performs a system scrolls by calling Windows API.
            </summary>
            <param name="code">Specifies scrolling request.</param>
            <param name="vert">True if vertical scroll bar should be scrolled; otherwise false.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.UpdateFlat">
            <summary>
            Initializes flat scroll bars for editor control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.MouseScroll(System.Int32)">
            <summary>
            Scrolls editor control vertically.
            </summary>
            <param name="delta">Specifies mouse wheel delta.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.OnScrollButtonClick(System.Object,System.EventArgs)">
            <summary>
            Raises <c>ScrollButtonClick</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Scrolling.Dispose">
            <summary>
            Release resources of the <c>Scrolling</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollingButton">
            <summary>
            Represents button displayed at the scroll bar area of Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollingButton.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollingButton</c> with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollingButton.Finalize">
            <summary>
            Destroys the instance of the <c>ScrollingButton</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Name">
            <summary>
            Gets or sets a string value that specifies the name of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Description">
            <summary>
            Gets or sets a string value that specifies short description of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Images">
            <summary>
            Gets or sets the ImageList for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Visible">
            <summary>
            Gets or sets a value indicating whether this <c>ScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.BorderStyle">
            <summary>
            Gets or sets the border style for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Checked">
            <summary>
            Gets or sets a boolean value indicating whether button appears pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.AllowCheck">
            <summary>
            Gets or sets a value indicating whether button should automatically appear pressed in and not pressed in when clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.GroupIndex">
            <summary>
            Gets or sets a value allows buttons to work together as a group.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Scrolling">
            <summary>
            Gets or sets <c>IScrolling</c> contains this button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollingButton.Button">
            <summary>
            Represents windowed control that appears as a button.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ScrollingButton.CheckedChanged">
            <summary>
            Occurs when the value of the <c>Checked</c> property changes.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollingButton.Assign(Alternet.Editor.Wpf.IScrollingButton)">
            <summary>
            Copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollingButton.Dispose">
            <summary>
            Release resources of the <c>ScrollingButton</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SearchManager">
            <summary>
            Represents properties and methods used to search and replace within a collection of control's text content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.SearchManager.InitSearch">
            <summary>
            Occurs when search process is being initialized.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.SearchManager.GetSearch">
            <summary>
            Occurs when SearchManager try to get search engine appropriate to specified parameters.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.SearchManager.TextFound">
            <summary>
            Occurs when search text found.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.SharedSearch">
            <summary>
            Returns SearchManager object shared to search and replace for all documents.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.FirstSearch">
            <summary>
            Gets or sets a value indicating whether SearchManager launches text search at first.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.InCycledSearch">
            <summary>
            Indicates whether SearchManager is in cycled search state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.Search">
            <summary>
            Represents a search engine.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.InIncrementalSearch">
            <summary>
            Indicates whether SearchManager is in incremental search state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.IncrementalSearchString">
            <summary>
            Return text to search if SearchManager is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.SearchPos">
            <summary>
            Gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.SearchOptions">
            <summary>
            Gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.SearchLen">
            <summary>
            Represents length of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.SearchDialog">
            <summary>
            Gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.GotoLineDialog">
            <summary>
            Gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchManager.Shared">
            <summary>
            Specifies if search should be shared across all documents.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.InitSearchList(Alternet.Editor.Wpf.ISearch@,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Raises <c>InitSearch</c> event.
            </summary>
            <param name="search">Specifies active search control.</param>
            <param name="options">Specifies search options.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.UpdateSearch(Alternet.Editor.Wpf.ISearch,System.Boolean)">
            <summary>
            Updates specified search.
            </summary>
            <param name="search">ISearch to update.</param>
            <param name="update">Indicates whether search manager should update it's content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Done(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Stops search process.
            </summary>
            <param name="search">ISearch to stop.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Init(Alternet.Editor.Wpf.ISearch@,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Initializes a new search process.
            </summary>
            <param name="search">Specifies start ISearch object.</param>
            <param name="options">Specifies search options.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FindText(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,Alternet.Editor.Wpf.ISearch@)">
            <summary>
            Searches text by specified parameters.
            </summary>
            <param name="fileName">Name of the file where should find text.</param>
            <param name="text">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="search">Receives an ISearch object corresponding to file where search was performed.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Find(Alternet.Editor.Wpf.ISearch,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for all occurrences of given text by specified parameters.
            </summary>
            <param name="search">ISearch where search starts.</param>
            <param name="text">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for all occurrences of given text by specified parameters.
            </summary>
            <param name="s">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FindPrevious">
            <summary>
            Searches for the previous occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FindNext">
            <summary>
            Searches for the next occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.CanFindPrevious">
            <summary>
            Indicates whether search engine can find previous occurrence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.CanFindNext">
            <summary>
            Indicates whether search engine can find next occurrence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.CanFindNextSelected">
            <summary>
            Indicates whether search engine can find next occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.CanFindPreviousSelected">
            <summary>
            Indicates whether search engine can find previous occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FindNextSelected">
            <summary>
            Searches for the next occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FindPreviousSelected">
            <summary>
            Searches for the previous occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.ReplaceAll(Alternet.Editor.Wpf.ISearch,System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean@)">
            <summary>
            Replaces all occurrences of given text found by specified parameters.
            </summary>
            <param name="search">ISearch where search starts.</param>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <param name="abort">Receives a boolean value indicating whether replace action aborted.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.MarkAll(Alternet.Editor.Wpf.ISearch,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Marks all occurrences of specified string found by specified parameters.
            </summary>
            <param name="search">ISearch where search starts.</param>
            <param name="text">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.OnTextFound(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,System.Drawing.Point,System.Int32,System.Boolean,Alternet.Editor.Wpf.ISearch@)">
            <summary>
            Occurs when search text found.
            </summary>
            <param name="fileName">Name of the file where text found.</param>
            <param name="text">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="match">Specifies match if regular expression search successful.</param>
            <param name="position">Specifies position of found text.</param>
            <param name="len">Specifies length of found text.</param>
            <param name="multiLine">Determines if search text is found on multiple lines.</param>
            <param name="search">ISearch where text found.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.OnTextFound(Alternet.Editor.Wpf.ISearch)">
            <summary>
            Occurs when search text found.
            </summary>
            <param name="search">ISearch where text found.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.ShowNotFound(Alternet.Editor.Wpf.ISearch,System.String)">
            <summary>
            Displays "searched text not found" message box.
            </summary>
            <param name="search">ISearch where text wasn't found.</param>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Searches for all occurrences of given text by specified parameters.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Search options.</param>
            <param name="expression">Regular expression to find text.</param>
            <param name="ranges">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Replace(System.String,System.String)">
            <summary>
            Searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successful.</param>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.ReplaceCurrent(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            Replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successful.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.StartIncrementalSearch">
            <summary>
            Enters search engine to the incremental search state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.StartIncrementalSearch(System.Boolean)">
            <summary>
            Enters search engine to the incremental search state.
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.FinishIncrementalSearch">
            <summary>
            Leaves control from the incremental search state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            Finds given text incrementally.
            </summary>
            <param name="key">Additional value to search text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.GetTextToSearchAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.CanSearchSelection(System.String@)">
            <summary>
            Returns whether search can be performed inside selection.
            </summary>
            <param name="selectedText">Receives selected text value.</param>
            <returns>True if selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.DoFind(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean)">
            <summary>
            Searches for given text within the search engine content with specified options using specified regular expression.
            </summary>
            <param name="str">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="firstSearch">Specifies if search is performed the first time.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchManager.SearchCycled(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Performs cycled search.
            </summary>
            <param name="str">Text being found.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.SearchSettings">
            <summary>
            This class is designed to hold settings for search and replace dialogs.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>SearchSettings</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>SearchSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain information about <c>SearchSettings</c>. In this class method returns type of <c>XmlSearchSettingsInfo</c> class.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchSettings.Assign(Alternet.Editor.Wpf.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.SearchOptions">
            <summary>
            Represents options that determine behavior of search or replace dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.OptionsVisible">
            <summary>
            Indicates whether find/replace dialog should display search settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.SearchList">
            <summary>
            Represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SearchSettings.ReplaceList">
            <summary>
            Represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SearchSettings.Assign(Alternet.Editor.Wpf.ISearchSettings)">
            <summary>
            Copies the content from another <c>ISearchSettings</c> object.
            </summary>
            <param name="source">Specifies <c>ISearchSettings</c> to assign.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.Selection">
            <summary>
            Represents class used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.#ctor">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Finalize">
            <summary>
            Destroys the instance of the <c>Selection</c> class.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Selection.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Selection.BeforePaste">
            <summary>
            Occurs when text is about to be pasted.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.Selection.AfterPaste">
            <summary>
            Occurs when text is already pasted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.IsEmpty">
            <summary>
            Indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectionStart">
            <summary>
            Gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectionLength">
            <summary>
            Gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectionRect">
            <summary>
            Gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectionType">
            <summary>
            Gets or sets type of current selection.
            <seealso cref="T:Alternet.Editor.Wpf.SelectionType"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectedText">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.Options">
            <summary>
            Gets or sets options determining behavior or the <c>Selection</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.AllowedSelectionMode">
            <summary>
            Gets or sets type of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectionState">
            <summary>
            Gets or sets a value indicates state of the selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Selection.SelectedColorData">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Assign(Alternet.Editor.Wpf.ISelection)">
            <summary>
            Copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SetSelection(Alternet.Editor.Wpf.SelectionType,System.Drawing.Rectangle)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionRect">New selected rectangle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.OnSelectionChanged">
            <summary>
            Raises <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.OnBeforePaste(System.String@,Alternet.Editor.Wpf.SelectionType@)">
            <summary>
            Raises <c>BeforePaste</c> event.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.OnAfterPaste">
            <summary>
            Raises <c>AfterPaste</c> event.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.OnSelect(System.Object,System.EventArgs)">
            <summary>
            Selects part of text source settings. Reserved for internal use.
            </summary>
            <param name="source">The source of the selection.</param>
            <param name="e">An <c>EventArgs</c> that contains the data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UpdateSelStart(System.Drawing.Point)">
            <summary>
            Updates selection start to the specified position.
            </summary>
            <param name="position">New selection start.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UpdateSelRange(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Updates selection start and end to the specified position.
            </summary>
            <param name="start">New selection start.</param>
            <param name="end">New selection end.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UpdateSelStart(System.Boolean)">
            <summary>
            Updates selection start to the specified position.
            </summary>
            <param name="checkIfEmpty">Checks whether selection is empty.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.StartSelection">
            <summary>
            Forces selection start.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.EndSelection">
            <summary>
            Stops selection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ScrollIfNeeded(System.Windows.Point)">
            <summary>
            Scrolls to specified position if needed.
            </summary>
            <param name="pt">Position to scroll.</param>
            <returns>True if scroll needed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.IsValidSelectionPoint(System.Drawing.Point)">
            <summary>
            Indicates whether specified position located at the top-left or right-bottom corners of selection area.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if specified position valid; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UpdateSelection">
            <summary>
            Invalidates selected region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on changing position in the editor.
            </summary>
            <param name="x">X-part of position to change.</param>
            <param name="y">Y-part of position to change.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectionToScreen">
            <summary>
            Represents selection region in a screen coordinates.
            </summary>
            <returns>Screen coordinate rectangle corresponding to selection region.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Invalidate">
            <summary>
            Invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Invalidate(Alternet.Editor.Wpf.SelectionType,System.Drawing.Rectangle)">
            <summary>
            Invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            <param name="selectionType">Selection type.</param>
            <param name="selectionRect">Selection rectangle.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Modified">
            <summary>
            Responds on any modifications in the editor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SetSelection(Alternet.Editor.Wpf.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectangle.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectCharLeft">
            <summary>
            Increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectCharLeft(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectCharRight">
            <summary>
            Increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectCharRight(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectWordLeft">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectWordLeft(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectWordRight">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectWordRight(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.MoveSelectionUp">
            <summary>
            Moves selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.MoveSelectionDown">
            <summary>
            Moves selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineUp">
            <summary>
            Increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineUp(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineDown">
            <summary>
            Increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineDown(Alternet.Editor.Wpf.SelectionType)">
            <summary>
             Increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectPageUp">
            <summary>
            Increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectPageUp(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectPageDown">
            <summary>
            Increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectPageDown(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectScreenTop">
            <summary>
            Increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectScreenTop(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectScreenBottom">
            <summary>
            Increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectScreenBottom(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineBegin">
            <summary>
            Selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineBegin(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineEnd">
            <summary>
            Selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineEnd(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectFileBegin">
            <summary>
            Increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectFileBegin(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectFileEnd">
            <summary>
            Increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectFileEnd(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLineOnTrippleClick">
            <summary>
            Selects entire line at the current position in the control as a result of triple click.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectLine">
            <summary>
            Selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectWord">
            <summary>
            Selects a word at the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectAll">
            <summary>
            Selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectToOpenBrace">
            <summary>
            Increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectToCloseBrace">
            <summary>
            Increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectToBrace">
            <summary>
            Increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CommentSelection">
            <summary>
            Marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UncommentSelection">
            <summary>
            Removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartFormat">
            <summary>
            Formats selected text using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartFormat(System.Int32)">
            <summary>
            Formats given line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartFormat(System.Char)">
            <summary>
            Formats given line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies Character being typed</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartIndent(System.Char)">
            <summary>
            Formats given current line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies character being typed</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartFormatBlock(System.Boolean,System.Char)">
            <summary>
            Formats current syntax block using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
            <param name="extended">Specifies that search should be extended outside current scope</param>
            <param name="ch">Character being typed</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SmartFormatDocument">
            <summary>
            Formats entire document using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ApplyTextChanges(System.Collections.Generic.IList{Alternet.Syntax.ITextUndo},System.Boolean)">
            <summary>
            Applies text changes to the text.
            </summary>
            <param name="textChanges">List of text changes</param>
            <param name="format">Specifies if inserted block needs to be formatted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Tabify">
            <summary>
            Converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UnTabify">
            <summary>
            Converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Indent">
            <summary>
            Indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UnIndent">
            <summary>
            Unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.LowerCase">
            <summary>
            Converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.UpperCase">
            <summary>
            Converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Capitalize">
            <summary>
            Changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteWhiteSpace">
            <summary>
            Removes all space and tab characters from selected text. If nothing is selected the method removes space and tab characters from the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CollapseToDefinitions">
            <summary>
            Collapses and expands some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SwapAnchor">
            <summary>
            Change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CanCopy">
            <summary>
            Indicates whether selected text can be copied to the clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CanCut">
            <summary>
            Indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CanPaste">
            <summary>
            Indicates whether the control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Copy">
            <summary>
            Copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Cut">
            <summary>
            Cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CanDelete">
            <summary>
            Indicates whether selected text can be deleted.
            </summary>
            <returns>True if the selection can be deleted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Paste">
            <summary>
            Pastes the content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Delete">
            <summary>
            Deletes selected text from the control.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Delete(Alternet.Editor.Wpf.ExtendedSelectionScope)">
            <summary>
            When implemented by a class, deletes selected text from the control.
            </summary>
            <param name="scope">Specifies extended selection scope for null-width blocks</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Clear">
            <summary>
            Makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.BeginUpdate">
            <summary>
            Prevents the <c>Selection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="M:Alternet.Editor.Wpf.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.EndUpdate">
            <summary>
            Re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="M:Alternet.Editor.Wpf.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteLeft">
            <summary>
            Deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteRight">
            <summary>
            Deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteWordLeft">
            <summary>
            Deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteWordRight">
            <summary>
            Deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DeleteLine">
            <summary>
            Deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CutLine">
            <summary>
            Cuts current line to the clipboard if no text selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.NewLine">
            <summary>
            Inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.NewLineAbove">
            <summary>
            Inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.NewLineBelow">
            <summary>
            Inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ProcessEscape">
            <summary>
            Processes escape pressure: method deselects selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ProcessTab">
            <summary>
            Inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ProcessShiftTab">
            <summary>
            Moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ToggleOverWrite">
            <summary>
            Toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.InsertString(System.String)">
            <summary>
            Inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="s">Text to insert.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CharTransponse">
            <summary>
            Transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.WordTransponse">
            <summary>
            Transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.LineTransponse">
            <summary>
            Transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.CanDrag(System.Drawing.Point)">
            <summary>
            Indicates whether the control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ChangeBlock(Alternet.Editor.Wpf.StringEvent)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ChangeBlock(Alternet.Editor.Wpf.TextUndoEvent)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ChangeBlock(Alternet.Editor.Wpf.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selected region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ChangeBlock(Alternet.Editor.Wpf.TextUndoEvent,System.Boolean,System.Boolean)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selected region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            Converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            Converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Sets left and right index of the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.GetSearchSelectionForLine(System.Int32,System.Int32@,System.Int32@,Alternet.Editor.Wpf.SelectionType@,System.Drawing.Rectangle@)">
            <summary>
            Sets left and right parameter to the first and last selected characters within specified line, when edit control is in search selection mode.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
            <param name="searchSelType"> Receives search selection type.</param>
            <param name="searchSelRect"> Receives search selection rectangle.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectedCount">
            <summary>
            Returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectedString(System.Int32)">
            <summary>
            Returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectCurrentWord">
            <summary>
            Tries to select word nearest to the current position in the control.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectNextWord">
            <summary>
            Select word next to the current word.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SetSelectedText(System.String,Alternet.Editor.Wpf.SelectionType)">
            <summary>
            Replaces <c>SelectedText</c> by specified text.
            </summary>
            <param name="text">New value of <c>SelectedText</c>.</param>
            <param name="selType">New type of selection.</param>
            <returns>True if operation is successful; otherwisefalse</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SetSelectedText(System.String,Alternet.Editor.Wpf.SelectionType,System.Boolean)">
            <summary>
            Replaces <c>SelectedText</c> by specified text.
            </summary>
            <param name="text">New value of <c>SelectedText</c>.</param>
            <param name="selType">New type of selection.</param>
            <param name="moveToEnd">Specifies whether cursor should move to the end of the selection.</param>
            <returns>True if operation is successful; otherwisefalse</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.SelectedData(System.Int32)">
            <summary>
            Returns selected part of color information at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.ResetAllowedSelectionMode">
            <summary>
            Resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Selection.Dispose">
            <summary>
            Release resources of the <c>Selection</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo">
            <summary>
            Contains information about <c>IKeyListData</c> object's settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeyDataInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.#ctor(Alternet.Editor.Wpf.IMacroKeyData)">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeyDataInfo</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies <c>IMacroKeyListData</c> object to store settings.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.EventName">
            <summary>
            Represents a name of the action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.FullName">
            <summary>
            Represents a name of the action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.Keys">
            <summary>
            Represents a key to which some action is attached.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.State">
            <summary>
            Represents a state of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.LeaveState">
            <summary>
            Represents a state of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.ParamType">
            <summary>
            When implemented by a class, gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.ParamStr">
            <summary>
            When implemented by a class, represents parameter text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeyDataInfo.Load">
            <summary>
            Reads property values from external object. Reserved for internal use.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo">
            <summary>
            Contains information about <c>IKeyListData</c> object's settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeysDataInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.#ctor(Alternet.Editor.Wpf.IMacroKeyList)">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeysDataInfo</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies <c>IRecordPlayBack</c> object to store settings.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.Macros">
            <summary>
            Stores Macros property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.ShouldSerializeMarcos">
            <summary>
            Indicates whether the <c>Marcos</c> property should be persisted.
            </summary>
            <returns>True if <c>Marcos</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Serialization.XmlMacroKeysDataInfo.Load">
            <summary>
            Reads property values from external object. Reserved for internal use.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>SyntaxPaint</c> class with specified parameters.
            </summary>
            <param name="editor">Specifies control begin painted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.GetFontStyle(System.Drawing.FontStyle,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.GetFontColor(System.Drawing.Color,Alternet.Syntax.TextStyle)">
            <summary>
            Retrieves font color corresponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.GetLexStyle(Alternet.Syntax.StringItemInfo,Alternet.Syntax.TextStyle@)">
            <summary>
            Retrieves lex state corresponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.EqualStyles(Alternet.Syntax.StringItemInfo,Alternet.Syntax.StringItemInfo,System.Boolean)">
            <summary>
            Indicates whether given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whether colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.SyntaxPaint.Lexer">
            <summary>
            Gets or sets an object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SyntaxPaint.IsFontMonospace">
            <summary>
            Get a boolean value indicating whether current font is monospaced.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SyntaxPaint.FontHeight">
            <summary>
            Represents height of the current font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.SyntaxPaint.LineSpace">
            <summary>
            Represents additional height added to the height of the font.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.GetBackColor(System.Boolean)">
            <summary>
            Retrieves background color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return background color for readonly state.</param>
            <returns>Appropriate background color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.GetForeColor(System.Boolean)">
            <summary>
            Retrieves foreground color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return foreground color for readonly state.</param>
            <returns>Appropriate foreground color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.OnFontFamilyChanged">
            <summary>
            Occurs when font changed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given at by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.CharWidth(System.Char,System.Int32)">
            <summary>
            Measures summary character width accordingly to specified conditions.
            </summary>
            <param name="ch">Char to measure.</param>
            <param name="count">Number of characters to measure.</param>
            <returns>Summary characters width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.StrWidth(System.String)">
            <summary>
            Measures summary character width accordingly to specified conditions.
            </summary>
            <param name="str">String to measure.</param>
            <returns>Summary str width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.MeasureLine(System.String,Alternet.Syntax.StringItemInfo[],System.Int32,System.Int32)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.CharWidth(System.Char,System.Double,System.Int32@,System.Boolean)">
            <summary>
            Measures summary character width accordingly to specified conditions.
            </summary>
            <param name="ch">Char to measure.</param>
            <param name="width">Width which should fit characters.</param>
            <param name="count">Receives number of characters fitted into specified width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Summary characters width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.StringWidth(System.String)">
            <summary>
            Measures specified string.
            </summary>
            <param name="text">Text to measure.</param>
            <returns>Summary string width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Measures specified string.
            </summary>
            <param name="text">Text to measure.</param>
            <param name="pos">Start character to measure.</param>
            <param name="len">Number of character inside string to measure.</param>
            <returns>Summary string width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.StringWidth(System.String,System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean)">
            <summary>
            Measures specified string.
            </summary>
            <param name="text">Text to measure.</param>
            <param name="pos">Start character to measure.</param>
            <param name="len">Number of character inside string to measure.</param>
            <param name="width">Width which should fit string.</param>
            <param name="count">Receives number of characters fitted into specified width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Summary string width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.MeasureLine(System.String,Alternet.Syntax.StringItemInfo[],System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="measureChars">Specifies whether the method should measure how much characters fits to the given width.</param>
            <param name="addSpace">Specifies whether spaces are added to the end of string if needed.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.SyntaxPaint.MeasureLine(System.String,Alternet.Syntax.StringItemInfo[],System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextEditor">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CustomGutterItemsVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CustomGutterItemsVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.AllowVerticalEditorSplitProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.AllowVerticalEditorSplit"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.AllowHorizontalEditorSplitProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.AllowHorizontalEditorSplit"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineSpacingProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.HorizontalScrollBarVisibilityProperty">
            <summary>
            Dependency property for <see cref="P:Alternet.Editor.Wpf.TextEditor.HorizontalScrollBarVisibility"/>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.VerticalScrollBarVisibilityProperty">
            <summary>
            Dependency property for <see cref="P:Alternet.Editor.Wpf.TextEditor.VerticalScrollBarVisibility"/>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.WordWrapProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.WordWrap"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.InactiveSelectionBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.InactiveSelectionBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CodeSnippetHighlightBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CodeSnippetHighlightBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ReferencesBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ReferencesBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SearchResultsBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SearchResultsBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SelectedWordsBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SelectedWordsBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutliningFillExpandedBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutliningFillExpandedBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.HighlightOutlineAreaBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.HighlightOutlineAreaBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CodeCompletionBoxBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionBoxBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CodeCompletionHintBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionHintBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutliningFillCollapsedBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutliningFillCollapsedBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineModificatorChangedBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineModificatorChangedBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineModificatorSavedBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineModificatorSavedBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CaretBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OverwriteCaretBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OverwriteCaretBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ErrorUnderlinePenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ErrorUnderlinePen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.WarningPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.WarningPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.InfoPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.InfoPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SpellingPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SpellingPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersBackBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersBackBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SelectionBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SelectionBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SelectionForeColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SelectionForeColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GuideLinesForeColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GuideLinesForeColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ReadonlyBackColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ReadonlyBackColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ContextMenuBackColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ContextMenuBackColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ContextMenuBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ContextMenuBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginBackgroundBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginBackgroundBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.SectionBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.SectionBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutlineSectionTextColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutlineSectionTextColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginTextColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginTextBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutlineSectionBoundsPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutlineSectionBoundsPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginBoundsPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginBoundsPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapBackColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapBackColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapDragBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapDragBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameBorderColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ShowBookmarkHintsProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ShowBookmarkHints"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.DrawLineBookmarksProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.DrawLineBookmarks"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.BookmarkImageSourceProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.BookmarkImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CodeActionsVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CodeActionsVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.CodeActionsOnGutterProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.CodeActionsOnGutter"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineBookmarksBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineBookmarksBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginTextProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginText"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GradientGutterProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GradientGutter"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineModificatorsVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineModificatorsVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MinimapScaleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MinimapScale"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LinesOnGutterProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LinesOnGutter"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.PaintBookMarksProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.PaintBookMarks"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.PaintLineModificatorsProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.PaintLineModificators"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineModificatorWidthProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineModificatorWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineModificatorPaddingProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineModificatorPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.UserMarginPaddingProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.UserMarginPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ContentDividerPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ContentDividerPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.MarginPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.MarginPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ColumnPenProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ColumnPen"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.ContentDividersVisibleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.ContentDividersVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterRightMarginProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterRightMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersRightMarginProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersRightMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersLeftMarginProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersLeftMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.LineNumbersHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.LineNumbersHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterGradientStartColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterGradientStartColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GutterGradientEndColorProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GutterGradientEndColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutliningLineBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutliningLineBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.OutliningGlyphBrushProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.OutliningGlyphBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.DrawStructureGuideLinesProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.DrawStructureGuideLines"/> dependency property.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditor.GuideLinesDashedStyleProperty">
            <summary>
            Identifies the <see cref="P:Alternet.Editor.Wpf.TextEditor.GuideLinesDashedStyle"/> dependency property.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.#ctor">
            <summary>
            Initializes a new instance of the <c>TextEditor</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.#ctor(Alternet.Editor.Wpf.TextEditorContentArea)">
            <summary>
            Creates a new TextEditor instance.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.BeforeNavigateToDeclaration">
            <summary>
            Occurs when edit content is about to be navigated.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.AfterNavigateToDeclaration">
            <summary>
            Occurs when edit content is already navigated.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.SourceChanged">
            <summary>
            Occurs when source changes.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.GetUserMarginText">
            <summary>
            Occurs when the TextEditor checks usermargin text.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.PromptOnReplace">
            <summary>
            Occurs when replace dialog prompts on replace action.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.GutterClick">
            <summary>
            Occurs when the gutter part of Edit control is clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.GutterItemMouseDown">
            <summary>
            Occurs when the gutter visual item part of Edit control is clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.GutterDblClick">
            <summary>
            Occurs when the gutter part of Edit control is double-clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.ModifiedChanged">
            <summary>
            Occurs when modified state is changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.SourceStateChanged">
            <summary>
            Occurs when text Source's state is changed, for example when caret position moved, text edited, amount of lines changed, lexer changed, etc.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.TextChanged">
            <summary>
            Occurs when the TextEditor text changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.ModifyTextDisplay">
            <summary>
            Occurs when TextEditor measures part of its text content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.NeedCodeCompletion">
            <summary>
            Occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.CodeSnippetInserted">
            <summary>
            Occurs when code snippet is inserted.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.CheckHyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizontal direction. This can be caused by dragging horizontal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.IsCodeCompletionWindowFocused">
            <summary>
            Indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionMode">
            <summary>
            Gets or sets a value that indicates how editor control should display code completion window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchDialogAppearance">
            <summary>
            Gets or sets a value that indicates how editor control should display search\replace dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.IsSearchFocused">
            <summary>
            Gets a value indicating whether <see cref="P:Alternet.Editor.Wpf.TextEditor.SearchDialog"/> is active and has an input focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.IsSearchActive">
            <summary>
            Gets a boolean value indicating whether text search is being performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GotoLineDialog">
            <summary>
            Gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchGlobal">
            <summary>
            Gets or sets a value indicating whether search should be global.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AllowVerticalEditorSplit">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor can be splitted vertically.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CustomGutterItemsVisible">
            <summary>
            Gets or sets a value indicating whether custom gutter items are in visible state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AllowHorizontalEditorSplit">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor can be splitted horizontally.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.VerticalSplitterEditor">
            <summary>
            Represents an vertical split view control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HorizontalSplitterEditor">
            <summary>
            Represents an vertical split view control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchPos">
            <summary>
            Gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchOptions">
            <summary>
            Gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchLen">
            <summary>
            Represents length of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.FirstSearch">
            <summary>
            Gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchDialog">
            <summary>
            Gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineSpacing">
            <summary>
            Gets or sets distance between neighbor lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.KeyList">
            <summary>
            Represents object that implements <c>IKeyList</c> containing list of keys with attached actions, which executed by key pressure.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Selection">
            <summary>
            Represents an object that implements <c>ISelection</c> interface. This object represents various properties and methods to manipulate text selection, such as copy, paste and drag selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Minimap">
            <summary>
            Represents object that implements <c>IMinimap</c> interface containing methods and properties necessary to operate with minimap at the right size of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HighlightReferences">
            <summary>
            Specifies that edit control should highlight find references.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HighlightMatchingBlocks">
            <summary>
            Specifies that edit control should highlight begin/end blocks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HighlightSymbolReferences">
            <summary>
            Specifies that edit control should highlight symbol references when hovering mouse over them.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ContentArea">
            <summary>
            Gets a scrollable content area for <c>TextEditor</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineStyles">
            <summary>
            Represents an object that implements <c>IEditLineStyles</c> interface holding collection of <c>IEditLineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Braces">
            <summary>
            Represents an object that implements <c>IEditBraceMatching</c> interface allowing to change appearance of matching braces within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineSpace">
            <summary>
            Gets or sets line space between individual lines in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeActionImageIndex">
            <summary>
            Gets or sets a value that specifies index of item in the image collection used to paint light bulb for code action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersStart">
            <summary>
            Gets or sets index of the first line being painted on the gutter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineSeparator">
            <summary>
            Represents an object that implements <c>ILineSeparator</c> interface containing methods and properties necessary to separate lines and highlight current line within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Outlining">
            <summary>
            Represents an object that implements <c>IOutlining</c> interface that specifies appearance and behavior of outline sections within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HighlightSearchResults">
            <summary>
            Indicates whether search results are highlighted while the search dialog is open.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.InIncrementalSearch">
            <summary>
            Indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.InCycledSearch">
            <summary>
            Indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.IncrementalSearchString">
            <summary>
            Return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeActionPosition">
            <summary>
            Gets or sets code action position within the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.WideSpaceWidth">
            <summary>
            Represents average character width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineHeight">
            <summary>
            Represents height of the individual line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapLineHeight">
            <summary>
            Represents height of the individual minimap line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Source">
            <summary>
            Gets or sets an object that implements <c>ITextSource</c> interface containing an actual string data displayed by the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Lines">
            <summary>
            Represents object that implements <c>ITextStrings</c> interface containing collection of strings determining control's content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanCut">
            <summary>
            Gets a value indicating whether selected text can be cut to the clipboard.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanDelete">
            <summary>
            Gets a value indicating whether selected text can be deleted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanCopy">
            <summary>
            Gets a value indicating whether selected text can be copied to the clipboard.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanPaste">
            <summary>
            Gets a value indicating whether the control can paste some text from the clipboard.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanUndo">
            <summary>
            Gets a value indicating whether the undo operation can be performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CanRedo">
            <summary>
            Gets a value indicating whether the redo operation can be performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.DefaultMenu">
            <summary>
            Gets or sets a <c>ContextMenu</c> default to the editor control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UseDefaultMenu">
            <summary>
            Gets or sets a value indicating whether <c>DefaultMenu</c> should be displayed upon request.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OpenSharedEditorFunc">
            <summary>
            When implemented by a class, gets or sets a function that open <c>TextEditor</c> instance in multi-document environment.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Strings">
            <summary>
            Represents <c>Lines</c> property in the form of array of strings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.DisplayLines">
            <summary>
            Represents the object that implements <c>IDisplayStrings</c> interface containing collection of lines to be drawn in the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SyntaxPaint">
            <summary>
            Represents <c>ISyntaxPaint</c> interface used to draw control's content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Scrolling">
            <summary>
            Represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behavior of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Printing">
            <summary>
            Represents an object that implements <c>IPrinting</c> interface allowing to perform various printing actions such as print, preview document, and setup print options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.EditMargin">
            <summary>
            Represents an object that implements <c>IMargin</c> interface and specifies appearance of vertical line drawn over the text and used to mark some limit, for example, of the maximum string length allowed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HyperText">
            <summary>
            Represents object that implements <c>IEditHyperText</c> interface allowing to customize appearance and behavior of hypertext sections within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Spelling">
            <summary>
            Represents object that implements <c>IEditSpelling</c> interface containing properties and methods to check control's content spelling and highlight misspelled words.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Whitespace">
            <summary>
            Represents an object that implements <c>IWhiteSpace</c> interface. This object specifies appearance of white space characters, as well as End-of-line and End-of-file marks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Text">
            <summary>
            Gets or sets the string collection as a single string with the individual lines delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.VisualThemeType">
            <summary>
            Gets or sets visual theme type for the editor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.VisualTheme">
            <summary>
            Gets or sets visual theme for the editor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ApplyTheme(Alternet.Editor.Wpf.IVisualTheme)">
            <summary>
            Applies visual theme to the TextEditor control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindDeclaration">
            <summary>
            Finds the declaration of the symbol at the current position
            </summary>
            <returns>Declaration symbol location</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindDeclaration(System.Drawing.Point)">
            <summary>
            Finds the declaration of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <returns>Declaration symbol location</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindDeclarationAsync(System.Drawing.Point)">
            <summary>
            Finds the declaration of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <returns>Declaration symbol location</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindDeclarationAsync">
            <summary>
            Finds the declaration of the symbol at the current position.
            </summary>
            <returns>Declaration symbol location</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindReferences(System.Drawing.Point,Alternet.Common.IRangeList)">
            <summary>
            Finds all references of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <param name="references">List of the found references</param>
            <returns>Number of found references</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindReferencesAsync(System.Drawing.Point,Alternet.Common.IRangeList)">
            <summary>
            Finds all references of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <param name="references">List of the found references</param>
            <returns>Number of found references</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.JumpToDeclaration">
            <summary>
            Finds the declaration of the symbol under the current position and navigates to it.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.JumpToDeclarationAsync">
            <summary>
            Finds the declaration of the symbol under the current position and navigates to it.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindImplementations(System.Drawing.Point,Alternet.Common.IRangeList)">
            <summary>
            Finds all implementations of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <param name="references">List of the found implementations</param>
            <returns>Number of found implementations</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindImplementationsAsync(System.Drawing.Point,Alternet.Common.IRangeList)">
            <summary>
            Finds all implementations of the symbol under a given position
            </summary>
            <param name="position">Position within the text</param>
            <param name="references">List of the found references</param>
            <returns>Number of found implementations</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LinesInHeight">
            <summary>
            Determines how many lines can fit into control's client area.
            </summary>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Position">
            <summary>
            Gets or sets the current position within the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ClientRect">
            <summary>
            Represents a client area of the TextEditor control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ClientWidth">
            <summary>
            Represents a client area width of the TextEditor control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ClientHeight">
            <summary>
            Represents a client area height of the TextEditor control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SeparatorOptions">
            <summary>
            Gets or sets a set of flags customizing appearance and behavior of the <c>LineSeparator</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CharsInWidth">
            <summary>
            Returns number of characters painted with current font that will fit into control's client area.
            </summary>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.Lexer">
            <summary>
            Gets or sets an object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HorizontalScrollBarVisibility">
            <summary>
            Gets/Sets the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.VerticalScrollBarVisibility">
            <summary>
            Gets/Sets the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionBox">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionButton">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionChars">
            <summary>
            Represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ActiveOutlineRange">
            <summary>
            Gets currently highlighted outlined range.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.PrevPosition">
            <summary>
            Gets previous position within the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.WhitespaceVisible">
            <summary>
            Gets or sets a value indicating whether white space symbols are visible in the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.WordWrap">
            <summary>
            Gets or sets a value indicating whether TextEditor control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionHint">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapHint">
            <summary>
            Represents object that specifies a popup window that contains minimap information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterImages">
            <summary>
            Represents a ImageSource collection to display on TextEditor gutter area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.BookmarkImageSource">
            <summary>
            Gets or sets an ImageSource for bookmarks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersVisible">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor should display line numbers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeActionsVisible">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor should display code actions images.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeActionsOnGutter">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor should display code actions images on gutter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.DrawLineBookmarks">
            <summary>
            Gets or sets a value indicating whether Edit control should draw triangle at bookmark position inside line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ShowBookmarkHints">
            <summary>
            Gets or sets a value indicating whether Edit control should display text describing bookmark in form of tooltip window when mouse pointer is over the gutter bookmark.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineBookmarksBrush">
            <summary>
            Gets or sets a Brush of the line bookmarks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginVisible">
            <summary>
            Gets or sets a boolean value indicating whether TextEditor should draw user margin (allowing to draw additional information).
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginText">
            <summary>
            Gets or sets a text of the user margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterVisible">
            <summary>
            Gets or sets a boolean value indicating whether gutter area is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapVisible">
            <summary>
            Gets or sets a value indicating whether minimap area is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapWidth">
            <summary>
            Gets or sets the minimap area width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapScale">
            <summary>
            Gets or sets the scale of the minimap.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GradientGutter">
            <summary>
            Gets or sets a boolean value indicating whether gutter background should be gradient.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineModificatorsVisible">
            <summary>
            Gets or sets a boolean value indicating whether  line modificators (color stitch that indicates that the line content is modified, unmodified or saved) should be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterWidth">
            <summary>
            Gets or sets gutter area width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LinesOnGutter">
            <summary>
            Specifies that numbers of lines should be drawn at the gutter area rather than beyond the gutter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.PaintBookMarks">
            <summary>
            Specifies that bookmarks should be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.PaintLineModificators">
            <summary>
            Specifies that line modificators (color stitch that indicates that the line content is modified, unmodified or saved) should be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginWidth">
            <summary>
            Gets or sets user margin area width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineModificatorWidth">
            <summary>
            Gets or sets line modificator area width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineModificatorPadding">
            <summary>
            Gets or sets Thickness around line modificator.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginPadding">
            <summary>
            Gets or sets Thickness around user margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ContentDividerPen">
            <summary>
            Gets or sets Pen to draw content divider.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MarginPen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of EditMargin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ColumnPen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of EditMargin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ContentDividersVisible">
            <summary>
            Gets or sets a boolean value indicating whether content divider should be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterRightMargin">
            <summary>
            Gets or sets width of gutter area right margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersRightMargin">
            <summary>
            Gets or sets width of line numbers area right margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersLeftMargin">
            <summary>
            Gets or sets width of line numbers area left margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersHorizontalAlignment">
            <summary>
            Gets or sets horizontal TextAlignment of line numbers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterBrush">
            <summary>
            Gets or sets Brush used to paint gutter area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterGradientStartColor">
            <summary>
            Gets or sets start Color used to paint gradient gutter area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterGradientEndColor">
            <summary>
            Gets or sets end Color used to paint gradient gutter area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutliningLineBrush">
            <summary>
            Gets or sets Brush used to paint outlining area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutliningGlyphBrush">
            <summary>
            Gets or sets Brush used to paint outlining area glyph.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutliningFillCollapsedBrush">
            <summary>
            Gets or sets Brush used to fill folding button when outlining region is in collapsed state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutliningFillExpandedBrush">
            <summary>
            Gets or sets Brush used to fill folding button when outlining region is in expanded state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.HighlightOutlineAreaBrush">
            <summary>
            Gets or sets Brush used to fill highlighted outline area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionBoxBrush">
            <summary>
            Gets or sets Brush used to fill Code Completion Box background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeCompletionHintBrush">
            <summary>
            Gets or sets Brush used to fill Code Completion Hint background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineModificatorChangedBrush">
            <summary>
            Gets or sets Brush used to paint line modificator in changed state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineModificatorSavedBrush">
            <summary>
            Gets or sets Brush used to paint line modificator in saved state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CaretBrush">
            <summary>
            Gets or sets Brush used to paint caret.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OverwriteCaretBrush">
            <summary>
            Gets or sets Brush used to paint caret when TextEditor is in overwrite state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ErrorUnderlinePen">
            <summary>
            Gets or sets Pen used to draw error underline wave.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.WarningPen">
            <summary>
            Gets or sets Pen used to draw warning underline wave.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.InfoPen">
            <summary>
            Gets or sets Pen used to draw info underline wave.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SpellingPen">
            <summary>
            Gets or sets Pen used to draw info underline wave.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersBrush">
            <summary>
            Gets or sets Brush used to paint line numbers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.LineNumbersBackBrush">
            <summary>
            Gets or sets Brush used to paint line numbers.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SelectionBrush">
            <summary>
            Gets or sets Brush used to fill selected region.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SelectionForeColor">
            <summary>
            Gets or sets Color used to draw selection text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapBackColor">
            <summary>
            Gets or sets the color of the minimap background.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapBorderColor">
            <summary>
            Gets or sets the color of the minimap border.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapDragBorderColor">
            <summary>
            Gets or sets the color of the minimap drag border.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameColor">
            <summary>
            Gets or sets the color of the minimap's current frame, i.e., the rectangular area corresponding to the currently visible part of the code.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapCurrentFrameBorderColor">
            <summary>
            Gets or sets the color of the minimap's current frame border, i.e., the rectangular area corresponding to the currently visible part of the code.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GuideLinesForeColor">
            <summary>
            Specifies guide lines color.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ReadonlyBackColor">
            <summary>
            Gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ContextMenuBackColor">
            <summary>
            Gets or sets background color for the context menu.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ContextMenuBorderColor">
            <summary>
            Gets or sets border color for the context menu.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginBackgroundBrush">
            <summary>
            Gets or sets Brush used to fill user margin region.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SectionBorderColor">
            <summary>
            Gets or sets a color of the selection border.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutlineSectionTextColor">
            <summary>
            Gets or sets Color used to draw text inside outline section.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginTextBrush">
            <summary>
            Gets or sets Brush used to draw text inside user margin region.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.OutlineSectionBoundsPen">
            <summary>
            Gets or sets Pen used to draw outline section bounds.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.UserMarginBoundsPen">
            <summary>
            Gets or sets Pen used to draw user margin bounds.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CodeSnippetHighlightBrush">
            <summary>
            Gets or sets Brush used to fill code snippet area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.ReferencesBrush">
            <summary>
            Gets or sets Brush used to fill highlighted reference area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SearchResultsBrush">
            <summary>
            Gets or sets Brush used to fill highlighted search result area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SelectedWordsBrush">
            <summary>
            Gets or sets Brush used to fill highlighted selected word area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.InactiveSelectionBrush">
            <summary>
            Gets or sets Brush used to fill selected area when TextEditor lost focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.DrawAliasedGeometry">
            <summary>
            Returns a value indicating whether to draw pixel-aliased geometry where supported (outlining etc).
            The value returned depends on the current DPI. Currently geometry is aliased when the DPI is 100%.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AllowedSelectionMode">
            <summary>
            Gets or sets types of selection allowed for the TextEditor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.SelectionOptions">
            <summary>
            Gets or sets options determining appearance and behavior of the <c>ISelection</c> object in TextEditor control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MinimapOptions">
            <summary>
            Gets or sets a <c>MinimapOptions</c> that determine minimap appearance and behaviour.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.DrawStructureGuideLines">
            <summary>
            Indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GuideLinesDashedStyle">
            <summary>
            Specifies that structure guide lines to be drawn as dashed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.EffectiveVisualTheme">
            <summary>
            Gets current visual theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.InnerTextSource">
            <summary>
            Gets inner text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.CurrentTheme">
            <summary>
            Gets or sets a dictionary containing theme-related resources for the text editor, such as scrollbar background.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveLineDown">
            <summary>
            Moves the current position to the next line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessEnter">
            <summary>
            Performs specific actions when Enter key is pressed.
            </summary>
            <returns>True if key was processed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FinishIncrementalSearch">
            <summary>
            Leaves control from the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.TextEditor.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.IncrementalSearch(System.String)">
            <summary>
            Finds the given text incrementally.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessTab(System.Drawing.Point)">
            <summary>
            Performs specific actions when Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetWordAt(Alternet.Syntax.IStringItem,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Checks word accordingly to specified conditions.
            </summary>
            <param name="item">IStringItem where word should be checked.</param>
            <param name="pos">Position to check.</param>
            <param name="left">Receives start character number of the word.</param>
            <param name="right">Receives end character number of the word.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessShiftTab(System.Drawing.Point)">
            <summary>
            Performs specific actions when Shift + Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveLineBegin">
            <summary>
            Moves the current position to the first character of current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveFileEnd">
            <summary>
            Moves the current position to the last character of the last line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String)">
            <summary>
            Searches for given text within the control's contents.
            </summary>
            <param name="text">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Searches for given text within the control's contents with specified options.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.OnTextFound(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,System.Drawing.Point,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Occurs when search text is found.
            </summary>
            <param name="text">Text being found.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="match">Specifies match if regular expression search successful.</param>
            <param name="position">Specifies position of found text.</param>
            <param name="len">Specifies length of found text.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <param name="multiline">Determines if search text is found on multiple lines.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Searches for all occurrences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="ranges">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean)">
            <summary>
            Searches for all occurrences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="firstSearch">Specifies if search is performed the first time.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CycledSearch(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Performs cycled search.
            </summary>
            <param name="text">Text being found.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindNext">
            <summary>
            Searches for the next occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindPrevious">
            <summary>
            Searches for the previous occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindNextSelected">
            <summary>
            Searches for the next occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.FindPreviousSelected">
            <summary>
            Searches for the previous occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CanFindNext">
            <summary>
            Indicates whether search engine can find next occurrence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CanFindPrevious">
            <summary>
            Indicates whether search engine can find previous occurrence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CanFindNextSelected">
            <summary>
            Indicates whether search engine can find next occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CanFindPreviousSelected">
            <summary>
            Indicates whether search engine can find previous occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.IsSelectionSearch(Alternet.Editor.Wpf.SelectionType@,System.Drawing.Rectangle@)">
            <summary>
            Deterimes if SyntaxEdit performs search throught selected text.
            </summary>
            <param name="selectionType">SelectionType when the search started.</param>
            <param name="selectionRect">Selection bounds when the search started</param>
            <returns>True, if search through selection is performed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Replace(System.String,System.String)">
            <summary>
            Searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            Searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <param name="abort">Indicates whether replace action aborted.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HighlightAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Highlights all occurrences of specified string in the class text content.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HighlightSelectedWords(System.String)">
            <summary>
            Highlights all occurrences of selected whole word in the class text content.
            </summary>
            <param name="text">Specifies text to highlight.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.UnhighlightAll">
            <summary>
            Unhighlights search results previously highlighted by HighlightAll.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MarkAll(System.String,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MarkAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MarkAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.NeedReplaceCurrent">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successful.</param>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ReplaceCurrent(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            Replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successful.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StartIncrementalSearch">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.TextEditor.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StartIncrementalSearch(System.Boolean)">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.TextEditor.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            Finds given text incrementally.
            </summary>
            <param name="key">Additional value to search text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetTextToSearchAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CanSearchSelection(System.String@)">
            <summary>
            Returns whether search can be performed inside _selection.
            </summary>
            <returns>True if _selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowNotFound(System.String)">
            <summary>
            Displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.Boolean)">
            <summary>
            Searches for given text within the control's text content.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <param name="searchHiddenLines">Specifies if hidden lines should be processed.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveCharLeft">
            <summary>
            Moves the current position one character to the left.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveCharRight">
            <summary>
            Moves the current position one character to the right.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveLineUp">
            <summary>
            Moves the current position to the previous line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveWordRight">
            <summary>
            Moves the current position one word to the right.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MovePageUp">
            <summary>
            Moves current position to the previous page.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MovePageDown">
            <summary>
            Moves current position to the next page.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveScreenTop">
            <summary>
            Moves the current position to the top of the screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveScreenBottom">
            <summary>
            Moves the current position to the bottom of the screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveLineBeginCycled">
            <summary>
            Moves the current position to the first not whitespace character/first character of current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveFileBegin">
            <summary>
            Moves the current position to the first character of the first line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScrollLineUp">
            <summary>
            Scrolls text content one line up.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScrollLineDown">
            <summary>
            Scrolls text content one line down.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToOpenBrace">
            <summary>
            Moves the current position to the previous open brace in the text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToCloseBrace">
            <summary>
            Moves the current position to the next close brace in the text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToBrace">
            <summary>
            Moves the current position to the next open or close brace in the text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Assign(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Assigns most relevant properties from another <c>TextEditor</c> object.
            </summary>
            <param name="source">Specifies source object.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplaySearchDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplaySearchDialog(System.Windows.Window)">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplaySearchDialog(Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayReplaceDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayReplaceDialog(System.Windows.Window)">
            <summary>
            Initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayGotoLineDialog">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayGotoLineDialog(Alternet.Editor.Wpf.OwnerWindow)">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayGotoLineDialog(System.Windows.Window)">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetHitTest(System.Windows.Point,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetHitTestAtTextPoint(System.Drawing.Point,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of control at specified text coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetHitTestAtTextPoint(System.Int32,System.Int32,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Retrieves information about part of control at specified text coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of text position to check.</param>
            <param name="y">Specifies vertical coordinate of text position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayDragCaret">
            <summary>
            Displays dragging caret rather than regular caret.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HideDragCaret">
            <summary>
            Hides dragging caret.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveCaretOnDrag(System.Windows.DragEventArgs)">
            <summary>
            Moves caret to the position of drag cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HideCaret">
            <summary>
            Hides the caret's current shape.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScreenToText(System.Windows.Point)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="position">The screen coordinate Point to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScreenToText(System.Double,System.Double,System.Boolean@)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScreenToText(System.Double,System.Double)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessKeyPress(System.Char)">
            <summary>
            Processes key press.
            </summary>
            <param name="keyChar">Represents key character to process.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessKeyPress(System.String)">
            <summary>
            Processes key press.
            </summary>
            <param name="keySequence">Represents key character to process.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ProcessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Processes a mouse move message.
            </summary>
            <param name="e">A message arguments.</param>
            <returns>True if the message was processed by the control; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveWordLeft">
            <summary>
            Moves the current position one word to the left.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveLineEnd">
            <summary>
            Moves the current position to the last character of current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.OnStateChanged(System.Object,Alternet.Editor.Wpf.NotifyState)">
            <summary>
            Updates control's content according to the state of the source.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="state">Specifies changes of the control's content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCaret(System.Double,System.Double)">
            <summary>
            Moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.UpdateCaret">
            <summary>
            Ensures the caret is displayed in the current position.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CodeCompletion(Alternet.Syntax.CodeCompletionArgs)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for the code completion event.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CodeCompletionWindowFocused(Alternet.Editor.Wpf.ICodeCompletionWindow@)">
            <summary>
            Indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <param name="control">Returns control that has focus.</param>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ListMembers">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.QuickInfo">
            <summary>
            Displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ParameterInfo">
            <summary>
            Displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.IsValidText(System.Drawing.Point)">
            <summary>
            Indicates whether text at the specified position is valid (that is does not contain comments or string constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.TextStyleAt(System.Drawing.Point)">
            <summary>
            Gets text style information at specified position.
            </summary>
            <param name="position">Position to check.</param>
            <returns>Text style corresponding to specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates the part of controls surface and causes the control to be redrawn.
            </summary>
            <param name="first">First line to be invalidated.</param>
            <param name="last">Last line to be invalidated.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.InvalidateDisplay(System.Int32,System.Int32)">
            <summary>
            Invalidates the part of controls surface and causes the control to be redrawn.
            </summary>
            <param name="first">First display line to be invalidated.</param>
            <param name="last">Last display  line to be invalidated.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Invalidate">
            <summary>
            Invalidates the entire surface of the control and causes the control to be redrawn.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.UpdateView">
            <summary>
            Updates editor content, caret and pages area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.OutlineText">
            <summary>
            Forces automatic outlining by getting up-to-date information about outline section from the Parser.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in current line.
            </summary>
            <param name="x">Index of character in current line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MoveToLine(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisablePositionUpdate">
            <summary>
            Prevents notification of changing of caret position until
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.EnablePositionUpdate">
            <summary>
            Re-enables notification of changing of caret position
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.SetNavigateOptions(Alternet.Editor.Wpf.NavigateOptions)">
            <summary>
            Sets navigating options without validating position.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MakeVisible(System.Drawing.Point)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.MakeVisible(System.Drawing.Point,System.Boolean)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
            <param name="centerLine">Specifies whether a given line must be centered within control's client area.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.UpdateWordWrap">
            <summary>
            Re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetWrapMargin">
            <summary>
            Returns position of the wrapping margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetLinesInHeight(System.Double)">
            <summary>
            Determines how many lines can fit into given Height.
            </summary>
            <param name="height">Height to fit lines.</param>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScreenToDisplay(System.Double,System.Double)">
            <summary>
            Converts given screen coordinates to display coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ScreenToDisplayX(System.Double,System.Int32)">
            <summary>
            Converts given screen coordinates to display coordinate of a character.
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="line">Vertical display coordinate of a text line.</param>
            <returns>The integer representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <returns>The Point representing screen coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.DisplayToScreen(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <param name="average"></param>
            <returns>The Point representing screen coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetCharsInWidth(System.Double)">
            <summary>
            Returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit characters.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.TextToScreen(System.Drawing.Point)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.TextToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Horizontal text coordinate to convert.</param>
            <param name="y">Vertical text coordinate to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.TextToScreen(System.Drawing.Point,System.Boolean)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">Point coordinate to convert.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetNonTextAreaWidth">
            <summary>
            Returns mutual width of Non text area - Gutter, Line Numbers, Outlining and User Margin.
            </summary>
            <returns>Mutual width of Non text area.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetNonTextAreaWidth(System.Boolean)">
            <summary>
            Returns mutual width of Non text area - Gutter, Line Numbers, Outlining and User Margin.
            </summary>
            <param name="allArrea">Calculates all area.</param>
            <returns>Mutual width of Non text area.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.InvalidateSelection">
            <summary>
            Invalidates selection region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CodeSnippets">
            <summary>
            Displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.InsertCodeSnippet(Alternet.Syntax.CodeCompletion.ICodeSnippet,System.Drawing.Point)">
            <summary>
            Inserts Code Snippet at the given position in the text
            </summary>
            <param name="snippet">Code Snippet to insert</param>
            <param name="pos">Text Position</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CompleteWord">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box and locates single member, if possible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CompleteCodeFixes">
            <summary>
            Displays a code completion window with list of available code fixes.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CompleteCodeRefactors">
            <summary>
            Displays a code completion window with list of available code refactors.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.CompleteCodeActions">
            <summary>
            Displays a code completion window with list of available code fixes or code refactors.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionBox(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.CodeCompletionType)">
            <summary>
            Shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionBox(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.CodeCompletionType,System.Windows.Point)">
            <summary>
            Shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Position to show code completion popup window.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionButton(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionButton(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,System.Windows.Point,System.Boolean)">
            <summary>
            Shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Position to show code completion popup window.</param>
            <param name="dropDown">Specifies if dropdown menu should be displayed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionHint(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.Lexer.ILexer)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowCodeCompletionHint(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,System.Windows.Point,Alternet.Syntax.Lexer.ILexer)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="position">Position to display the hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ResetLineSpace">
            <summary>
            Resets the <c>LineSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ShowScrollHint">
            <summary>
            Displays tooltip indicating destination line when scrolling.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HideScrollHint">
            <summary>
            Hides scroll hint window if necessary.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.GetCaretSize(System.Drawing.Point)">
            <summary>
            Returns size of the caret's current shape at given position.
            </summary>
            <param name="position">Point at which caret size should be calculated.</param>
            <returns>Size of the caret.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.TextReader,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.GutterImagesResourceNameSuffix">
            <summary>
            Gets or sets the image resource name suffix.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MacroRecording">
            <summary>
            Gets or sets a boolean value indicating whether Edit control should record sequence of keyboard commands.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MacroSuspendend">
            <summary>
            Gets or sets a boolean value indicating whether recording is suspended.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.MacroRecords">
            <summary>
            Represents an array containing keyboard commands.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.PlayBackMacro">
            <summary>
            Repeats the stored command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StartMacroRecording">
            <summary>
            Starts recording the command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.StopMacroRecording">
            <summary>
            Stops recording the command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.PauseMacroRecording">
            <summary>
            Suspends recording the command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ResumeMacroRecording">
            <summary>
            Resumes recording the command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.ToggleMacroRecording">
            <summary>
            Toggles recording the command sequence.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.SaveMacros(System.IO.Stream)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.SaveMacros(System.IO.TextWriter)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="writer">The TextWriter object to write macros to stream.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.SaveMacros(System.String)">
            <summary>
            Saves the macro records to the given file in xml format.
            </summary>
            <param name="fileName">Name of file to save macros.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadMacros(System.IO.Stream)">
            <summary>
            Loads the macro records from the given stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadMacros(System.IO.TextReader)">
            <summary>
            Loads the macro records from the given stream.
            </summary>
            <param name="reader">The TextReader object to read macros from stream.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.LoadMacros(System.String)">
            <summary>
            Loads the macro records from the given file.
            </summary>
            <param name="fileName">Name of file to load macros.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.RecordKeyData(Alternet.Editor.Wpf.IMacroKeyData)">
            <summary>
            Adds keyData to the <c>MacroRecords</c> array.
            </summary>
            <param name="keyData">Specifies a keyboard command.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.AutoCorrect">
            <summary>
            Occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AutoCorrectDelimiters">
            <summary>
            Gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditor.AutoCorrection">
            <summary>
            Gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditor.HasAutoCorrection(System.String,System.String@)">
            <summary>
            Checks whether specified word has correction.
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextEditorContentArea">
            <summary>
            Represents the scrollable content area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorContentArea.#ctor">
            <summary>
            Initializes a new instance of the <c>TextEditorContentArea</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorContentArea.TextView">
            <summary>
            Gets TextEditorView object for this <c>TextEditorContentArea</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorContentArea.Editor">
            <summary>
            Gets or sets <c>TextEditor</c> owner of this <c>TextEditorContentArea</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorContentArea.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextEditorView">
            <summary>
            Represents container for all the <c>TextEditor</c> layers.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditorView.OutliningPadding">
            <summary>
            Gets Thickness for outlining padding.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditorView.scrollExtent">
            <summary>
            Size of the document, in pixels.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditorView.scrollOffset">
            <summary>
            Offset of the scroll position.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.TextEditorView.scrollViewport">
            <summary>
            Size of the viewport.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.#ctor">
            <summary>
            Initializes a new instance of the <c>TextEditorView</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextEditorView.ScrollOffsetChanged">
            <summary>
            Occurs when the scroll offset has changed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.Source">
            <summary>
            Gets an ITextSource object containing string data for <c>TextEditor</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.Formatter">
            <summary>
            Gets TextFormatter for <c>TextEditor</c> control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.WideSpaceWidth">
            <summary>
            Represents average character width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.DefaultLineHeight">
            <summary>
            Represents default height of the individual line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.LineOverhangTrailing">
            <summary>
            Represents overhang trailing of the individual line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.DefaultBaseline">
            <summary>
             Gets the distance from the top to the baseline.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.ViewportWidth">
            <summary>
            Gets viewport width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.HorizontalOffset">
            <summary>
            Gets the horizontal scroll offset.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.VerticalOffset">
            <summary>
            Gets the vertical scroll offset.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.ScrollOffset">
            <summary>
            Gets the scroll offset.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.Editor">
            <summary>
            Gets or sets an associated <c>TextEditor</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.OutliningHeaderButtonSize">
            <summary>
            Gets a size of folding button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.TextViewRect">
            <summary>
            Gets an bounding rectangle for text area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.CaretLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> caret.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.MinimapDragLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> minimap drag line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.TextLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> text area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.GutterLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> gutter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.CodeActionLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> gutter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.EditMarginLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> Edit Margin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.UserMarginLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> user margin area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.MinimapLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> minimap.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.LineModificatorsLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> line modificators area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextEditorView.LineNumbersLayer">
            <summary>
            Gets an object for rendering <c>TextEditor</c> Line numbers area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.CheckIsFrozen(System.Windows.Freezable)">
            <summary>
            Check whether specified Freezable object currently modifiable.
            </summary>
            <param name="f">Freezable object to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.GetHitTest(System.Double,System.Double,Alternet.Editor.Wpf.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.GetHitTestForOutlineSections(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Expands outline section if needed.
            </summary>
            <param name="e">Contains mouse button information.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.MakeVisible(System.Windows.Rect)">
            <summary>
            Scrolls the text view so that the specified rectangle gets visible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.CreateTypeface(System.Windows.FrameworkElement)">
            <summary>
            Creates Typeface for specified FrameworkElement.
            </summary>
            <param name="fe">FrameworkElement to create Typeface.</param>
            <returns>Typeface object belongs to fe.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.SetScrollOffset(System.Windows.Vector)">
            <summary>
            Scrolls control by specified vector.
            </summary>
            <param name="vector">Vector defines scroll direction and distance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.InvalidateDefaultTextMetrics">
            <summary>
            Forces to recalculate <c>TextEditorView</c> text metrics.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.InvalidateLines">
            <summary>
            Invalidates all <c>TextEditor</c> elements.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.InvalidateLines(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invalidates specific region of <c>TextEditor</c> control.
            </summary>
            <param name="firstLineIndex">Specifies first line to invalidate.</param>
            <param name="lastLineIndex">Specifies last line to invalidate.</param>
            <param name="isDisplay">Specifies if display coordinates are passed instead of text coordinates.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextEditorView.GetLineNumberString(System.Int32)">
            <summary>
            String representation of specified line number.
            </summary>
            <param name="textLineIndex">Number of line to process.</param>
            <returns>String representation of specified line number if <c>TextEditor.LineNumbersVisible</c> property if true; otherwise null.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMark">
            <summary>
            <c>BookMark</c> class is used to store individual bookmark in bookmarks collection of Edit control.
            </summary>
            <remarks>
            Implements <c>IBookMark</c> interface.
            </remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified settings.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Index</c> and <c>Line</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Name</c>, <c>Description</c> and <c>Url</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="name">Specifies <c>Name</c> property of a new instance.</param>
            <param name="description">Specifies <c>Description</c> property of a new instance.</param>
            <param name="url">Specifies <c>Url</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Name</c>, <c>Description</c>, <c>Url</c>, <c>ImageIndex</c>, <c>FileName</c> and <c>Tag</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="name">Specifies <c>Name</c> property of a new instance.</param>
            <param name="description">Specifies <c>Description</c> property of a new instance.</param>
            <param name="url">Specifies <c>Url</c> property of a new instance.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of a new instance.</param>
            <param name="fileName">Specifies <c>FileName</c> property of a new instance.</param>
            <param name="tag">Specifies <c>Tag</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Group</c>, <c>Name</c>, <c>Description</c>, <c>Url</c>, <c>ImageIndex</c>, <c>FileName</c> and <c>Tag</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="group">Specifies <c>Group</c> property of a new instance.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of a new instance.</param>
            <param name="fileName">Specifies <c>FileName</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Group</c>, <c>ImageIndex</c>, <c>Name</c>, <c>Description</c>, <c>Url</c>, <c>ImageIndex</c>, <c>FileName</c> and <c>Tag</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="group">Specifies <c>Group</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="name">Specifies <c>Name</c> property of a new instance.</param>
            <param name="description">Specifies <c>Description</c> property of a new instance.</param>
            <param name="url">Specifies <c>Url</c> property of a new instance.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of a new instance.</param>
            <param name="fileName">Specifies <c>FileName</c> property of a new instance.</param>
            <param name="tag">Specifies <c>Tag</c> property of a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Line</c> and <c>FileName</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="fileName">Specifies <c>FileName</c> property of a new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Line">
            <summary>
            Gets position of the bookmark within the text. 0 corresponds to the first line, 1 to second the line, and so on.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Pos">
            <summary>
            Gets position of the bookmark within the text line. 0 corresponds to the first character in a line, 1 to the second character, and so on.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Index">
            <summary>
            Gets an integer value that specifies an ordinal index of the bookmark.
            </summary>
            <remarks>
            Edit can display bookmarks that have <c>Index</c> between 0 and 9, or unnumbered bookmarks (with <c>Index</c> equal to Int.MaxValue).
            </remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Position">
            <summary>
            Gets position of the bookmark within the text (index of character and line). Corresponds to <c>Pos</c> and <c>Line</c> properties.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Name">
            <summary>
            Gets or sets name of the bookmark.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Description">
            <summary>
            Gets or sets bookmark description.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Url">
            <summary>
            Gets or sets bookmark url.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.FileName">
            <summary>
            Gets or sets a file name associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.ImageIndex">
            <summary>
            Gets or sets an image index associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Group">
            <summary>
            Gets or sets a group associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.ZIndex">
            <summary>
            Gets or sets an z-index associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMark.Tag">
            <summary>
            Gets or sets user-defined data associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMark.Assign(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarkManager">
            <summary>
            Represents class to manage shared bookmark collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.SaveFile(System.String)">
            <summary>
            Saves bookmark content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.LoadFile(System.String)">
            <summary>
            Loads bookmark content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.SaveStream(System.IO.Stream)">
            <summary>
            Saves bookmark content to the specific stream.
            </summary>
            <param name="stream">The Stream object to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.LoadStream(System.IO.Stream)">
            <summary>
            Loads bookmark content from the specified stream.
            </summary>
            <param name="stream">The Stream object to load content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.ClearBookMark(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Finds the bookmark by specified parameters and removes its from bookmark collection.
            </summary>
            <param name="line">IBookMark.Line to check.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="bookMark">IBookMark.Index to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.ClearBookMark(System.Int32)">
            <summary>
            Finds the bookmark with specified index and removes it from bookmarks collection.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
            <remarks>If the bookmark is not found the method does nothing.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GotoBookMark(System.Int32)">
            <summary>
            Finds the bookmark with specified index and jumps to its location.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
            <remarks>If the bookmark is not found the method does nothing.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.ClearBookMarks(System.Int32,System.Int32,System.String)">
            <summary>
            Removes all bookmark found by specified criterion.
            </summary>
            <param name="line">IBookMark.Line to check.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetCurrentBookMark(System.Int32)">
            <summary>
            Finds current bookmark.
            </summary>
            <param name="group">IBookMark.Group to check; if -1 search inside all bookmarks.</param>
            <returns>Current <c>IBookMark</c> if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetBookMarkCount(System.Int32,System.String)">
            <summary>
            Calculates amount of bookmarks appropriate specified conditions.
            </summary>
            <param name="group">IBookMark.Group to check; if -1 search inside all bookmarks.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>Number of found bookmarks.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alternet.Editor.Wpf.BookMarkManager.GetBookMarkCount" -->
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.BlockDeleting(System.Drawing.Rectangle,System.String)">
            <summary>
            Removes all bookmarks belongs to specified file within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.Clear(System.Int32,System.String)">
            <summary>
            Removes all bookmarks from the bookmarks collection appropriate specified conditions.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.Clear(System.String)">
            <summary>
            Removes all bookmarks from the bookmarks collection appropriate specified conditions.
            </summary>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.Clear">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.ClearUnnumberedBookMarks(System.String)">
            <summary>
            Removes all unnumbered bookmarks from the bookmarks collection appropriate specified conditions.
            </summary>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Updates all bookmarks appropriate specified conditions starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.SetBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Sets the bookmark with specified parameters.
            </summary>
            <param name="position">Specifies position of the <c>IBookMark</c>.</param>
            <param name="group">The integer value that specifies group associated with this <c>IBookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>IBookMark</c> index.</param>
            <param name="imageIndex">The integer value that specifies <c>IBookMark</c> imageIndex.</param>
            <param name="name">The string value that specifies <c>IBookMark</c> name.</param>
            <param name="description">The string value that specifies <c>IBookMark</c> description.</param>
            <param name="url">The string value that specifies url of the <c>IBookMark</c> to toggle.</param>
            <param name="tag">The <c>Tag</c> property of <c>BookMark</c>.</param>
            <param name="fileName">The string value that specifies <c>IBookMark</c> file name.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GotoNextBookMark">
            <summary>
            Moves to the location of the next unnumbered bookmark in the appropriate text source.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GotoPrevBookMark">
            <summary>
            Moves to the location of the previous unnumbered bookmark in the appropriate text source.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GotoNextBookMark(System.Int32)">
            <summary>
            Moves to the location of the next unnumbered bookmark in the appropriate text source.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GotoPrevBookMark(System.Int32)">
            <summary>
            Moves to the location of the previous unnumbered bookmark in the appropriate text source.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.CanMoveToNextBookMark(System.Int32)">
            <summary>
            Returns boolean value indicating that manager can move to the next bookmark appropriate specified conditions.
            Determines whether.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <returns>True if can; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.CanMoveToPreviousBookMark(System.Int32)">
            <summary>
            Returns boolean value indicating that manager can move to the previous bookmark appropriate specified conditions.
            Determines whether.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <returns>True if can; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.NextBookMark(System.Int32,System.String)">
            <summary>
            Returns the minimal possible value of the bookmark <c>Index</c> property of the new bookmark appropriate specified conditions.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>Bookmark index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.FindBookMark(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Locates the bookmark appropriate specified conditions.
            </summary>
            <param name="line">IBookMark.Line to check.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="bookMark">IBookMark.Index to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>IBookMark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.FindBookMark(System.Int32,System.String)">
            <summary>
            Locates the bookmark appropriate specified conditions.
            </summary>
            <param name="bookMark">IBookMark.Index to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>IBookMark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.FindBookMark(System.Int32,System.Int32,System.String)">
            <summary>
            Locates the bookmark appropriate specified conditions.
            </summary>
            <param name="line">IBookMark.Line to check.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>IBookMark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.ToggleBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Sets or removes bookmark with specified conditions.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="bookMark">IBookMark.Index to check.</param>
            <param name="imageIndex">IBookMark.ImageIndex to check.</param>
            <param name="name">IBookMark.Name to check.</param>
            <param name="description">IBookMark.Description to check.</param>
            <param name="url">IBookMark.Url to check.</param>
            <param name="tag">IBookMark.Tag to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetBookMark(System.Int32,System.Int32,System.String)">
            <summary>
            Finds the first bookmark in the collection appropriate specified conditions.
            </summary>
            <param name="line">IBookMark.Line to check.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>IBookMark.Index if the bookmark was found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all bookmarks in the collection appropriate specified conditions.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <param name="list">Represents the collection of the located bookmarks.</param>
            <returns>Count of the found bookmarks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetBookMarks(System.Int32,System.String,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all bookmarks in the collection appropriate specified conditions.
            </summary>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <param name="list">Represents the collection of the located bookmarks.</param>
            <returns>Count of the found bookmarks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetBookMark(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Finds the first bookmark in the collection appropriate specified conditions.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <param name="group">IBookMark.Group to check.</param>
            <param name="fileName">IBookMark.FileName to check.</param>
            <returns>IBookMark.Index if the bookmark was found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetZIndex(System.Int32)">
            <summary>
            Gets Z-Index of specified group.
            </summary>
            <param name="group">Group to check.</param>
            <returns>Z-Index of specified group.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.SetZIndex(System.Int32,System.Int32)">
            <summary>
            Sets Z-Index of specified group.
            </summary>
            <param name="group">Group to check.</param>
            <param name="value">Z-Index to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnActivate(System.String,Alternet.Editor.Wpf.ITextSource@)">
            <summary>
            Raises <c>Activate</c> event.
            </summary>
            <param name="fileName">FileName that holds ITextSource content.</param>
            <param name="source">ITextSource to activate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnBookMarkAdded(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises <c>BookMarkAdded</c> event.
            </summary>
            <param name="bookMark">IBookMark being add.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnBookMarkRemoved(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises <c>OnBookMarkRemoved</c> event.
            </summary>
            <param name="bookMark">IBookMark being removed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnBookMarkPositionChanged(Alternet.Editor.Wpf.IBookMark,System.Drawing.Point)">
            <summary>
            Raises <c>BookMarkPositionChanged</c> event.
            </summary>
            <param name="bookMark">IBookMark which position being changed.</param>
            <param name="position">IBookMark position.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnBookMarkImageChanged(Alternet.Editor.Wpf.IBookMark,System.Int32)">
            <summary>
            Raises <c>BookMarkImageChanged</c> event.
            </summary>
            <param name="bookMark">IBookMark which image being changed.</param>
            <param name="imageIndex">IBookMark image.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises <c>Click</c> event.
            </summary>
            <param name="bookMark">IBookMark being clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnDoubleClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises <c>DoubleClick</c> event.
            </summary>
            <param name="bookMark">IBookMark being double clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.OnShowTooltip(System.String@,Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises <c>ShowToolTip</c> event.
            </summary>
            <param name="tooltip">Tooltip to be displayed.</param>
            <param name="bookMark">IBookMark under the mouse cursor.</param>
            <returns>True if event is handled, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.GetImages(System.Int32)">
            <summary>
            Returns image list by its group.
            </summary>
            <param name="group">Group to check.</param>
            <returns>Images associated with group.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkManager.SharedBookMarks">
            <summary>
            Gets an <c>BookMarkManager</c> to manage shared bookmarks.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.Register(Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Add specified ITextSource to collection to manage its bookmarks on a shared basis.
            </summary>
            <param name="source">ITextSource to register.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.Unregister(Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Removes specified ITextSource from collection to stop manage its bookmarks on a shared basis.
            </summary>
            <param name="source">ITextSource to unregister.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkManager.RegisterImages(Alternet.Editor.Wpf.ImageSourceCollection,System.Int32)">
            <summary>
            Set specified image collection as image source for given group.
            </summary>
            <param name="imageList">ImageSourceCollection to set.</param>
            <param name="group">Specifies group number to which this image collection will be set.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.Activate">
            <summary>
            Occurs when some ITextSource needs to be activated.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.BookMarkAdded">
            <summary>
            Occurs when IBookMark is being added.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.BookMarkRemoved">
            <summary>
            Occurs when IBookMark is being removed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.BookMarkPositionChanged">
            <summary>
            Occurs when IBookMark position is being changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.BookMarkImageChanged">
            <summary>
            Occurs when IBookMark image is being changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.Click">
            <summary>
            Occurs when IBookMark is being clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.DoubleClick">
            <summary>
            Occurs when IBookMark is being double clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarkManager.ShowToolTip">
            <summary>
            Occurs when IBookMark Tooltip needs to be displayed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarks">
            <summary>
            Represents a collection of the <c>BookMark</c> objects.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMarks</c>class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.#ctor(Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Initializes a new instance of the <c>BookMarks</c> class with a specified owner.
            </summary>
            <param name="owner">Class implementing <c>ITextSource</c> interface that owns the collection.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarks.Click">
            <summary>
            Occurs when Bookmark is being clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarks.DoubleClick">
            <summary>
            When implemented by a class, occurs when Bookmark is being double clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.BookMarks.ShowToolTip">
            <summary>
            Occurs when Bookmark Tooltip needs to be displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarks.Shared">
            <summary>
            Specifies if bookmarks should be shared across all documents.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.Assign(Alternet.Editor.Wpf.IBookMarks)">
            <summary>
            Copies the contents of the another <c>BookMarks</c> collection to the bookmark collection.
            </summary>
            <param name="source">Specifies bookmark collection to copy content from. Call <c>Assign</c> to replace contents of one <c>IBookMarks</c> instance to another. The <c>Assign</c> method deletes all items from the destination collection then adds a copy of each item in the source bookmark collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMark(System.Int32)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection located within the specified text line.
            </summary>
            <param name="line">The integer value that specifies an index of the text line where to find bookmark.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection that locates within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all bookmarks in the <c>BookMarks</c> collection located within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the bookmarks located within the specified range.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMarks(System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all items in the bookmark collection.
            </summary>
            <param name="list">Represents the collection of the bookmarks located within the specified scope.</param>
            <returns>Index of the located bookmarks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMark(System.Int32,System.Int32)">
            <summary>
            Finds the first item in the bookmark collection located within the specified text line and associated with specified group.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="group"><c>BookMark</c> Group.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Finds the first item in the bookmark collection located within the specified scope and associated with specified group.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <param name="group"><c>BookMark</c> Group.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Int32,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all items in the bookmark collection located within the specified scope and associated with specified group.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <param name="group"><c>BookMark</c> Group.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified scope.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetBookMarks(System.Int32,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            Finds all items in the bookmark collection associated with specified group.
            </summary>
            <param name="group"><c>BookMark</c> Group.</param>
            <param name="list">Represents the collection of the located bookmarks.</param>
            <returns>Count of the found bookmarks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.FindBookMark(System.Int32)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies an index of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            Locates the bookmark with specified index within the specified line.
            </summary>
            <param name="bookMark">The integer value that specifies <c>Index</c> of the bookmark to find.</param>
            <param name="line">The integer value that specifies an index of the text line in where to locate bookmark.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.FindBookMark(System.Int32,System.Int32,System.Int32)">
            <summary>
            Locates the bookmark with specified index within the specified line.
            </summary>
            <param name="group">Specifies bookmark group.</param>
            <param name="bookMark">The integer value that specifies <c>Index</c> of the bookmark to find.</param>
            <param name="line">The integer value that specifies an index of the text line in where to locate bookmark.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.FindBookMark(System.String)">
            <summary>
            Locates the bookmark with specified <c>Name</c>.
            </summary>
            <param name="name">The string value that specifies <c>Name</c> of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specified by line parameter.
            </summary>
            <param name="line">The integer value that specifies an index of the text line where to set bookmark.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Sets the bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of a new instance.</param>
            <param name="fileName">Specifies <c>FileName</c> property of a new instance.</param>
            <param name="tag">Specifies <c>Tag</c> property of a new instance.</param>
            <param name="clear">Specifies whether previously found bookmark should be removed.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies an index of the bookmark to find.</param>
            <param name="position">The out Point value to receive <c>Line</c> and <c>Pos</c> properties of the found bookmark.</param>
            <returns>True if the bookmark is found; otherwise false.</returns>
            <remarks>If the search is not successful the Point parameter obtain empty value.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="line">Index of line where to toggle bookmark.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value specifying index of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Sets or removes bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Object)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
            <param name="fileName">Specifies <c>FileName</c> property of the bookmark to toggle.</param>
            <param name="tag">Specifies <c>Tag</c> property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the current line.
            </summary>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark">
            <summary>
            Sets or removes an unnumbered bookmark on the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Sets or removes bookmark with specified parameters.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="group">The integer value that specifies group associated with <c>BookMark</c> to toggle.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
            <param name="tag">Specifies <c>Tag</c> property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified parameters.
            </summary>
            <param name="line">Specifies line of the bookmark to toggle.</param>
            <param name="group">The integer value that specifies group associated with <c>BookMark</c> to toggle.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified parameters.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="group">The integer value that specifies group associated with <c>BookMark</c> to toggle.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets or removes bookmark with specified parameters.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="group">The integer value that specifies group associated with <c>BookMark</c> to toggle.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ToggleBookMark(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified parameters.
            </summary>
            <param name="group">The integer value that specifies group associated with <c>BookMark</c> to toggle.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark to toggle.</param>
            <param name="imageIndex">Specifies <c>ImageIndex</c> property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMark(System.Int32)">
            <summary>
            Finds the bookmark with specified index and removes it from bookmarks collection.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
            <remarks>If the bookmark is not found the method does nothing.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            Finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookmark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMarkByIndex(System.Int32)">
            <summary>
            Removes the bookmark from bookmarks collection at the specified index. Updates state of the <c>TextSource</c> owning this collection.
            </summary>
            <param name="index">The integer value that specifies the zero-based index of bookmark in a bookmarks collection to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.Clear">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMarks(System.Int32)">
            <summary>
            Removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies an index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMarks(System.Int32,System.Int32)">
            <summary>
            Removes all bookmarks from the specified line for specified Group.
            </summary>
            <param name="group">Specifies index of Bookmark group.</param>
            <param name="line">The integer value that specifies an index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMark(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the bookmark by given index and group in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="group">Specifies index of Bookmark group.</param>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMarksByGroup(System.Int32)">
            <summary>
            Removes all bookmarks for the specified Bookmarks group.
            </summary>
            <param name="group">The Bookmark group index.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearBookMarks">
            <summary>
            Removes all bookmarks.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearUnnumberedBookMarks">
            <summary>
            Removes all Unnumbered Bookmarks.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearAllBookMarks">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            Removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.NextBookMark">
            <summary>
            Returns the minimal possible value of the bookmark <c>Index</c> property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
            <remarks>If the bookmarks collection is empty method returns 0.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.NextBookMark(System.Int32)">
            <summary>
            Returns the minimal possible value of the bookmark <c>Index</c> property of the new bookmark.
            </summary>
            <param name="group">Specifies an index of the bookmark groups.</param>
            <returns>Bookmark index.</returns>
            <remarks>If the bookmarks collection is empty method returns 0.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GotoBookMark(System.Int32)">
            <summary>
            Moves caret to the location of the bookmark in the text source.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark <c>Index</c> property of the bookmark to locate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GotoNextBookMark">
            <summary>
            Moves to the location of the next unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GotoNextBookMark(System.Int32)">
            <summary>
            Moves to the location of the next unnumbered bookmark in the text source.
            </summary>
            <param name="group">Specifies group index of bookmark groups.</param>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GotoPrevBookMark">
            <summary>
            Moves caret to the location of the previous unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GotoPrevBookMark(System.Int32)">
            <summary>
            Moves caret to the location of the previous unnumbered bookmark in the text source.
            </summary>
            <param name="group">Specifies group index of bookmark groups.</param>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.OnClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises OnClick event.
            </summary>
            <param name="bookMark">Bookmark being clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.OnDoubleClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises OnDoubleClick event.
            </summary>
            <param name="bookMark">Bookmark being clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.OnShowTooltip(System.String@,Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Raises OnShowTooltip event.
            </summary>
            <param name="tooltip">Tooltip to be displayed.</param>
            <param name="bookMark">Bookmark under the mouse cursor.</param>
            <returns>True if event is handled, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.GetImages(System.Int32)">
            <summary>
            Returns image list by its group.
            </summary>
            <param name="group">Given group.</param>
            <returns>ImageList associated with group.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the bookmark with specified parameters.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="group">The integer value that specifies group associated with this <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="imageIndex">The integer value that specifies <c>BookMark</c> imageIndex.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
            <param name="tag">The <c>Tag</c> property of <c>BookMark</c>.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bookmark with specified parameters.
            </summary>
            <param name="line">The integer value that specifies an index of the text line.</param>
            <param name="group">The integer value that specifies group associated with this <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="imageIndex">The integer value that specifies <c>BookMark</c> imageIndex.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bookmark with specified parameters.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="group">The integer value that specifies group associated with this <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="imageIndex">The integer value that specifies <c>BookMark</c> imageIndex.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets the bookmark with specified parameters.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="group">The integer value that specifies group associated with this <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="imageIndex">The integer value that specifies <c>BookMark</c> imageIndex.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SaveFile(System.String)">
            <summary>
            Saves bookmark content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.LoadFile(System.String)">
            <summary>
            Loads bookmark content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.SaveStream(System.IO.Stream)">
            <summary>
            Saves bookmark content to the specific stream.
            </summary>
            <param name="stream">The Stream object to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarks.LoadStream(System.IO.Stream)">
            <summary>
            Loads bookmark content from the specified stream.
            </summary>
            <param name="stream">The Stream object to load content.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.Braces">
            <summary>
            Represents properties and methods for handling matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>Braces</c> class with a specified owner.
            </summary>
            <param name="owner">Specifies the class implementing <c>TextEditor</c> that owns a new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the ClosingBraces property should be persisted.
            </summary>
            <returns>True if ClosingBraces differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.ForeColor">
            <summary>
            Gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.BackColor">
            <summary>
            Gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.FontStyle">
            <summary>
            Gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
            <remarks>The default value of this property is <c>FontStyle.Bold</c>.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.UseRoundRect">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.Assign(Alternet.Editor.Wpf.IEditBraceMatching)">
            <summary>
            Copies the contents of another <c>Braces</c> object.
            </summary>
            <param name="source">Specifies <c>IEditBraceMatching</c> to copy content from.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetFontStyle">
            <summary>
            Resets the <c>Style</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetUseRoundRect">
            <summary>
            Resets the <c>UseRoundRect</c> to its default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behavior of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Braces.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="M:Alternet.Editor.Wpf.Braces.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight text in.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting, turned on by TempHighlightBraces method.
            <seealso cref="M:Alternet.Editor.Wpf.Braces.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.HighlightBraces">
            <summary>
            Highlights braces containing caret  position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.UnhighlightBraces">
            <summary>
            Unhighlights braces containing caret position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.Braces.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeSnippetRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetRange</c> class with specified parameters.
            </summary>
            <param name="start">Start of <c>CodeSnippetRange</c> area.</param>
            <param name="end">End of <c>CodeSnippetRange</c> area.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>SnippetRange</c> class with specified parameter.
            </summary>
            <param name="start">Specifies start position of the code snippet.</param>
            <param name="end">Specifies end position of the code snippet.</param>
            <param name="id">Specifies id of the code snippet.</param>
            <param name="tooltip">Specifies short description of the code snippet.</param>
            <param name="isEditable">Specifies whether code snippet can be edited.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>SnippetRange</c> class with specified parameter.
            </summary>
            <param name="start">Specifies start position of the code snippet.</param>
            <param name="end">Specifies end position of the code snippet.</param>
            <param name="id">Specifies id of the code snippet.</param>
            <param name="tooltip">Specifies short description of the code snippet.</param>
            <param name="isEditable">Specifies whether code snippet can be edited.</param>
            <param name="supportsCode">Specifies whether code snippet supports code.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>SnippetRange</c> class with specified parameter.
            </summary>
            <param name="start">Specifies start position of the code snippet.</param>
            <param name="end">Specifies end position of the code snippet.</param>
            <param name="id">Specifies id of the code snippet.</param>
            <param name="tooltip">Specifies short description of the code snippet.</param>
            <param name="isEditable">Specifies whether code snippet can be edited.</param>
            <param name="supportsCode">Specifies whether code snippet supports code.</param>
            <param name="visible">Specifies whether code snippet should be highlighted.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeSnippetRange.ID">
            <summary>
            Represents name of code snippet.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeSnippetRange.Tooltip">
            <summary>
            Represents short description of the code snippet.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeSnippetRange.IsEditable">
            <summary>
            Gets or sets a boolean value that indicates whether code snippet can be edited.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeSnippetRange.SupportsCode">
            <summary>
            Gets or sets a boolean value that indicates whether code snippet can fill code.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.CodeSnippetRange.Visible">
            <summary>
            Gets or sets a boolean value that indicates whether code snippet is visible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRange.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>CodeSnippetRange</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current CodeSnippetRange object.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeSnippetRanges">
            <summary>
            Represents collection containing list of code snippet literals.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.NeedClear(System.Int32)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="y">Line being changed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.NeedClear(System.Drawing.Rectangle)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="rect">Rectangle specifying block being deleted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes positions of any code snippet located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="preserveBounds">Specifies whether snippet bounds should be preserved.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all snippets from the snippet collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove snippets.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.GetFirstSnippet">
            <summary>
            Finds first snippet in snippet collection with nonempty id.
            </summary>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.GetNextSnippet(System.Int32)">
            <summary>
            Finds next snippet in snippet collection with different id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.GetPrevSnippet(System.Int32)">
            <summary>
            Finds previous snippet in snippet collection with different id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.IsFirstSnippet(Alternet.Editor.Wpf.ICodeSnippetRange)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="range">Specified the code snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.IsFirstSnippet(System.Int32)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="index">Specified index of the snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.FindSnippet(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            Locates code snippet at specified position.
            </summary>
            <param name="position">Position to locate code snippet.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of code snippet in the snippets collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.CodeSnippetRanges.Sort">
            <summary>
            Sorts the snippet list.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ActivateEventArgs">
            <summary>
            Provides data for the <c>Activate</c> event handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ActivateEventArgs.#ctor(System.String,Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Initializes a new instance of the <c>ActivateEventArgs</c> class with specified parameters.
            </summary>
            <param name="fileName">Name of the file being edited by the text editor.</param>
            <param name="source"><c>ITextSource</c> that contains text document.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ActivateEventArgs.FileName">
            <summary>
            Gets or sets the name of the file edited by the text editor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ActivateEventArgs.Source">
            <summary>
            Gets or sets <c>ITextSource</c> that contains text document.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BlockDeletingEventArgs">
            <summary>
            Provides data for the event that occurs when some block of lines within the <c>ITextSource</c> is deleted.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BlockDeletingEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <c>BlockDeletingEventArgs</c> class with specified parameters.
            </summary>
            <param name="rect">Rectangular are of the text being deleted.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BlockDeletingEventArgs.Rect">
            <summary>
            Represents the rectangle area of block being deleted by <c>ITextSource</c>.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarkChangedEventArgs">
            <summary>
            Provides data for the <c>BookMarkManager.BookMarkPositionChanged</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkChangedEventArgs.#ctor(Alternet.Editor.Wpf.IBookMark,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.BookMarkChangedEventArgs"/> with specified parameters.
            </summary>
            <param name="bookMark">Bookmark whose position is changed.</param>
            <param name="position">New bookmark position.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkChangedEventArgs.Position">
            <summary>
            Gets or sets a new <c>IBookMark</c> position.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookmarkClickEventArgs">
            <summary>
            Provides data for the <c>BookMarkManager.Click</c> and <c>BookMarkManager.DoubleClick</c> event handlers.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookmarkClickEventArgs.#ctor(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.BookmarkClickEventArgs"/> with specified parameters.
            </summary>
            <param name="bookMark"><c>IBookMark</c> that was clicked.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarkEventArgs">
            <summary>
            Provides data for the <c>BookMarkManager.BookMarkAdded</c> and <c>BookMarkManager.BookMarkRemoved</c> event handlers.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkEventArgs.#ctor(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.BookMarkEventArgs"/> with specified parameters.
            </summary>
            <param name="bookMark"><c>IBookMark</c> to be added or removed.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkEventArgs.BookMark">
            <summary>
            Gets or sets bookmark to be added or removed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarkImageChangedEventArgs">
            <summary>
            Provides data for the <c>BookMarkManager.BookMarkImageChanged</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkImageChangedEventArgs.#ctor(Alternet.Editor.Wpf.IBookMark,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.ToolTipEventArgs"/> with specified parameters.
            </summary>
            <param name="bookMark">Bookmark whose image is changed.</param>
            <param name="imageIndex">New bookmark image index.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkImageChangedEventArgs.ImageIndex">
            <summary>
            Gets or sets <c>IBookMark</c> image index.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookMarkToolTipEventArgs">
            <summary>
            Provides data for the <c>BookMarkManager.ShowToolTip</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.BookMarkToolTipEventArgs.#ctor(System.String,Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.BookMarkToolTipEventArgs"/> with specified parameters.
            </summary>
            <param name="tooltip">Tooltip to be displayed.</param>
            <param name="bookMark">Bookmark under the mouse cursor.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkToolTipEventArgs.Tooltip">
            <summary>
            Gets or sets tooltip to be displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkToolTipEventArgs.BookMark">
            <summary>
            Gets or sets bookmark under the mouse cursor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.BookMarkToolTipEventArgs.Handled">
            <summary>
            Indicates that if further processing is required.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.HyperTextEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.CheckHyperText</c>, <c>TextSource.CheckHyperText</c> or <c>HyperTextEx.CheckHyperText</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>HyperTextEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.HyperTextEventArgs">
            <summary>
            Provides data for the <c>HyperTextEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperTextEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>HyperTextEventArgs</c> class with specified Text and HyperText values.
            </summary>
            <param name="text">Specifies text to check.</param>
            <param name="isHyperText">Indicates whether given text represents hypertext.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.HyperTextEventArgs.Text">
            <summary>
            Contains string to check.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.HyperTextEventArgs.IsHyperText">
            <summary>
            Returns value indicating whether <c>HyperTextEventArgs.Text</c> represents hypertext.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ToolTipEventArgs">
            <summary>
            Provides data for the <c>IBookMarks.ShowToolTip</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ToolTipEventArgs.#ctor(System.String,Alternet.Editor.Wpf.IBookMark)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.ToolTipEventArgs"/> with specified parameters.
            </summary>
            <param name="tooltip">Tooltip to be displayed.</param>
            <param name="bookMark">Bookmark under the mouse cursor.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ToolTipEventArgs.Tooltip">
            <summary>
            Gets or sets tooltip to be displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ToolTipEventArgs.BookMark">
            <summary>
            Gets or sets bookmark under the mouse cursor.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ToolTipEventArgs.Handled">
            <summary>
            Indicates that if further processing is required.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoEvent">
            <summary>
            Represents a method that will handle the <c>IUndo.Undo</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>UndoEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoEventArgs">
            <summary>
            Provides data for the event that occurs when the undo/redo operation performed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoEventArgs.#ctor(Alternet.Editor.Wpf.IUndoData,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>UndoEventArgs</c> class with specified parameters.
            </summary>
            <param name="undoData">Data related to the undo operation.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoEventArgs.UndoData">
            <summary>
            Represents the data of the undo/redo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoEventArgs.WithChange">
            <summary>
            Indicates if undo change needs to be translated to the parser.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.WordSpellEvent">
            <summary>
            Represents a method that will handle the <c>TextEditor.WordSpell</c>, <c>TextSource.WordSpell</c> or <c>Spelling.WordSpell</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>WordSpellEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.WordSpellEventArgs">
            <summary>
            Provides data for the <c>WordSpellEvent</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WordSpellEventArgs.#ctor(System.String,System.Boolean,Alternet.Syntax.StringItemInfo)">
            <summary>
            Initializes a new instance of the <c>WordSpellEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">Text to check.</param>
            <param name="correct">Specifies whether text spelling is correct.</param>
            <param name="colorStyle">Color style for text to check-up.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.WordSpellEventArgs.Text">
            <summary>
            Represents string to check.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WordSpellEventArgs.Correct">
            <summary>
            Represents a value indicating whether <c>WordSpellEventArgs.Text</c> has correct spelling.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WordSpellEventArgs.ColorStyle">
            <summary>
            Represents index of lexical style in <c>LexStyles</c> collection for <c>WordSpellEventArgs.Text</c>.
            This allows to skip checking spelling for keywords, numbers or identifiers.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.HyperText">
            <summary>
            This class is designed to recognize whether some text represents hypertext.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsEmailString(System.String)">
            <summary>
            Indicates whether given text is e-mail address.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is e-mail address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsWWWString(System.String)">
            <summary>
            Indicates whether given text is internet address within the World Wide Web.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsHttpString(System.String)">
            <summary>
            Indicates whether given text is internet address used Hypertext Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsFtpString(System.String)">
            <summary>
            Indicates whether given text is address string for File Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Ftp address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsGopherString(System.String)">
            <summary>
            Indicates whether given text is internet address string for the Gopher protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Gopher address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsFileString(System.String)">
            <summary>
            Indicates whether given text is address string for the local file on the disk.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is local file address; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.HyperText.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineStyle">
            <summary>
            Represents a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyle.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies an index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies an index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies an ordinal index of line style within line styles collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Alternet.Common.IRange)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies an index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies an ordinal index of line style within line styles collection.</param>
            <param name="priority">Specifies priority of the line style.</param>
            <param name="range">Specifies range where line style is displayed.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineStyle.Range">
            <summary>
            Specifies range where line style is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineStyle.Priority">
            <summary>
            Specifies priority of the line style.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyle.Assign(Alternet.Editor.Wpf.ILineStyle)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with default parameters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.#ctor(Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with a specified owner.
            </summary>
            <param name="owner"><c>ITextSource</c> that owns this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.Assign(Alternet.Editor.Wpf.ILineStyles)">
            <summary>
            Copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.SetLineStyle(System.Drawing.Point,Alternet.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.GetLineStyle(System.Int32)">
            <summary>
            Finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="index">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.GetLineStyle(System.Int32,System.Int32)">
            <summary>
            Finds specific linestyle in the line style collection located at the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
            <returns>The found line style if the search succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.GetLineStyles(System.Int32,System.Collections.Generic.IList{Alternet.Editor.Wpf.ILineStyle})">
            <summary>
            Finds all linestyles in the <c>LineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.SetLineStyle(Alternet.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="index">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            Removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.RemoveLineStyle(System.Int32,System.Int32)">
            <summary>
            Removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyles.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.StringItem">
            <summary>
            Represents string-like object with extended properties.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StringItem</c> class with specified string.
            </summary>
            <param name="s">Specifies string content of this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.SetTextStyle(Alternet.Syntax.StringItemInfo[]@,System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Sets text style to text fragment.
            </summary>
            <param name="textData">Retrieves style information.</param>
            <param name="start">Specifies the first character in the string.</param>
            <param name="len">Specifies number of characters in the string.</param>
            <param name="style">Specifies style to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.ClearTextStyle(Alternet.Syntax.StringItemInfo[]@,System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Removes style information from specified part of string.
            </summary>
            <param name="textData">Retrieves style information.</param>
            <param name="start">Specifies the first character in string to remove.</param>
            <param name="len">Specifies number of characters in string to remove.</param>
            <param name="style">Specifies <c>TextStyle</c> to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.Split(System.String)">
            <summary>
            Converts specified text to string array.
            </summary>
            <param name="text">String to convert.</param>
            <returns>String array representation of given text.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.StringItem.String">
            <summary>
            Gets or sets string content of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.StringItem.TextData">
            <summary>
            Gets or sets information of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.StringItem.State">
            <summary>
            Gets or sets the current state of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.StringItem.LexState">
            <summary>
            Gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.StringItem.PrevLexState">
            <summary>
            Gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.SetTextStyle(System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Sets style information to specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to set.</param>
            <param name="len">Specifies number of characters in string to set.</param>
            <param name="style">Specifies <c>TextStyle</c> to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.ClearTextStyle(System.Int32,System.Int32,Alternet.Syntax.TextStyle)">
            <summary>
            Removes style information from specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to remove.</param>
            <param name="len">Specifies number of characters in string to remove.</param>
            <param name="style">Specifies <c>TextStyle</c> to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.StringItem.TextStyleAt(System.Int32)">
            <summary>
            Retrieves style information from <c>IStringItem</c>.
            </summary>
            <param name="pos">Specifies position in <c>IStringItem</c> to obtain style information.</param>
            <returns><c>TextStyle</c> at specified position.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextSource">
            <summary>
            Represents class that provides interface between edited text and Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.#ctor">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.CodeSnippets">
            <summary>
            Gets or sets <c>ICodeSnippetRangeList</c> for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ModifiedLines">
            <summary>
            Gets modified lines information.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ModifiedLineRegions">
            <summary>
            Gets modified lines information, grouped in regions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.CurrentSnippet">
            <summary>
            Gets or sets the current <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.AutoInsertSnippet">
            <summary>
            Gets or sets current <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetCodeSnippetRangeAt(System.Drawing.Point)">
            <summary>
            Locates code snippet at specified position.
            </summary>
            <param name="position">Position to evaluate.</param>
            <returns><c>ICodeSnippetRange</c> at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.HighlightCodeSnippets">
            <summary>
            Highlights code snippets using appropriate style.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.UnhighlightCodeSnippets">
            <summary>
            Removes highlighting from code snippets and clears snippet collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.BeginUpdateSnippet">
            <summary>
            Prevents the Edit control from updating snippets until the <c>EndUpdateSnippet</c> method is called.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EndUpdateSnippet">
            <summary>
            Resumes updating snippets after updating is suspended by the <c>BeginUpdateSnippet</c> method.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SyntaxErrors">
            <summary>
            Represents a syntax errors collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InvalidateSyntaxErrors">
            <summary>
            Invalidates highlighting of syntax errors.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.HighlightSyntaxErrors">
            <summary>
            Highlights syntax errors.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.UnhighlightSyntaxErrors">
            <summary>
            Removes syntax errors highlighting.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetSyntaxErrorAt(System.Int32,System.Int32)">
            <summary>
            Gets syntax error at specified position.
            </summary>
            <param name="x">X-coordinate of the position to evaluate.</param>
            <param name="y">Y-coordinate of the position to evaluate.</param>
            <returns><c>ISyntaxError</c> object at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetCodeFixes(Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            Gets code fixes for a given syntax error.
            </summary>
            <param name="error">Specifies syntax error..</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <returns>List of code fixes for a given error if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetCodeFixesAsync(Alternet.Syntax.ISyntaxError,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets code fixes for a given syntax error in async mode.
            </summary>
            <param name="error">Specifies syntax error..</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of code fixes for a given error if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FindCodeActions(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            Locates and highlights available code fixes and code refactors for given position in the texts.
            </summary>
            <param name="position">Start position within the text.</param>
            <param name="startPos">Start position within the text.</param>
            <param name="endPos">End position within the text.</param>
            <param name="error">Syntax error within the text.</param>
            <param name="allDocuments">Specifies all documents in the solution needs to be processed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.HasCodeFixes(Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            Determines if code fixes are available for a given syntax error.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <returns>True if code fixes are available, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.HasCodeFixesAsync(Alternet.Syntax.ISyntaxError,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Determines if code fixes are available for a given syntax error in async mode.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if code fixes are available, otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Overwrite">
            <summary>
            Gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Modified">
            <summary>
            Gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.IndentOptions">
            <summary>
            Gets or sets <c>Alternet.Editor.TextSource.IndentOptions</c> for this class, allowing to customize behavior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.MaxLength">
            <summary>
            Specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetReadOnly">
            <summary>
            Resets the <c>ReadOnly</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetOverWrite">
            <summary>
            Resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetModified">
            <summary>
            Resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetIndentOptions">
            <summary>
            Resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetMaxLength">
            <summary>
            Resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetSingleLineMode">
            <summary>
            Resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Insert(System.String,System.Boolean)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InsertFromFile(System.String)">
            <summary>
            Inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DeleteRight(System.Int32,System.Boolean)">
            <summary>
            Deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DeleteLeft(System.Int32,System.Boolean)">
            <summary>
            Deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InsertBlock(System.String,System.Boolean)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InsertBlock(System.String[],System.Boolean)">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InsertBlock(Alternet.Editor.Wpf.ITextStrings,System.Boolean)">
            <summary>
            Inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.InsertBlock(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DeleteBlock(System.Int32,System.Boolean)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="len">Specifies length of block (number of characters) to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <remarks>The method deletes block of characters starting from the current position.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alternet.Editor.Wpf.TextSource.CanDeleteBlock(System.Drawing.Rectangle)" -->
        <member name="M:Alternet.Editor.Wpf.TextSource.DeleteBlock(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.BreakLine(System.Boolean)">
            <summary>
            Breaks current line into two lines.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.UnBreakLine(System.Boolean)">
            <summary>
            Concatenates lines at current position.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NewLine">
            <summary>
            Inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NewLine(System.String@,System.Boolean)">
            <summary>
            Inserts a line break at the current position with indentation.
            </summary>
            <param name="indent">pass desired indentation level, or null for automatic indentation</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetIndentString">
            <summary>
            Gets indentation string at current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IndentLine">
            <summary>
            Inserts spaces to the start of the current line.
            Number of spaces is calculated from indent options or <c>SyntaxParser</c> if assigned.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IndentLine(System.String,System.Boolean)">
            <summary>
            Inserts white space to the start of the current line.
            <param name="indent">white space string</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NewLineAbove">
            <summary>
            Inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NewLineBelow">
            <summary>
            Inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LineIsReadonly(System.Int32)">
            <summary>
            Determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LineIsHidden(System.Int32)">
            <summary>
            Determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is hidden; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.PositionIsReadonly(System.Drawing.Point)">
            <summary>
            Determines whether the text at given position is readonly.
            </summary>
            <param name="position">Position in text coordinates.</param>
            <returns>True if the text can be edited at given position; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLineReadonly(System.Int32[],System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="indexes">Line indexes.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLineHidden(System.Int32,System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="hidden">Indicates hidden flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLineHidden(System.Int32[],System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="indexes">Line indexes.</param>
            <param name="hidden">Indicates hidden flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLineState(System.Int32[],Alternet.Syntax.ItemState,System.Boolean)">
            <summary>
            Sets item state for the given line.
            </summary>
            <param name="indexes">Line indexes.</param>
            <param name="itemState">New item state.</param>
            <param name="setState">Indicates if itemstate should be set or cleared.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.PrevPosition">
            <summary>
            Gets previous position within the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Position">
            <summary>
            Gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.MoveToLine(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.StorePositionWithUndo(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list preserving it for undo.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.RestorePositionWithUndo(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DisablePositionUpdate">
            <summary>
            Prevents notification of changing of caret position until
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EnablePositionUpdate">
            <summary>
            Re-enables notification of changing of caret position
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetNavigateOptions(Alternet.Editor.Wpf.NavigateOptions)">
            <summary>
            Sets navigating options without validating position.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextSource.UndoEvent">
            <summary>
            Occurs when undo/redo operation performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UndoOptions">
            <summary>
            Gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UndoLimit">
            <summary>
            Gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UndoUpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.RedoList">
            <summary>
            Provides an indexed access to redo data.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.AddUndo(Alternet.Editor.Wpf.UndoOperation,System.Object)">
            <summary>
            Stores undo operation in the appropriate list.
            </summary>
            <param name="operation">Operation to store.</param>
            <param name="data">Data to store.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Undo(System.Boolean)">
            <summary>
            Performs the last undo operation.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Undo(Alternet.Editor.Wpf.IUndoData,System.Boolean)">
            <summary>
            Performs the single undo operation.
            </summary>
            <param name="undoData">Data related to the undo operation.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Redo">
            <summary>
            Performs the last redo operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.CanUndo">
            <summary>
            Indicating whether the undo operation can be performed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.CanRedo">
            <summary>
            Indicating whether the redo operation can be performed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ClearUndo">
            <summary>
            Clears list of undo operations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ClearRedo">
            <summary>
            Clears list of redo operations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DisableUndo">
            <summary>
            Disables recording of undo/redo operations.
            <seealso cref="M:Alternet.Editor.Wpf.TextSource.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EnableUndo">
            <summary>
            Re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="M:Alternet.Editor.Wpf.TextSource.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.BeginUndoUpdate">
            <summary>
            Allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EndUndoUpdate">
            <summary>
            Ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LineIsModified(System.Int32)">
            <summary>
            Indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LineIsModified(System.Int32,System.Boolean@)">
            <summary>
            Indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since the last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetUndoOptions">
            <summary>
            Resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetUndoLimit">
            <summary>
            Resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.AddNotifier(Alternet.Common.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.RemoveNotifier(Alternet.Common.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Update">
            <summary>
            Updates an object state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Notify(System.EventArgs)">
            <summary>
            Notifies all notifiers about changing source state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SelectBlockRect">
            <summary>
            Represents a rectangular block of selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.State">
            <summary>
            Gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.FirstChanged">
            <summary>
            Represents index of the first changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.LastChanged">
            <summary>
            Represents index of the last changed line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.BeginUpdate(Alternet.Editor.Wpf.UpdateReason)">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LinesChanged(System.Int32,System.Int32)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.TextReader,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves text content to the specific file with specific exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Object to perform writing.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific exporter and encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Object to perform writing.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.TextWriter,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Object to perform writing.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Object to perform writing.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetFlowDocument(Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            Gets FlowDocument object describes TextSource content accordingly to specified settings.
            </summary>
            <param name="options">Specifies settings to describe ITextSource content.</param>
            <returns>FlowDocument describes TextSource content.</returns>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextSource.HyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.HighlightHyperText">
            <summary>
            Gets or sets a value indicating whether hypertext in the text should be highlighted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.UrlTable">
            <summary>
            Represents hash table containing hyper-text characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IsHyperText(System.String)">
            <summary>
            Indicates whether given text represents hypertext.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetHighlightHyperText">
            <summary>
            Resets <c>HighlightHyperText</c> to the default value.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextSource.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SpellTable">
            <summary>
            Represents a hash table containing delimiters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SpellDelimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SpellDelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.HasSpelling">
            <summary>
            Gets boolean value indicating that editor has external spell checker assigned.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IsWordCorrect(System.String,System.Drawing.Point)">
            <summary>
            When implemented by a class, checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <param name ="position">Specifies position of the word in the text</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetSpellDelimiters">
            <summary>
            Resets the <c>SpellDelimiters</c> to the default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behavior of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="M:Alternet.Editor.Wpf.TextSource.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.HighlightBraces">
            <summary>
            Highlights braces containing caret  position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.UnhighlightBraces">
            <summary>
            Unhighlights braces containing caret position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightBraces(System.Boolean)">
            <summary>
            Unhighlights temporary braces areas.
            </summary>
            <param name="needUpdate">Specifies whether current brace pair should be updated.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.UnhighlightBraces(System.Boolean)">
            <summary>
            Unhighlights braces.
            </summary>
            <param name="needUpdate">Specifies whether current brace pair should be updated.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Strings">
            <summary>
            Gets or sets text source content in the form of string array.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Lexer">
            <summary>
            Gets or sets an object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ParserLine">
            <summary>
            Gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.StructureGuideLines">
            <summary>
            Represents a syntax errors collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SetLastParsed(System.Int32)">
            <summary>
            Updates the last parsed line and resets first changed line to it's default value.
            </summary>
            <param name="index">New value of the last parsed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ParseString(System.Int32)">
            <summary>
            Perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ParseStrings(System.Int32,System.Int32)">
            <summary>
            Perform lexical analysis specified strings.
            </summary>
            <param name="first">Index of the first line to parse.</param>
            <param name="last">Index of the last line to parse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ParseToString(System.Int32)">
            <summary>
            Perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from the last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedParse">
            <summary>
            Indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.ProcessAutoComplete(System.String@)">
            <summary>
            Inserts end-of-block code fragment if needed.
            </summary>
            <param name="code">Code fragment to be inserted.</param>
            <returns>True if end-of-block is inserted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FormatText(System.Boolean,System.Boolean)">
            <summary>
            Tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            <param name="immediate">Indicates if parsing should be performed without instantiating parser thread.</param>
            <param name="notify">Indicates if attached editors should be notified on reparsing</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.FormatText">
            <summary>
            Tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedIndentText">
            <summary>
            Indicates whether <c>ITextSource</c> can indent its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedCacheIndent">
            <summary>
            Indicates whether <c>ITextSource</c> can reuse previous indentation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedFormatText">
            <summary>
            Indicates whether <c>ITextSource</c> can format its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedOutlineText">
            <summary>
            Indicates whether <c>ITextSource</c> can outline its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedReparseText">
            <summary>
            Indicates whether <c>ITextSource</c> can perform syntax analysis of its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedWorkInThread">
            <summary>
            Indicates whether <c>ITextSource</c> can perform syntax analysis in thread.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedAutoComplete">
            <summary>
            Indicates whether <c>ITextSource</c> should try to autocomplete statements.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedReparseTextOnLineChange">
            <summary>
            Indicates whether <c>ITextSource</c> should replace text when changing the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedAdvancedFormatText">
            <summary>
            Indicates whether <c>ITextSource</c> should format indetnation and spaces upon text pasting or auto-completing.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.SupportsAsyncParsing">
            <summary>
            Indicates whether <c>ITextSource</c> can perform syntax analysis asynchronously.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedFormatTextOnLineChange">
            <summary>
            Indicates whether <c>ITextSource</c> should format spaces and case when changing the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedCodeCompletion">
            <summary>
            Indicates whether <c>ITextSource</c> can provide code completion operation for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedCodeFixes">
            <summary>
            Indicates whether <c>ITextSource</c> can provide code fixes operation for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedCodeRefactors">
            <summary>
            Indicates whether <c>ITextSource</c> can provide code fixes operation for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedStructureGuideLines">
            <summary>
            Indicates whether <c>ITextSource</c> can proceed syntax errors in its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedContentDividers">
            <summary>
            Indicates whether <c>ITextSource</c> can proceed syntax errors in its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedCodeCompletionTabs(Alternet.Syntax.CodeCompletionType)">
            <summary>
            Indicates code completion content can be filtered based on its priority.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedSyntaxErrors">
            <summary>
            Indicates whether <c>ITextSource</c> can proceed syntax errors in its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.NeedQuickInfoTips">
            <summary>
            Indicates whether <c>ITextSource</c> can obtain short description for syntax tokens within its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetStructureGuideLines(System.Int32,System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Gets list of guide lines.
            </summary>
            <param name="line">Start of guide line.</param>
            <param name="guideLines">List of guide lines coordinates</param>
            <returns>Number of guidelines found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.IsContentDivider(System.Int32)">
            <summary>
            Gets boolean value indicating whether text content is divided at given line.
            </summary>
            <param name="index">Line to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ThreadAction">
            <summary>
            Returns method executed in thread when parsing.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.OptimizedForMemory">
            <summary>
            Specifies whether internal text representation should optimized memory usage.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.HighlightReferences">
            <summary>
            Specifies that edit control should highlight find references.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.HighlightMatchingBlocks">
            <summary>
            Specifies that edit control should highlight found block matches.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.Clear">
            <summary>
            Clears content of the <c>TextSource</c>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.FileName">
            <summary>
            Gets or sets the name of the file that holds text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Edits">
            <summary>
            Represents a collection of <c>TextEditor</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Lines">
            <summary>
            Represents the object that implements <c>ITextStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.Text">
            <summary>
            Gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.LineStyles">
            <summary>
            Represents an object that implements <c>ILineStyles</c> interface holding collection of line styles for this document.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.BookMarks">
            <summary>
            Represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determining particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.ActiveEdit">
            <summary>
            Gets or sets an object that represent currently active (focused) <c>TextEditor</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SymbolReference">
            <summary>
            Gets or sets <c>IRange</c> of the symbol reference for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.References">
            <summary>
            Gets or sets <c>IRangeList</c> of found references for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.MatchingBlocks">
            <summary>
            Gets or sets <c>IRangeList</c> of matching begin/end blocks for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SearchResults">
            <summary>
            Gets or sets <c>IRangeList</c> of search results for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextSource.SelectedWords">
            <summary>
            Gets or sets <c>IRangeList</c> of selected words for Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            Converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.CreateStringItem(System.String)">
            <summary>
            Create a new <c>IStringItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStringItem</c> contain.</param>
            <returns>Created <c>IStringItem</c> object.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightReferences">
            <summary>
            Unhighlights references highlighted with previous call of TempHighlightReferences.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempHighlightReferences">
            <summary>
            Highlights found references.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempHighlightMatchingBlocks">
            <summary>
            Highlights block match.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightSearchResults">
            <summary>
            Unhighlights search results highlighted with previous call of TempHighlightSearchResults.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempUnhighlightSelectedWords">
            <summary>
            Unhighlights selected words highlighted with previous call of TempHighlightSelectedWords.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempHighlightSearchResults(Alternet.Common.IRangeList)">
            <summary>
            Highlights search results.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.TempHighlightSelectedWords(Alternet.Common.IRangeList)">
            <summary>
            Highlights selected words.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.StartThread(Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc)">
            <summary>
            Executes action in thread.
            </summary>
            <param name="action">Specifies action to execute in thread.</param>
            <param name="start">Specifies action to execute in thread.</param>
            <param name="end">Specifies action to execute when thread starts.</param>
            <param name="stop">Specifies action to execute when user aborts thread execution.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextSource.StopThread(Alternet.Editor.Wpf.ThreadProc,System.Boolean)">
            <summary>
            Aborts executing action in thread.
            </summary>
            <param name="action">Specifies action to abort.</param>
            <param name="wait">Specifies whether calling application should wait for background thread to finish execution.</param>
        </member>
        <member name="E:Alternet.Editor.Wpf.TextSource.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextStrings">
            <summary>
            Specifies collection of lines with extended possibilities.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.#ctor(Alternet.Editor.Wpf.ITextSource)">
            <summary>
            Initializes a new instance of the <c>TextStrings</c> class with specified parameters.
            </summary>
            <param name="source"><c>ITextSource</c> that contains this collection of lines.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.#ctor">
            <summary>
            Initializes a new instance of the <c>TextStrings</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Finalize">
            <summary>
            Destroys the instance of the <c>TextStrings</c> class.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.CreateStringItem(System.String)">
            <summary>
            Creates a new <c>IStringItem</c> object containing specified text.
            </summary>
            <param name="s">String placed into a new <c>IStringItem</c> object.</param>
            <returns>New <c>IStringItem</c> object.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Text">
            <summary>
            Gets or sets the strings in the <c>ITextStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Source">
            <summary>
            Gets the text source owning the <c>TextStrings</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.FirstChanged">
            <summary>
            Represents number of the first changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.LastChanged">
            <summary>
            Represents number of the last changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.RemoveTrailingSpaces">
            <summary>
            Gets or set a boolean value that indicates whether <c>TextStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IsWhitespace(System.Char)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="ch">The character to check.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.TextPointToAbsolutePosition(System.Collections.Generic.IList{System.String},System.Drawing.Point,System.String)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="list">Strings collection to convert.</param>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <param name="lineTerminator">Specifies line terminator.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.AbsolutePositionToTextPoint(System.Collections.Generic.IList{System.String},System.Int32,System.String)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="list">Strings collection to convert.</param>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <param name="lineTerminator">Specifies line terminator.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Find(Alternet.Syntax.IStringList,System.Collections.Hashtable,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.String,System.Boolean)">
            <summary>
            Searches for given text.
            </summary>
            <param name="list"><c>IStringList</c> collection to find from.</param>
            <param name="delimTable">Specifies collection of characters that is used as word delimiters.</param>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <param name="lineTerminator">Specifies line terminator.</param>
            <param name="searchHiddenLines">Specifies if hidden lines should be processed.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetItem(System.Int32)">
            <summary>
            Returns the <c>IStringItem</c> object at the given position of the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns><c>IStringItem</c> object at specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetLength(System.Int32)">
            <summary>
            Returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SetTextAndData(System.String,System.String)">
            <summary>
            Sets the text and color data at the same time.
            </summary>
            <param name="text">Text of the strings.</param>
            <param name="data">Color data associated with the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Changed(System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Changed(System.Int32,System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Character from specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Character from specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.AfterSave">
            <summary>
            Performs additional actions after <c>TextStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Assign(Alternet.Editor.Wpf.ITextStrings)">
            <summary>
            Copies the contents from another <c>ITextStrings</c> object.
            </summary>
            <param name="source">Specifies <c>ITextStrings</c> to assign.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual string stored in the collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="item">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="item">Specifies string to insert.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.RemoveAt(System.Int32)">
            <summary>
            Removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Count">
            <summary>
            Represents number of strings in the collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Add(System.String)">
            <summary>
            Adds a new item to the end of string collection.
            </summary>
            <param name="item">String to be added to the end of the collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Clear">
            <summary>
            Removes all items from string collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Contains(System.String)">
            <summary>
            Indicates whether string collection contains specified string.
            </summary>
            <param name="item">String to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire string collection to a another array, starting at the specified index of the target array.
            </summary>
            <param name="array">The Array that is the destination of the elements copied from string collection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Remove(System.String)">
            <summary>
            Removes the first occurrence of given string from the string collection.
            </summary>
            <param name="item">String to remove.</param>
            <returns>True if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.Boolean)">
            <summary>
            Searches for given text.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <param name="searchHiddenLines">Specifies if hidden lines should be processed.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetFlowDocument(Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            Gets FlowDocument object describes TextStrings content accordingly to specified settings.
            </summary>
            <param name="options">Specifies settings to describe ITextSource content.</param>
            <returns>FlowDocument describes TextStrings content.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves text content to the specific file with specified exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the given file with specified exported and specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.TextWriter,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads content from the given file with specified exporter.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.TextReader,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTabString(System.String@,Alternet.Syntax.StringItemInfo[]@,System.Boolean,Alternet.Syntax.ITextUndoList)">
            <summary>
            Converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="str">Text to convert.</param>
            <param name="data">Color data of specified string.</param>
            <param name="needData">Indicates whether method should return color data.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs).</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTabString(System.String)">
            <summary>
            Converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTabString(System.String,Alternet.Syntax.ITextUndoList)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs).</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetPrevTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetIndentString(System.Int32,System.Int32)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.TabPosToPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.PosToTabPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.PosToTabPosOriginal(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.DelimTable">
            <summary>
            Represents delimiters as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Delimiters">
            <summary>
            Gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.IsWhitespace(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Char[])">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="pos">Specifies an index of the line.</param>
            <param name="line">Specifies an index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the default value.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.TextStrings.Owner">
            <summary>
            Gets or set the <c>TextEditor</c> control that owns this collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.AddNotifier(Alternet.Common.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.RemoveNotifier(Alternet.Common.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Update">
            <summary>
            Updates an object state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.TextStrings.Notify(System.EventArgs)">
            <summary>
            Notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoData">
            <summary>
            Represents data for a single undo operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoData.#ctor(Alternet.Editor.Wpf.UndoOperation,System.Object)">
            <summary>
            Initializes a new instance of the <c>UndoData</c> class with specified parameters.
            </summary>
            <param name="operation">Specifies type of the operation that can be undone.</param>
            <param name="data">The object stored within the <c>UndoData</c>.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.Operation">
            <summary>
            Represents the type of the undo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.Reason">
            <summary>
            Represents the reason of the undo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.UpdateCount">
            <summary>
            Number of undo operations that can be executed as single block.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.UndoFlag">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.Data">
            <summary>
            Represents the object associated with this <c>UndoData</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoData.Position">
            <summary>
            Represents the position of the undoable operation within the text.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoList.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.BeginUpdate">
            <summary>
            Prevents undo list updating until calling <c>IUndoList.EndUpdate</c> method.
            </summary>
            <returns>Number of undo list updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.EndUpdate">
            <summary>
            Re-enables undo list updating, that was turn of by calling <c>IUndoList.BeginUpdate</c> method.
            </summary>
            <returns>Number of undo list updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.DisableUpdate">
            <summary>
            Prevents undo list updating until calling <c>IUndoList.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.EnableUpdate">
            <summary>
            Re-enables undo list updating, that was turn of by calling <c>IUndoList.BeginUpdate</c> method.
            </summary>
            <returns>Number of gutter updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.Update">
            <summary>
            Rescans the undo list.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UndoList.UndoCount">
            <summary>
            Determines number of undo operations stored in the list.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.Clear">
            <summary>
            Clears entire collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.Add(Alternet.Editor.Wpf.IUndoData)">
            <summary>
            Adds an item to the collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UndoList.RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index.
            </summary>
            <param name="index">Specifies index of item to remove.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.VisualTheme">
            <summary>
            Represents a single color theme.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.#ctor">
            <summary>
            Initailizes new instance of ColorTheme with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.#ctor(System.String,System.Boolean,Alternet.Editor.Wpf.MediaFont,Alternet.Syntax.Lexer.ILexStyles)">
            <summary>
            Initializes new instance of ColorTheme with given parameters.
            </summary>
            <param name="name">Color theme name.</param>
            <param name="readOnly">A flag that indicates whether or not the color theme should be modified.</param>
            <param name="font">Font of this new instance.</param>
            <param name="lexStyles">LexStyle array.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.Name">
            <summary>
            Gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.ImagesColor">
            <summary>
            Gets or sets the type of background (light or dark) for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.ReadOnly">
            <summary>
            Gets or sets a bool value that indicates whether
            or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.Font">
            <summary>
            Gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.LexStyles">
            <summary>
            Gets or sets the LexStyle array used for the
            color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.LineStyles">
            <summary>
            Gets or sets the IEditLineStyle array used for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.VisualTheme.Item(System.String)">
            <summary>
            Specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="name">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the name parameter, or null for an invalid name.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.Dispose">
            <summary>
            Release resources of the <c>IVisualTheme</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.Assign(Alternet.Editor.Wpf.IVisualTheme)">
            <summary>
            Copies the content from another <c>IVisualTheme</c> object.
            </summary>
            <param name="source">Specifies <c>IVisualTheme</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.LoadFromEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Changes values stored in the <c>IVisualTheme</c> accordingly to property values of <c>TextEditor</c> control.
            </summary>
            <param name="edit">Specifies <c>TextEditor</c> to copy properties from.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.ApplyToCodeCompletionBox(Alternet.Editor.Wpf.ICodeCompletionBox)">
            <summary>
            Assigns color teme properties to a given <c>ICodeCompletionBox</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionBox">Specifies <c>ICodeCompletionBox</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.ApplyToCodeCompletionButton(Alternet.Editor.Wpf.ICodeCompletionButton)">
            <summary>
            Assigns color teme properties to a given <c>ICodeCompletionButton</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionButton">Specifies <c>ICodeCompletionButton</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.ApplyToCodeCompletionHint(Alternet.Editor.Wpf.ICodeCompletionHint)">
            <summary>
            Assigns color teme properties to a given <c>ICodeCompletionHint</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionHint">Specifies <c>ICodeCompletionHint</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.ApplyLexStylesToEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Assigns only lex style properties to a given <c>TextEditor</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="edit">Specifies <c>TextEditor</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.VisualTheme.ApplyToEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Assigns color teme properties to a given <c>TextEditor</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="edit">Specifies <c>TextEditor</c> to assign settings.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.VisualThemeConsts">
            <summary>
            Contains default string constants for common requirements.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.VisualThemeImagesColor">
            <summary>
            Defines possible types of the visual color themes.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeImagesColor.Light">
            <summary>
            Specifies light color theme.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeImagesColor.Dark">
            <summary>
            Specifies dark color theme.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.VisualThemeType">
            <summary>
            Specifies Visual Theme type
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeType.None">
            <summary>
            Specifies no theme.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeType.Light">
            <summary>
            Specifies light visual theme.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeType.Dark">
            <summary>
            Specifies dark visual theme.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeType.VisualStudioCode">
            <summary>
            Specifies a Visual Studio Code-style visual theme.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.VisualThemeType.Custom">
            <summary>
            Specifies custom visual theme.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UserMarginTextEventArgs">
            <summary>
            Provides data for the <c>GetUserMarginText</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.UserMarginTextEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>UserMarginTextEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">Usermargin text.</param>
            <param name="line">Number of line inside edit control.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.UserMarginTextEventArgs.Text">
            <summary>
            Gets or sets usermargin text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UserMarginTextEventArgs.Line">
            <summary>
            Gets a line index for which information is to be displayed on the UserMargin.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.UserMarginTextEventArgs.Handled">
            <summary>
            Gets or sets a boolean value indicating whether event is handled.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.WhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.#ctor">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.#ctor(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with a specified owner.
            </summary>
            <param name="owner"><c>TextEditor</c> that owns this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.BeginUpdate">
            <summary>
            Prevents WhiteSpace updating until calling <c>WhiteSpace.EndUpdate</c> method.
            </summary>
            <returns>Number of WhiteSpace updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>WhiteSpace.BeginUpdate</c> method.
            </summary>
            <returns>Number of WhiteSpace updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.DisableUpdate">
            <summary>
            Prevents WhiteSpace updating until calling <c>WhiteSpace.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.EnableUpdate">
            <summary>
            Re-enables WhiteSpace updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.Update">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.Visible">
            <summary>
            Gets or sets a value indicating whether white space symbols are visible in the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.TabSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.SpaceSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.LongSpaceSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.EolSymbol">
            <summary>
            Gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.EofSymbol">
            <summary>
            Gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.WordWrapSymbol">
            <summary>
            Gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.SpaceString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.LongSpaceString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.TabString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.EolString">
            <summary>
            Represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.EofString">
            <summary>
            Represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.WordWrapString">
            <summary>
            Represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.WhiteSpace.SymbolColor">
            <summary>
            Gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.Assign(Alternet.Editor.Wpf.IWhiteSpace)">
            <summary>
            Copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetTabSymbol">
            <summary>
            Resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetSpaceSymbol">
            <summary>
            Resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetLongSpaceSymbol">
            <summary>
            Resets the <c>LongSpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetEolSymbol">
            <summary>
            Resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetEofSymbol">
            <summary>
            Resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetWordWrapSymbol">
            <summary>
            Resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.WhiteSpace.ResetSymbolColor">
            <summary>
            Resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICategorizedCodeCompletionBox">
            <summary>
            Represents properties and methods of a popup window that displays code completion information presented in the form of a categorized list.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICategorizedCodeCompletionBox.CategoryFilterUiVisible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a category filter should be displayed in the code completion box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICategorizedCodeCompletionBox.CategoriesIncludedInFilter">
            <summary>
            When implemented by a class, gets or sets a list of categories to be displayed in the code completion box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICategorizedCodeCompletionBox.DefaultCategoriesIncludedInFilterPredicate">
            <summary>
            When implemented by a class, gets or sets a function which determines default categories to be displayed in the code completion box.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.CodeCompletionFlags">
            <summary>
            Defines behavior of the code completion popup window.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.CloseOnEscape">
            <summary>
            Specifies that code completion popup window should be closed when user presses the ESC key.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnEnter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses the ENTER key.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.CloseOnMouseLeave">
            <summary>
            Specifies that code completion popup window should be closed when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.CloseOnLostFocus">
            <summary>
            Specifies that code completion popup window should be closed when popup window lost focus.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnClick">
            <summary>
            Specifies that code completion popup window should accept its result when a user clicks the popup.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnDblClick">
            <summary>
            Specifies that code completion popup window should accept its result when user double clicks the popup.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.FeetToScreen">
            <summary>
            Specifies that code completion popup window should be fitted to screen when popups.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.KeepActive">
            <summary>
            Indicates whether hint window remains visible until closed manually.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnDelimiter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses delimiter key.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnTab">
            <summary>
            Specifies that code completion popup window should accept its result when user presses tab.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnSpace">
            <summary>
            Specifies that code completion popup window should accept its result and suppress the space key when user presses space.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.ForceSelection">
            <summary>
            Specifies that code completion popup window should force selection first item.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.CodeCompletionFlags.AcceptOnLostFocus">
            <summary>
            Specifies that code completion popup window should accept its result when it closes after some other control is focused.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletion">
            <summary>
            Represents properties and methods to provide code completion list box/tooltip for the Editor's content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletion.NeedCodeCompletion">
            <summary>
            When implemented by a class, occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletion.CodeSnippetInserted">
            <summary>
            When implemented by a class, occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletion.IsCodeCompletionWindowFocused">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletion.CodeCompletionBox">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletion.CodeCompletionHint">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletion.CodeCompletionChars">
            <summary>
            When implemented by a class, represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ShowCodeCompletionBox(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ShowCodeCompletionBox(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.CodeCompletionType,System.Drawing.Point)">
            <summary>
            When implemented by a class, shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Position to show code completion popup window.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ShowCodeCompletionHint(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,Alternet.Syntax.Lexer.ILexer)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ShowCodeCompletionHint(Alternet.Syntax.CodeCompletion.ICodeCompletionProvider,System.Drawing.Point,Alternet.Syntax.Lexer.ILexer)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="position">Position to display the hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.IsValidText(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether text at the specified position is valid (that is does not contain comments or string constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.CompleteWord">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content and locates single member, if possible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ListMembers">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.QuickInfo">
            <summary>
            When implemented by a class, displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.ParameterInfo">
            <summary>
            When implemented by a class, displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.CodeSnippets">
            <summary>
            When implemented by a class, displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.CodeCompletionWindowFocused(System.Windows.Forms.Control@)">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <param name="control">Returns control that has focus.</param>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.CodeCompletion(Alternet.Syntax.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for the code completion event.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletion.InsertCodeSnippet(Alternet.Syntax.CodeCompletion.ICodeSnippet,System.Drawing.Point)">
            <summary>
            Inserts Code Snippet at the given position in the text
            </summary>
            <param name="snippet">Code Snippet to insert</param>
            <param name="pos">Text Position</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionBox">
            <summary>
            Represents properties and methods to display a popup window containing Code Completion information presented in the form of a list.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionBox.SelectionChanged">
            <summary>
            When implemented by a class, occurs when index specifying the currently selected item is changed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.CompletionHint">
            <summary>
            When implemented by a class, represents CodeCompletion hint object used to display hints next to completion box.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.List">
            <summary>
            When implemented by a class, represents a content container for <c>ICodeCompletionBox</c> popup control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.CompletionToolTip">
            <summary>
            When implemented by a class, represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.Columns">
            <summary>
            When implemented by a class, represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion ListBox.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.ShowTabs">
            <summary>
            When implemented by a class, gets or sets boolean value that indicates whether codecompletion window should display additional tabs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.DropDownCount">
            <summary>
            When implemented by a class, gets or sets a value that specifies maximal visible index of the ListBox items within the popup control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.Filtered">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ICodeCompletionBox</c> should filter its content using <c>Filer</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.Filter">
            <summary>
            When implemented by a class, gets or sets filter string used to filter <c>ICodeCompletionBox</c> content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionBox.Sorted">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the items in the <c>ICodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionBox.ClearColumns">
            <summary>
            When implemented by a class, removes all columns from the <c>ICodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionBox.AddColumn">
            <summary>
            When implemented by a class, adds a new column to the <c>ICodeCompletionBox</c> column collection.
            </summary>
            <returns>New added column.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionBox.InsertColumn(System.Int32)">
            <summary>
            When implemented by a class, inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionBox.RemoveColumnAt(System.Int32)">
            <summary>
            When implemented by a class, removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionBox.ResetDropDownCount">
            <summary>
            When implemented by a class, resets the <c>DropDownCount</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionButton">
            <summary>
            Represents properties and methods of a popup window that displays code completion information presented in the form of drop-down button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionButton.IsDropDown">
            <summary>
            When implemented by a class, determines if button menu is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionButton.CompletionButton">
            <summary>
            When implemented by a class, represents a content container for <c>ICodeCompletionButton</c> popup control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionButton.Menu">
            <summary>
            When implemented by a class, gets drop down menu.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionButton.DropDown">
            <summary>
            When implemented by a class, displays button's popup menu.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionColumn">
            <summary>
            Represents properties and methods to identify individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionColumn.Name">
            <summary>
            When implemented by a class, gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionColumn.FontStyle">
            <summary>
            When implemented by a class, gets or sets font style of the column.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionColumn.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the column.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionColumn.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionColumn.ResetFontStyle">
            <summary>
            When implemented by a class, resets <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionColumn.ResetForeColor">
            <summary>
            When implemented by a class, resets <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionColumn.ResetVisible">
            <summary>
            When implemented by a class, resets <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionHint">
            <summary>
            Represents properties and methods to display a popup window containing Code Completion information presented in the form of a tooltip window.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionHint.HyperTextClick">
            <summary>
            When implemented by a class, occurs when a user clicks on hypertext in the hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.AutoHide">
            <summary>
            When implemented by a class, gets or sets a value that indicates whether <c>ICodeCompletionHint</c> should be closed after some period of time.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.Visible">
            <summary>
            When implemented by a class, shows or hides hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.AutoHidePause">
            <summary>
            When implemented by a class, gets or sets a value that specifies delay, in milliseconds, between displaying and hiding popup hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.Enabled">
            <summary>
            When implemented by a class, enables or disables the hint.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.InnerControl">
            <summary>
            When implemented by a class, represents <c>CodeCompletionHintControl</c> control contained in popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionHint.Lexer">
            <summary>
            When implemented by a class, gets or sets an object that can make lexical analysis for the hint control content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionHint.ResetAutoHide">
            <summary>
            When implemented by a class, resets the <c>AutoHide</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionHint.ResetAutoHidePause">
            <summary>
            When implemented by a class, resets the <c>AutoHidePause</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeCompletionWindow">
            <summary>
            Represents properties and methods to display a popup window containing Code Completion information.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.ClosePopup">
            <summary>
            When implemented by a class, occurs when the popup window is closed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.ShowPopup">
            <summary>
            When implemented by a class, occurs when the popup window is displayed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.Disposed">
            <summary>
            When implemented by a class, occurs when the popup window is disposed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message.
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICodeCompletionWindow.HwndSourceInitialized">
            <summary>
            When implemented by a class, occurs when the popup window source initialized.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.Provider">
            <summary>
            When implemented by a class, gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.Sizeable">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the border of the popup window is resizable.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.AutoSize">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.CompletionFlags">
            <summary>
            When implemented by a class, gets or sets collection of attributes that specifies behavior of the popup window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.OwnerControl">
            <summary>
            When implemented by a class, represents a control owning the <c>ICodeCompletionWindow</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.StartPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.EndPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.DisplayPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.FontStyle">
            <summary>
            When implemented by a class, gets or sets style information for <c>ICodeCompletionWindow</c> font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.FontFamily">
            <summary>
            When implemented by a class, gets or sets family for <c>ICodeCompletionWindow</c> font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.FontSize">
            <summary>
            When implemented by a class, gets or sets size for <c>ICodeCompletionWindow</c> font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.FontStretch">
            <summary>
            When implemented by a class, gets or sets degree to which a <c>ICodeCompletionWindow</c> font is condensed or expanded on the screen.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.FontWeight">
            <summary>
            When implemented by a class, gets or sets the weight or thickness of the <c>ICodeCompletionWindow</c> font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.IsFocused">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> or it's child control has an input focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.IsVisible">
            <summary>
            When implemented by a class, indicates if window is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.CanCloseNow">
            <summary>
            When implemented by a class, indicates if popup window can be closed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.Size">
            <summary>
            When implemented by a class, returns size of the window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeCompletionWindow.Window">
            <summary>
            When implemented by a class, returns itself as a Window control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.Popup">
            <summary>
            When implemented by a class, displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.PopupAt(System.Double,System.Double)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.PopupAt(System.Windows.Point)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.PopupAt(System.Windows.Point,Alternet.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
            <param name="provider">Specifies source of the content for this window</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.Close(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.CloseDelayed(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on changing position in the popup window.
            </summary>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            When implemented by a class, retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ResetContent">
            <summary>
            When implemented by a class, updates <c>ICodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ResetSizeable">
            <summary>
            When implemented by a class, resets the <c>Sizeable</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ResetAutoSize">
            <summary>
            When implemented by a class, resets the <c>AutoSize</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ResetCodeCompletionFlags">
            <summary>
            When implemented by a class, resets the <c>CodeCompletions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.PerformSearch">
            <summary>
            When implemented by a class, performs searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeCompletionWindow.ContainsMouseCursor(System.Int32)">
            <summary>
            When implemented by a class, determines whether control contains mouse position, with specified therehold.
            </summary>
            <param name="therehold">Specifies size, in pixels, of the inflated boundary of the control.</param>
            <returns></returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICompletionButton">
            <summary>
            Represents properties and methods of button control that appears in the code completion window.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICompletionButton.Menu">
            <summary>
            When implemented by a class, gets the menu items of the <c>ICompletionButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICompletionButton.Provider">
            <summary>
            When implemented by a class, represents the object that provides data for code completion.
            <seealso cref="T:Alternet.Syntax.CodeCompletion.ICodeCompletionProvider"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICompletionButton.ResetContent">
            <summary>
            When implemented by a class, updates <c>ICompletionButton</c> content from its Provider.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICompletionButton.GetSelectedItem(System.Boolean)">
            <summary>
            When implemented by a class, returns currently selected item.
            </summary>
            <param name="acceptIfFocused">specifies if focused item will be returned</param>
            <returns>Currently selected item.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IAutoCorrect">
            <summary>
            Represents properties and methods allowing to auto correct words when typing.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IAutoCorrect.AutoCorrect">
            <summary>
            When implemented by a class, occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IAutoCorrect.AutoCorrectDelimiters">
            <summary>
            When implemented by a class, gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IAutoCorrect.AutoCorrection">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IAutoCorrect.HasAutoCorrection(System.String,System.String@)">
            <summary>
            When implemented by a class, checks whether specified word has correction.
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeActions">
            <summary>
            Represents properties and methods to handle syntax error collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.GetCodeFixes(Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            When implemented by a class, gets code fixes for a given syntax error.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <returns>List of code fixes for a given error if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.GetCodeFixesAsync(Alternet.Syntax.ISyntaxError,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When implemented by a class, gets code fixes for a given syntax error in async mode.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of code fixes for a given error if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.HasCodeFixes(Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            When implemented by a class, determines if code fixes are available for a given syntax error.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <returns>True if code fixes are available, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.HasCodeFixesAsync(Alternet.Syntax.ISyntaxError,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When implemented by a class, determines if code fixes are available for a given syntax error in async mode.
            </summary>
            <param name="error">Specifies syntax error.</param>
            <param name="allDocuments">Specifies if all documents in the solution need to be processed.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if code fixes are available, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.FindCodeActions(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Alternet.Syntax.ISyntaxError,System.Boolean)">
            <summary>
            When implemented by a class, locates and highlights available code fixes and code refactors for given position in the texts.
            </summary>
            <param name="position">Start position within the text.</param>
            <param name="startPos">Start position within the text.</param>
            <param name="endPos">End position within the text.</param>
            <param name="error">Syntax error within the text.</param>
            <param name="allDocuments">Specifies all documents in the solution needs to be processed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeActions.HighlightCodeActions">
            <summary>
            When implemented by a class, highlights code fixes/refactors if needed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.OutlineOptions">
            <summary>
            Defines appearance and behavior of the outline text sections.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.DrawOnGutter">
            <summary>
            Specifies that control should paint outline images and lines on gutter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.DrawLines">
            <summary>
            Specifies that control should paint lines for expanded outline section.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.DrawButtons">
            <summary>
            Specifies that control should paint the outline buttons substituting content of the collapsed section.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.ShowHints">
            <summary>
            Specifies that control should display text of the collapsed outline section in the popup window when mouse pointer is over the outline button.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.HighlightOnMove">
            <summary>
            Specifies that control should highlight outlined section when mouse pointer is over the outline area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.HideOnMouseLeave">
            <summary>
            Specifies that the control should hide the outline lines and buttons when a user hovers the mouse button.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.DrawOutlineImage">
            <summary>
            Specifies that control should paint the outline image instead of button and lines.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.HighlightCollapsedLine">
            <summary>
            Specifies that control should highlight collapsed region.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.OutlineOptions.DrawButtonsBorder">
            <summary>
            Specifies that control should paint the border around outline buttons substituting content of the collapsed section.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICollapsable">
            <summary>
            Represents properties and methods to affects appearance and behavior of outline sections within Edit control.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICollapsable.Expanding">
            <summary>
            When implemented by a class, occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ICollapsable.Collapsing">
            <summary>
            When implemented by a class, occurs when user attempts collapse outline section.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICollapsable.CollapsedCount">
            <summary>
            When implemented by a class, returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICollapsable.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICollapsable.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.UnOutline(System.Drawing.Point)">
            <summary>
            When implemented by a class, removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.UnOutline(System.Int32)">
            <summary>
            When implemented by a class, removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.UnOutline">
            <summary>
            When implemented by a class, removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRange(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRange(System.Int32)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.IsExpanded(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.IsCollapsed(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.IsVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.IsVisible(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Collapse(System.Int32)">
            <summary>
            When implemented by a class, collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.Expand(System.Int32)">
            <summary>
            When implemented by a class, expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.EnsureExpanded(System.Int32)">
            <summary>
            When implemented by a class, makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.EnsureExpanded(System.Drawing.Point)">
            <summary>
            When implemented by a class, makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.FullExpand">
            <summary>
            When implemented by a class, expands all outlining sections.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.FullExpand(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.FullCollapse(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.ToggleOutlining(System.Collections.Generic.IList{Alternet.Common.IRange},Alternet.Syntax.IOutlineRange)">
            <summary>
            When implemented by a class, toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expands some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineHint(Alternet.Syntax.IOutlineRange)">
            <summary>
            When implemented by a class, returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Int32)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.SetOutlineRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Boolean)">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.CanExpand(System.Int32)">
            <summary>
            When implemented in a class, returns boolean value indicating that outline section at given line can be expanded.
            </summary>
            <param name="line">Line index.  </param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.CanExpand(Alternet.Syntax.IOutlineRange)">
            <summary>
            When implemented in a class, returns boolean value indicating that given outline section can be expanded.
            </summary>
            <param name="range">Specifies outline range.</param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.CanCollapse(System.Int32)">
            <summary>
            When implemented in a class, returns boolean value indicating that outline section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.ResetAllowOutlining">
            <summary>
            When implemented by a class, resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICollapsable.ResetOutlineOptions">
            <summary>
            When implemented by a class, resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IDisplayStrings">
            <summary>
            Represents properties and methods for a collection of visible strings in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.DisplayCount">
            <summary>
            When implemented by a class, returns number of visible lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.Lines">
            <summary>
            When implemented by a class, gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.MaxLineWidth">
            <summary>
            When implemented by a class, gets width of the largest line in the control's text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.LineEnd">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if the text position can be set to the end of the wrapped line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.Loaded">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if the display strings was fully formatted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.SuppressTabs">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if conversion from tabs to spaces is suppressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.AllowHiddenLines">
            <summary>
            Gets or sets a value indicating whether hidden lines are enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IDisplayStrings.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="position">The Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.PointToDisplayPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="position">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="wrapEnd">Reserved for internal use.</param>
            <param name="rangeStart">Reserved for internal use.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.GetColorData(System.Int32)">
            <summary>
            When implemented by a class, returns color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <returns>Color information of specified line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.PositionChanged(Alternet.Editor.Wpf.UpdateReason,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on changing position in the editor.
            </summary>
            <param name="reason">Reason of changing position.</param>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, responds on deleting some block of lines within the editor control.
            </summary>
            <param name="rect">Rectangle area of block being deleted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.IsPointVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position is invisible; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.IsPointCollapsed(System.Drawing.Point,Alternet.Common.IRange@)">
            <summary>
            When implemented by a class, indicates whether given position is in invisible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <param name="range">Receives range contains the point. Null if specified position is visible.</param>
            <returns>True if position is invisible due to outlining; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.UpdateNeeded">
            <summary>
            When implemented by a class, forces <c>IDisplayStrings</c> to recalculate its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.Notify(Alternet.Editor.Wpf.NotifyState,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, notifies editor about updating <c>IDisplayStrings</c> state.
            </summary>
            <param name="state">Changes reason.</param>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.GetStringAndColorData(System.Int32,System.String@,Alternet.Syntax.StringItemInfo[]@)">
            <summary>
            When implemented by a class, returns text and color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <param name="text">Returns text of the given line.</param>
            <param name="data">Returns color information of specified line.</param>
            <returns>Corresponding index within <c>ISyntaxStrings</c>collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.UpdateHiddenLines">
            <summary>
            When implemented by a class, updates outline ranges for the hidden lines
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IDisplayStrings.GetVisibleLines(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, gets max range containing visible lines
            </summary>
            <param name="first">First visible line</param>
            <param name="last">Last visible line</param>
            <returns>True if there's any visible lines in the editor; otherwise false</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditBraceMatching">
            <summary>
            Represents extended properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.ForeColor">
            <summary>
            When implemented by a class, gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.BackColor">
            <summary>
            When implemented by a class, gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.FontStyle">
            <summary>
            When implemented by a class, gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.UseRoundRect">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.BracesOptions">
            <summary>
            When implemented by a class, gets or sets options specifying appearance and behavior of matching braces within Edit control.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.OpenBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing an open brace.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditBraceMatching.ClosingBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing a closing brace.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditBraceMatching.Assign(Alternet.Editor.Wpf.IEditBraceMatching)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditBraceMatching</c> object.
            </summary>
            <param name="source">Specifies <c>IEditBraceMatching</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditBraceMatching.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditBraceMatching.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditBraceMatching.ResetFontStyle">
            <summary>
            When implemented by a class, resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditBraceMatching.ResetUseRoundRect">
            <summary>
            When implemented by a class, resets the <c>UseRoundRect</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditHyperText">
            <summary>
            Represents extended properties and methods to operate hypertext section within the text.
            <seealso cref="T:Alternet.Editor.Wpf.IHyperText"/>
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IEditHyperText.JumpToUrl">
            <summary>
            When implemented by a class, occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditHyperText.ShowHints">
            <summary>
            When implementing by a class, gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditHyperText.UrlStyle">
            <summary>
            When implemented by a class, gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditHyperText.UrlColor">
            <summary>
            When implemented by a class, gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditHyperText.HighlightHyperText">
            <summary>
            When implemented by a class, gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.Assign(Alternet.Editor.Wpf.IEditHyperText)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditHyperText</c> object.
            </summary>
            <param name="source">Specifies <c>IEditHyperText</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.UrlJump(System.String)">
            <summary>
            When implemented by a class, tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.ResetUrlStyle">
            <summary>
            When implemented by a class, resets the <c>UrlStyle</c> to the default value.
            </summary>
            <remarks>Use JumpToUrl to suppress launching default browser.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.ResetUrlColor">
            <summary>
            When implemented by a class, resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.IsUrlAtPoint(System.Double,System.Double)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.IsUrlAtPoint(System.Double,System.Double,System.String@)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditHyperText.IsUrlAtTextPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check in text coordinates.</param>
            <param name="y">The Y-constituent of Point value to check in text coordinates.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineStyleOptions">
            <summary>
            Defines appearance of lines with some line style.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineStyleOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineStyleOptions.BeyondEol">
            <summary>
            Specifies that line style applicable beyond end of line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineStyleOptions.InvertColors">
            <summary>
            Specifies that background and foreground colors should be interchanged.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.LineStyleOptions.DisplayImageOnMultipleLines">
            <summary>
            Specifies that gutter images should be displayed on multiple lines.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditLineStyle">
            <summary>
            Represents properties and methods for a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.BackColor">
            <summary>
            When implemented by a class, gets or sets background color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.PenColor">
            <summary>
            When implemented by a class, gets or sets pen color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditLineStyle.Options">
            <summary>
            When implemented by a class, gets or sets display options for the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.Assign(Alternet.Editor.Wpf.IEditLineStyle)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyle</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.ResetImageIndex">
            <summary>
            When implemented by a class, resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.GetBackColor(System.Drawing.Color)">
            <summary>
            When implemented by a class, returns <c>BackColor</c> or <c>ForeColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>ForeColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>BackColor</c>.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyle.GetForeColor(System.Drawing.Color)">
            <summary>
            Returns <c>ForeColor</c> or <c>BackColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>BackColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>ForeColor</c>.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditLineStyles">
            <summary>
            Represents properties and methods for a collection of the <c>ILineStyle</c> objects each one specifying a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyles.Assign(Alternet.Editor.Wpf.IEditLineStyles)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditLineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyles</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyles.IndexOfName(System.String)">
            <summary>
            When implemented by a class, returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyles.AddLineStyle">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditLineStyles.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Alternet.Editor.Wpf.LineStyleOptions)">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>ILineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>ILineStyle</c>.</param>
            <param name="backColor">Background color of new <c>ILineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>ILineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>ILineStyle</c>.</param>
            <param name="options">Options of new <c>ILineStyle</c>.</param>
            <returns>Index of the added element in the <c>ILineStyle</c> collection.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditPageHeader">
            <summary>
            Represents properties and methods for header/footer parts of edit page.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IEditPageHeader.DrawHeader">
            <summary>
            When implemented by a class, occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.LeftText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the left part of the header/footer area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.CenterText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the center of the header/footer area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.RightText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the right part of the header/footer area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.Font">
            <summary>
            When implemented by a class, gets or sets font used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.FontColor">
            <summary>
            When implemented by a class, gets or sets font color used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.Offset">
            <summary>
            When implemented by a class, gets or sets indentation of the primary text edge.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>IPageHeader</c> is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.ReverseOnEvenPages">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>LeftText</c> and <c>RightText</c> interchanging on even page.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditPageHeader.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditPageHeader.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.Assign(Alternet.Editor.Wpf.IEditPageHeader)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPageHeader</c> object.
            </summary>
            <param name="source">Specifies <c>IPageHeader</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.ResetFont">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Font</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.ResetOffset">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Offset</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.ResetFontColor">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.FontColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.ResetReverseOnEvenPages">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.ReverseOnEvenPages</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditPageHeader.Paint(Alternet.Common.IPainter,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, draws page header/footer on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of header/footer to draw on.</param>
            <param name="pageIndex">Index of page which header/footer is drawing.</param>
            <param name="pageCount">Total number of pages.</param>
            <param name="pageNumbers">Specifies whether header/footer should draw page number.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.RulerUnits">
            <summary>
            Defines units for the ruler.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerUnits.Milimeters">
            <summary>
            Specifies that ruler marks are measured in millimeters.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerUnits.Inches">
            <summary>
            Specifies that ruler marks are measured in inches.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerUnits.Pixels">
            <summary>
            Specifies that ruler marks are measured in pixels.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerUnits.Characters">
            <summary>
            Specifies that ruler marks are measured in characters.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.RulerOptions">
            <summary>
            Defines Edit ruler behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerOptions.Discrete">
            <summary>
            Specifies that ruler indents changes its position in discrete steps.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerOptions.AllowDrag">
            <summary>
            Allows dragging ruler indentations.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.RulerOptions.DisplayDragLine">
            <summary>
            Specifies dotted line to be displayed while ruler indentation being dragged.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditRuler">
            <summary>
            Represents properties and methods of Edit control's ruler.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IEditRuler.Change">
            <summary>
            When implemented by a class, occurs when some of ruler indentations has changed its position due to the dragging operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.IndentBackColor">
            <summary>
            When implemented by a class, gets or sets background color of indentation parts of the ruler.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.Vertical">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether ruler has vertical or horizontal direction.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.PageStart">
            <summary>
            When implemented by a class, gets or sets beginning of the page part of the ruler.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.PageWidth">
            <summary>
            When implemented by a class, gets or sets width, in pixels between left and right indentations indicating width of the page.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.RulerStart">
            <summary>
            When implemented by a class, gets or sets position, in pixels, of left indentation specifying start of the page.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.RulerWidth">
            <summary>
            When implemented by a class, gets or sets ruler width.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.MarkWidth">
            <summary>
            When implemented by a class, gets or sets default distance between adjacent marks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.Units">
            <summary>
            When implemented by a class, gets or sets ruler measurement units.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.Options">
            <summary>
            When implemented by a class, gets or sets <c>RulerOptions</c> determining ruler behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.IsDragging">
            <summary>
            When implemented by a class, indicates whether some of ruler indentation is in dragging state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditRuler.Anchor">
            <summary>
            When implemented by a class, gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.Assign(Alternet.Editor.Wpf.IEditRuler)">
            <summary>
            When implemented by a class, copies the contents of another <c>IEditRuler</c> object.
            </summary>
            <param name="source">Specifies <c>IEditRuler</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.ResetUnits">
            <summary>
            When implemented by a class, resets the <c>Units</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.ResetIndentBackColor">
            <summary>
            When implemented by a class, resets the <c>IndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditRuler.SendToBack">
            <summary>
            When implemented by a class, sends the control to the back of the z-order.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditSpelling">
            <summary>
            Represents properties and methods to allowing to visually highlight misspelled words in the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSpelling.SpellColor">
            <summary>
            When implemented by a class, gets or sets a value representing color to draw wavy underlines under misspelled words.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSpelling.CheckSpelling">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSpelling.Assign(Alternet.Editor.Wpf.IEditSpelling)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditSpelling</c> object.
            </summary>
            <param name="source">Specifies <c>IEditSpelling</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSpelling.ResetSpellColor">
            <summary>
            When implemented by a class, resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEditSyntaxPaint">
            <summary>
            Represents properties and methods to paint editor's content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.ReadonlyForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the readonly state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.ReadonlyBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.DisabledForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the disabled state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.DisabledBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the disabled state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.DrawColumnsIndent">
            <summary>
            When implemented by a class, indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.ColumnsIndentForeColor">
            <summary>
            When implemented by a class, specifies columns indentation color.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEditSyntaxPaint.SyntaxErrorsHints">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should display hint over each syntax error in it's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.PaintLineBookMarks(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, paints collection of line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw line bookmarks.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.PaintWindow(Alternet.Common.IPainter,System.Int32,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, paints editor's content.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line of content to paint.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw content from.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
            <param name="inPrinting">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.GetRectRegion(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, returns region corresponding to given rectangle.
            </summary>
            <param name="rect">Rectangle to check.</param>
            <returns>Region corresponding to given rectangle.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.GetRectRegion(Alternet.Editor.Wpf.SelectionType,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, returns region corresponding to given rectangle.
            </summary>
            <param name="selectionType">Specifies selection type.</param>
            <param name="rect">Rectangle to check.</param>
            <param name="topLeftEnd">Boolean value indicating if the region's topleft corner should be calculated taking into account end of the wrapped line.</param>
            <param name="bottomRightEnd">Boolean value indicating if the region's bottomright corner should be calculated taking into account end of the wrapped line.</param>
            <returns>Region corresponding to given rectangle.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetDrawColumnsIndent">
            <summary>
            When implemented by a class, resets the <c>DrawColumnsIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetColumnsIndentForeColor">
            <summary>
            When implemented by a class, resets the <c>ColumnsIndentForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetDisabledBackColor">
            <summary>
            When implemented by a class, resets the <c>DisabledBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetDisabledForeColor">
            <summary>
            When implemented by a class, resets the <c>DisabledForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetReadonlyBackColor">
            <summary>
            When implemented by a class, resets the <c>ReadonlyBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetReadonlyForeColor">
            <summary>
            When implemented by a class, resets the <c>ReadonlyForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEditSyntaxPaint.ResetSyntaxErrorsHints">
            <summary>
            When implemented by a class, resets the <c>SyntaxErrorsHints</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IFmtExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IFmtImport">
            <summary>
            Provides methods to load text content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IFmtImport.ReadFormattedText">
            <summary>
            When implemented by a class, occurs when formatted text is read.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="P:Alternet.Editor.Wpf.IFmtImport.DefaultStyle">
            <summary>
            When implemented by a class, gets or sets default font style of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IFmtImport.DefaultForeColor">
            <summary>
            When implemented by a class, defines default fore color of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IFmtImport.DefaultBackColor">
            <summary>
            When implemented by a class, defines default back color of the text.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.HitTest">
            <summary>
            Contains information about a part of the Edit control at a specified coordinate.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.None">
            <summary>
            No part.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Above">
            <summary>
            Above the Edit control client area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Below">
            <summary>
            Below the Edit control client area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Left">
            <summary>
            Left to the Edit control client area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Right">
            <summary>
            Right to the Edit control client area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Text">
            <summary>
            On the text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Selection">
            <summary>
            On the selected text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.BeyondEol">
            <summary>
            Beyond line end.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.BeyondEof">
            <summary>
            Beyond file end.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Gutter">
            <summary>
            On the gutter area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Margin">
            <summary>
            On the margin area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.GutterImage">
            <summary>
            On the gutter image.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.BookMark">
            <summary>
            On the bookmark.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.OutlineArea">
            <summary>
            On the outline area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.OutlineImage">
            <summary>
            On the outline image(plus/minus) button.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.OutlineButton">
            <summary>
            On the outline button.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.LineModificator">
            <summary>
            On the line modificator area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.LineNumber">
            <summary>
            On the line numbers area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.HyperText">
            <summary>
            On the hypertext.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.SyntaxError">
            <summary>
            Syntax error.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.HitTest.Minimap">
            <summary>
            On the minimap area.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IHitTestInfo">
            <summary>
            Contains information about an area of an Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.HitTest">
            <summary>
            When implemented by a class, gets or sets the <c>HitTest</c> that represents the area of the Edit control evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Line">
            <summary>
            When implemented by a class, gets or sets the index of line evaluated by the hit-test operation.
            Contains index of line if mouse is over text line in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Pos">
            <summary>
            When implemented by a class, gets or sets the index of character within the line evaluated by the hit-test operation.
            Contains index of line if mouse is over some text in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Item">
            <summary>
            When implemented by a class, gets or sets the <c>IStrItem</c> object evaluated by the hit-test operation.
            Contains instance of <c>IStrItem</c> object if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.String">
            <summary>
            When implemented by a class, gets or sets the text string evaluated by the hit-test operation.
            Contains string if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Word">
            <summary>
            When implemented by a class, gets or sets the word evaluated by the hit-test operation.
            Contains string if mouse is over some word in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Url">
            <summary>
            Gets the hypertext string evaluated by the hit-test operation.
            Contains string if mouse is over hypertext section in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.GutterImage">
            <summary>
            When implemented by a class, gets or sets the <c>Gutter</c> ImageIndex, evaluated by the hit-test operation.
            Contains index of image if mouse is over the gutter image; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.OutlineIndex">
            <summary>
            When implemented by a class, gets or sets the index of line where outline image is displayed, evaluated by the hit-test operation.
            Contains index of line if mouse is over the outline button; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.OutlineRange">
            <summary>
            When implemented by a class, gets or sets the <c>IOutlineRange</c> object evaluated by the hit-test operation.
            Contains instance of <c>IOutlineRange</c> object if mouse is over outline button; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.SyntaxError">
            <summary>
            When implemented by a class, gets or sets the <c>ISyntaxError</c> object evaluated by the hit-test operation.
            Contains instance of <c>ISyntaxError</c> object if mouse is over syntax error; null otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.Style">
            <summary>
            When implemented by a class, gets or sets the index of lexical style evaluated by the hit-test operation.
            Contains index of lexical style if mouse is over the text; - 1 otherwise.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHitTestInfo.TextStyle">
            <summary>
            When implemented by a class, gets or sets the set of additional flags for the text fragment evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IHitTestInfo.Reset">
            <summary>
            When implemented by a class, resets <c>HitTestInfo</c> members to their default values.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyEvent">
            <summary>
            Represents a method that will handle the key event.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyEventEx">
            <summary>
            Represents a method that will handle extended key event.
            </summary>
            <param name="param">Object containing additional event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IKeyData">
            <summary>
            Represents properties and methods describing some data attached to the particular key.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.EventName">
            <summary>
            When implemented by a class, represents a name of the action .
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.Keys">
            <summary>
            When implemented by a class, represents a key to which some action is attached.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.Param">
            <summary>
            When implemented by a class, represents an object passed as a parameter to the extended action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.State">
            <summary>
            When implemented by a class, represents a state of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.LeaveState">
            <summary>
            When implemented by a class, represents a state of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.ActionEx">
            <summary>
            When implemented by a class, represents extended action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyData.Action">
            <summary>
            When implemented by a class, represents an action that executes when the key is pressed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IKeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyList.Handlers">
            <summary>
            When implemented by a class, represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>IKeyList</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IKeyList.EventData">
            <summary>
            When implemented by a class, represents array of event handlers associated with keys.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Add(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified action.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.AddNormal(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.AddNormal(Alternet.Editor.Wpf.Keys,Alternet.Editor.Wpf.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Remove(Alternet.Editor.Wpf.Keys,System.Int32)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Remove(Alternet.Editor.Wpf.Keys)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.RemoveState(System.Int32)">
            <summary>
            When implemented by a class, removes the given state with all keys related to it.
            </summary>
            <param name="state">State of the Edit control to be removed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.Clear">
            <summary>
            When implemented by a class, removes all elements from the key list.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.ExecuteKey(Alternet.Editor.Wpf.Keys,System.Int32@)">
            <summary>
            When implemented by a class, executes action or extended action attached to the specified key.
            </summary>
            <param name="keys">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IKeyList.FindKey(Alternet.Editor.Wpf.Keys,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given key locates within the collection.
            </summary>
            <param name="keys">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.SeparatorOptions">
            <summary>
            Specifies options for highlighting and separating lines within Edit control.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.HighlightCurrentLine">
            <summary>
            Specifies that current line in Edit control should be highlighted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.HideHighlighting">
            <summary>
            Specifies that current line in Edit control should not be highlighted when control looses input focus.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.SeparateLines">
            <summary>
            Specifies that lines are visually separated in Edit control.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.SeparateWrapLines">
            <summary>
            Specifies that Line separator is drawn between lines that are dropped due to word break procedure.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.SeparateContent">
            <summary>
            Specifies that Line separator is drawn between separate sections of the text, for example between methods.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SeparatorOptions.SeparateBeyondEof">
            <summary>
            Specifies that Line separator is drawn between lines beyond end of file.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ILineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineSeparator.Options">
            <summary>
            When implemented by a class, gets or sets a set of flags customizing appearance and behavior of the <c>ILineSeparator</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineSeparator.HighlightBackColor">
            <summary>
            When implemented by a class, gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineSeparator.HighlightForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineSeparator.LineColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineSeparator.ContentDividerColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between text sections in the Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.Assign(Alternet.Editor.Wpf.ILineSeparator)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.NeedHighlight">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.NeedHide">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.ResetHighlightForeColor">
            <summary>
            When implemented by a class, resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.ResetHighlightBackColor">
            <summary>
            When implemented by a class, resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.ResetLineColor">
            <summary>
            When implemented by a class, resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.ResetContentDividerColor">
            <summary>
            When implemented by a class, resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            When implemented by a class, temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlighting from temporary highlighted line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.NeedHighlightLine(System.Int32)">
            <summary>
            When implemented by a class, gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineSeparator.NeedHighlightDisplayLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index in display coordinates.</param>
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.KeyEventType">
            <summary>
            Represents type of key event.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.KeyEventType.None">
            <summary>
            No key event.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.KeyEventType.IntParam">
            <summary>
            Key event for integer parameter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.KeyEventType.CharParam">
            <summary>
            Key event for char parameter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.KeyEventType.SelectionParam">
            <summary>
            Key event for <c>SelectionType</c> parameter.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IMacroKeyData">
            <summary>
            Represents macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMacroKeyData.FullName">
            <summary>
            When implemented by a class, gives a string representation of the action.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMacroKeyData.ParamType">
            <summary>
            When implemented by a class, gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMacroKeyData.ParamStr">
            <summary>
            When implemented by a class, represents parameter text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMacroKeyData.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>MacroKeyData</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Alternet.Editor.Wpf.IMacroKeyList">
            <summary>
            Represents list of macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMacroKeyList.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>MacroKeyList</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMacroKeyList.LinkMacros(System.Object,Alternet.Editor.Wpf.IEventHandlers)">
            <summary>
            When implemented by a class, links macro actions to the editor events.
            </summary>
            <param name="owner">Editor control contains macros.</param>
            <param name="keyHandlers">Collection of events.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IMargin">
            <summary>
            Represents properties and methods specifying appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.Position">
            <summary>
            When implemented by a class, gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.ColumnPositions">
            <summary>
            When implemented by a class, gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.Pen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of <c>IMargin</c> line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.PenColor">
            <summary>
            When implemented by a class, gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.ColumnPen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of column margin lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.ColumnPenColor">
            <summary>
            When implemented by a class, gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.ColumnsVisible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.IsDragging">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.AllowDrag">
            <summary>
            When implemented by a class,  indicates whether drag operation can performed to <c>IMargin</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMargin.ShowHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>IMargin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.Assign(Alternet.Editor.Wpf.IMargin)">
            <summary>
            When implemented by a class, copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.Paint(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws <c>IMargin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>IMargin</c> to draw.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.PaintColumn(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetPosition">
            <summary>
            When implemented by a class, resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetColumnPositions">
            <summary>
            When implemented by a class, resets the <c>ColumnPositions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetColumnsVisible">
            <summary>
            When implemented by a class, resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetAllowDrag">
            <summary>
            When implemented by a class, resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging the margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.Contains(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMargin.DragTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves <c>IMargin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.MinimapOptions">
            <summary>
            Defines options for <c>IMinimap</c> appearance.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.MinimapOptions.None">
            <summary>
            Specifies no options.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.MinimapOptions.DrawCurrentFrame">
            <summary>
            Specifies that a rectangle around the current frame should be drawn.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.MinimapOptions.DrawCurrentFrameOnMouseHover">
            <summary>
            Specifies that a rectangle around the current frame should be drawn when the mouse hovers over the minimap area.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.MinimapOptions.DrawBorder">
            <summary>
            Specifies that a border around the minimap should be drawn.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.MinimapOptions.ShowHint">
            <summary>
            Specifies that hint should be displayed when the mouse is over the minimap area.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IMinimap">
            <summary>
            Represents properties and methods specifying the appearance of the minimap in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.Options">
            <summary>
            When implemented by a class, gets or sets a <c>MinimapOptions</c> that determine minimap appearance and behaviour.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether minimap area should be painted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.IsDragging">
            <summary>
            When implemented by a class, indicates whether <c>IMinimap</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.IsScrolling">
            <summary>
            When implemented by a class, indicates whether <c>IMinimap</c> is in scrolling state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.AllowDrag">
            <summary>
            When implemented by a class, indicates whether drag operation can performed to <c>IMinimap</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IMinimap.AllowScroll">
            <summary>
            When implemented by a class, indicates whether scroll operation can performed to <c>IMinimap</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.Contains(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>IMinimap</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.ContainsBorder(System.Double,System.Double)">
            <summary>
            When implemented by a class, indicates whether left border of <c>IMinimap</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.DragTo(System.Double,System.Double)">
            <summary>
            When implemented by a class, moves <c>IMinimap</c> left border to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.ScrollTo(System.Double,System.Double)">
            <summary>
            When implemented by a class, scrolls <c>IMinimap</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.GetHint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, gets a text under the cursor to be displayed in the hint
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>Text under the cursor</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.GetDisplayPoint(System.Int32)">
            <summary>
            When implemented by a class, gets a display position at minimap y-position
            </summary>
            <param name="y">the vertical position in screen coordinates.</param>
            <returns>Text position, in display coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.OnClick(System.Drawing.Point)">
            <summary>
            When implemented by a class, handles <c>IMinimap</c> click.
            </summary>
            <param name="pos">Position of the mouse click</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging the minimap.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IMinimap.CancelScrolling">
            <summary>
            When implemented by a class, cancels scrolling the minimap.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IOutlining">
            <summary>
            Represents additional properties and methods that affects appearance and behavior of outline sections within Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.OutlineColor">
            <summary>
            When implemented by a class, gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.CollapsedLineColor">
            <summary>
            When implemented by a class, gets or sets color that is used to draw collapsed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.UseRoundRect">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether outlining buttons should be drawn with rounded corners.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining enabled.
            Added to provide a workaround for C++ CodeDOM parser.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options.
            Added to provide a workaround for C++ CodeDOM parser.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.OutlineCollapsedImageIndex">
            <summary>
            When implemented by a class, gets or sets image index to draw outline button in the collapsed state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IOutlining.OutlineExpandedImageIndex">
            <summary>
            When implemented by a class, gets or sets image index to draw outline button in the expanded state.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IOutlining.Assign(Alternet.Editor.Wpf.IOutlining)">
            <summary>
            When implemented by a class, copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IOutlining.OutlineText">
            <summary>
            When implemented by a class, tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IOutlining.UnOutlineText">
            <summary>
            When implemented by a class, removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IOutlining.ResetOutlineColor">
            <summary>
            When implemented by a class, resets the <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.PrintOptions">
            <summary>
            Defines appearance of the printed page when sending Editor's content to the printer.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.LineNumbers">
            <summary>
            Specifies that document should print with line numbers.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.PageNumbers">
            <summary>
            Specifies that document should print with page numbers.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.WordWrap">
            <summary>
            Specifies that document should print with wrapping lines if necessary.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.PrintSelection">
            <summary>
            Specifies that document should print only selected part of the text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.UseColors">
            <summary>
            Specifies that document should print using colors.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.UseSyntax">
            <summary>
            Specifies that lexical analysis should be used for the document being printed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.UseHeader">
            <summary>
            Specifies that document should print with header.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.UseFooter">
            <summary>
            Specifies that document should print with footer.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.PrintOptions.DisplayProgress">
            <summary>
            Specifies that progress of the printing operation should be displayed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IPrintingWpf">
            <summary>
            Represents properties and methods for printing and print previewing of Edit control.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IPrintingWpf.Initialized">
            <summary>
            When implemented by a class, occurs when document to print is initialized.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintingWpf.PrintDocument">
            <summary>
            When implemented by a class, represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintingWpf.Options">
            <summary>
            When implemented by a class, gets or sets <c>PrintOptions</c> that determines printing behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintingWpf.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintingWpf.PrintDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IPrintingWpf.ShowPrintOptionsDialog">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Print Options Dialog can be opened.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.Assign(Alternet.Editor.Wpf.IPrintingWpf)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPrintingWpf</c> object.
            </summary>
            <param name="source">Specifies <c>IPrintingWpf</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.Print">
            <summary>
            When implemented by a class, sends <c>IPrintingWpf.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.ExecutePrintPreviewDialog(System.Windows.DependencyObject)">
            <summary>
            When implemented by a class, initializes and runs print preview dialog.
            </summary>
            <param name="ownerwnd">Any object that represents the top-level window that will own the modal dialog box.</param>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.ExecutePrintDialog">
            <summary>
            When implemented by a class, initializes and runs print dialog.
            </summary>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.ExecutePrintOptionsDialog">
            <summary>
            When implemented by a class, initializes and runs print options dialog.
            </summary>
            <returns>True if the user clicks OK in the dialog box; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.ResetOptions">
            <summary>
            When implemented by a class, resets <c>IPrintingWpf.Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets <c>IPrintingWpf.AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IPrintingWpf.OnInitialized">
            <summary>
            When implemented by a class, raises the <c>Initialized</c> event.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.InitSearchEvent">
            <summary>
            Represents a method that will handle the <c>SearchManager.InitSearch</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>InitSearchEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.GetSearchEvent">
            <summary>
            Represents a method that will handle the <c>SearchManager.GetSearch</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>GetSearchEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.TextFoundEvent">
            <summary>
            Represents a method that will handle the <c>SearchManager.TextFound</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>TextFoundEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISearch">
            <summary>
            Represents properties and methods used to search and replace control's text content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISearch.TextChanged">
            <summary>
            When implemented by a class, occurs when the TextEditor text changes.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.InIncrementalSearch">
            <summary>
            When implemented by a class, indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.IncrementalSearchString">
            <summary>
            When implemented by a class, return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchPos">
            <summary>
            When implemented by a class, gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.HighlightSearchResults">
            <summary>
            When implemented by a class, indicates whether search results are highlighted while the search dialog is open.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchOptions">
            <summary>
            When implemented by a class, gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchLen">
            <summary>
            When implemented by a class, represents length of the last found text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.FirstSearch">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.IsSearchActive">
            <summary>
            When implemented by a class, gets a boolean value indicating whether text search is being performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.IsSearchFocused">
            <summary>
            When implemented by a class, gets a boolean value indicating whether search dialog box has input focus.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchDialogAppearance">
            <summary>
            When implemented by a class, gets or sets search dialog appearance.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchDialog">
            <summary>
            When implemented by a class, gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.GotoLineDialog">
            <summary>
            When implemented by a class, gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearch.SearchGlobal">
            <summary>
            When implemented by a class, gets or sets a value indicating whether search should be global.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Find(System.String)">
            <summary>
            When implemented by a class, searches for given text within the control's contents.
            </summary>
            <param name="text">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Find(System.String,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, searches for all occurrences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="ranges">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, searches for all occurrences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="firstSearch">Specifies if search is performed the first time.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.FindNext">
            <summary>
            When implemented by a class, searches for the next occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.FindPrevious">
            <summary>
            When implemented by a class, searches for the previous occurrence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.FindNextSelected">
            <summary>
            When implemented by a class, searches for the next occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.FindPreviousSelected">
            <summary>
            When implemented by a class, searches for the previous occurrence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CanFindNext">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurrence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CanFindPrevious">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurrence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CanFindNextSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CanFindPreviousSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurrence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Replace(System.String,System.String)">
            <summary>
            When implemented by a class, searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.Replace(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ReplaceAll(System.String,System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <param name="abort">Indicates whether replace action aborted.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.HighlightAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, highlights all occurrences of specified string in the class text content.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.HighlightSelectedWords(System.String)">
            <summary>
            When implemented by a class, highlights all occurrences of selected whole word in the class text content.
            </summary>
            <param name="text">Specifies text to highlight.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.UnhighlightAll">
            <summary>
            When implemented by a class, unhighlights search results previously highlighted by HighlightAll.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.MarkAll(System.String,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.MarkAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.MarkAll(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            When implemented by a class, indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successful.</param>
            <returns>True if selected text matches search text; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ReplaceCurrent(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            When implemented by a class, replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successful.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.StartIncrementalSearch">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.ISearch.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.StartIncrementalSearch(System.Boolean)">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.ISearch.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.FinishIncrementalSearch">
            <summary>
            When implemented by a class, leaves control from the incremental search state.
            <seealso cref="M:Alternet.Editor.Wpf.ISearch.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            When implemented by a class, finds given text incrementally.
            </summary>
            <param name="key">Additional value to search text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.IncrementalSearch(System.String)">
            <summary>
            When implemented by a class, finds given text incrementally.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.GetTextToSearchAtCursor">
            <summary>
            When implemented by a class, returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CanSearchSelection(System.String@)">
            <summary>
            When implemented by a class, returns whether search can be performed inside selection.
            </summary>
            <param name="selectedText">Specifies the text being selected.</param>
            <returns>True if selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.ShowNotFound(System.String)">
            <summary>
            When implemented by a class, displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.CycledSearch(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            When implemented by a class, performs cycled search.
            </summary>
            <param name="text">Text being found.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.IsSelectionSearch(Alternet.Editor.Wpf.SelectionType@,System.Drawing.Rectangle@)">
            <summary>
            When implemented by a class, deterimes if SyntaxEdit performs search throught selected text.
            </summary>
            <param name="selectionType">SelectionType when the search started.</param>
            <param name="selectionRect">Selection bounds when the search started</param>
            <returns>True, if search through selection is performed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearch.OnTextFound(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,System.Drawing.Point,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, occurs when search text is found.
            </summary>
            <param name="text">Text being found.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="match">Specifies match if regular expression search successful.</param>
            <param name="position">Specifies position of found text.</param>
            <param name="len">Specifies length of found text.</param>
            <param name="silent">Determines if no visual feedback is required.</param>
            <param name="multiline">Determines if search text is found on multiple lines.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISearchSettings">
            <summary>
            Represents properties and methods to hold settings for search and replace dialogs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchSettings.SearchOptions">
            <summary>
            When implemented by a class, represents options that determine behavior of search or replace dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchSettings.OptionsVisible">
            <summary>
            When implemented by a class, indicates whether find/replace dialog should display search options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchSettings.ClearBookmarks">
            <summary>
            When implemented by a class, indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchSettings.SearchList">
            <summary>
            When implemented by a class, represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISearchSettings.ReplaceList">
            <summary>
            When implemented by a class, represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISearchSettings.Assign(Alternet.Editor.Wpf.ISearchSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>ISearchSettings</c> object.
            </summary>
            <param name="source">Specifies <c>ISearchSettings</c> to assign.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.SelectionState">
            <summary>
            Defines state of the selected text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionState.Drag">
            <summary>
            Specifies that selected text is dragged.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionState.Select">
            <summary>
            Specifies that some text part is selected.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionState.SelectWord">
            <summary>
            Specifies that Edit control tries to select words instead of single characters.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionState.SelectLine">
            <summary>
            Specifies that Edit control tries to select lines instead of single characters.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.AllowedSelectionMode">
            <summary>
            Defines which types of selection is allowed.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            <seealso cref="T:Alternet.Editor.Wpf.SelectionType"/>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.AllowedSelectionMode.None">
            <summary>
            Specifies that no selection type is allowed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.AllowedSelectionMode.Stream">
            <summary>
            Specifies that only stream selection type is allowed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.AllowedSelectionMode.Block">
            <summary>
            Specifies that only block selection type is allowed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SelectionOptions">
            <summary>
            Defines appearance and behavior of selected text.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DisableSelection">
            <summary>
            Disables to select any text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DisableDragging">
            <summary>
            Disables dragging the selected text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.SelectBeyondEol">
            <summary>
            Specifies that selection is drawn beyond end of line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.UseColors">
            <summary>
            Specifies that selection should paint preserving colors of the text fragments.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.HideSelection">
            <summary>
            Specifies that selected text should be draw as unselected text when control lost focus.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.SelectLineOnDblClick">
            <summary>
            Specifies that whole line should be selected instead of single word when user double clicks on some text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DeselectOnCopy">
            <summary>
            Specifies that selection should be unselected when selected text copies to the Clipboard.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.PersistentBlocks">
            <summary>
            Specifies that selected text should be retained even when the cursor is moved, until a new block is selected.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.OverwriteBlocks">
            <summary>
            Specifies that selected text should be replaced of text with whatever is typed next.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.SmartFormat">
            <summary>
            Specifies that selected text should be formatted according to syntax rules when pasting.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.WordSelect">
            <summary>
            Specifies that Edit control should select words instead of single characters.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DrawBorder">
            <summary>
            Specifies that Edit control should draw border around selection.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.SelectLineOnTripleClick">
            <summary>
            Specifies that whole line should be selected when user triple clicks on some text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DeselectOnDblClick">
            <summary>
            Specifies that selection should be cleared by dblclick.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.ConvertToSpacesOnPaste">
            <summary>
            Specifies that selection should convert all tabs to spaces in the text being pasted when Lines.UseSpaces is on.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.RtfClipboard">
            <summary>
            Specifies that selection should copy it's content clipboard in rtf format.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.ClearOnDrag">
            <summary>
            Specifies that selection should be deleted when dragging from external source.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.CopyLineWhenEmpty">
            <summary>
            Specifies that copy and cut operation should process entire line when selection is empty.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DisableCodeSnippetOnTab">
            <summary>
            Specifies that Edit control should not try to find and insert code snippet when tab key is pressed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.ExtendedBlockMode">
            <summary>
            Specifies that text entered in block selection mode affects all selected lines.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.SelectWordOnCtrlClick">
            <summary>
            Specifies that word should be selected when user  clicks on some text holding Ctrl Key.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.DeselectOnDrag">
            <summary>
            Specifies that selection should be unselected after text is dragged into the Editor.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionOptions.HighlightSelectedWords">
            <summary>
            Specifies that the Edit control should select all instances of the chosen words.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.SelectionType">
            <summary>
            Defines type of the selection.
            <seealso cref="T:Alternet.Editor.Wpf.AllowedSelectionMode"/>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionType.None">
            <summary>
            Specifies that no text is selected.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionType.Stream">
            <summary>
            Specifies that selected text consists of consecutive characters.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SelectionType.Block">
            <summary>
            Specifies that selected text represents square block.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ExtendedSelectionScope">
            <summary>
            Specifies text selection scope in case of null-selection blocks
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ExtendedSelectionScope.None">
            <summary>
            Only text being selected
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ExtendedSelectionScope.Left">
            <summary>
            In case of null-selection block includes character to the left.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ExtendedSelectionScope.Right">
            <summary>
            In case of null-selection block includes character to the right.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISelection">
            <summary>
            Contains properties and methods used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISelection.SelectionChanged">
            <summary>
            When implemented by a class, occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISelection.BeforePaste">
            <summary>
            When implemented by a class, occurs when text is about to be pasted.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISelection.AfterPaste">
            <summary>
            When implemented by a class, occurs when text is already pasted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectedColorData">
            <summary>
            When implemented by a class, gets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectionState">
            <summary>
            When implemented by a class, gets or sets a value indicates state of the selected text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.IsEmpty">
            <summary>
            When implemented by a class, indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectionStart">
            <summary>
            When implemented by a class, gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectionLength">
            <summary>
            When implemented by a class, gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectionRect">
            <summary>
            When implemented by a class, gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectionType">
            <summary>
            When implemented by a class, gets or sets type of current selection.
            <seealso cref="T:Alternet.Editor.Wpf.SelectionType"/>
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.SelectedText">
            <summary>
            When implemented by a class, gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.Options">
            <summary>
            When implemented by a class, gets or sets options determining behavior or the <c>ISelection</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISelection.AllowedSelectionMode">
            <summary>
            When implemented by a class, gets or sets types of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Assign(Alternet.Editor.Wpf.ISelection)">
            <summary>
            When implemented by a class, copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SetSelection(Alternet.Editor.Wpf.SelectionType,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionRect">New selected rectangle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SetSelection(Alternet.Editor.Wpf.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectangle.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UpdateSelStart(System.Drawing.Point)">
            <summary>
            When implemented by a class, updates selection start to the specified position.
            </summary>
            <param name="position">New selection start.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UpdateSelRange(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, updates selection start and end to the specified position.
            </summary>
            <param name="start">New selection start.</param>
            <param name="end">New selection end.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UpdateSelStart(System.Boolean)">
            <summary>
            When implemented by a class, updates selection start to the specified position.
            </summary>
            <param name="checkIfEmpty">Checks whether selection is empty.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UpdateSelection">
            <summary>
            When implemented by a class, invalidates selected region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectCharLeft">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectCharLeft(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectCharRight">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectCharRight(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectWordLeft">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectWordLeft(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectWordRight">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectWordRight(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.MoveSelectionUp">
            <summary>
            When implemented by a class, moves selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.MoveSelectionDown">
            <summary>
            When implemented by a class, moves selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineUp">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineUp(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineDown">
            <summary>
            When implemented by a class, increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineDown(Alternet.Editor.Wpf.SelectionType)">
            <summary>
             When implemented by a class, increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectPageUp">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectPageUp(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectPageDown">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectPageDown(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectScreenTop">
            <summary>
            When implemented by a class, increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectScreenTop(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectScreenBottom">
            <summary>
            When implemented by a class, increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectScreenBottom(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineBegin">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineBegin(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineEnd">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineEnd(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectFileBegin">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectFileBegin(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectFileEnd">
            <summary>
            When implemented by a class, increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectFileEnd(Alternet.Editor.Wpf.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLine">
            <summary>
            When implemented by a class, selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectLineOnTrippleClick">
            <summary>
            When implemented by a class, selects entire line at the current position in the control as a result of triple click.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectWord">
            <summary>
            When implemented by a class, selects a word at the current position in the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectAll">
            <summary>
            When implemented by a class, selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectToOpenBrace">
            <summary>
            When implemented by a class, increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectToCloseBrace">
            <summary>
            When implemented by a class, increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectToBrace">
            <summary>
            When implemented by a class, increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CommentSelection">
            <summary>
            When implemented by a class, marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UncommentSelection">
            <summary>
            When implemented by a class, removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartFormat">
            <summary>
            When implemented by a class, formats selected text using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartFormat(System.Int32)">
            <summary>
            When implemented by a class, formats given line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartFormat(System.Char)">
            <summary>
            When implemented by a class, formats given line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies Character being typed</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartIndent">
            <summary>
            When implemented by a class, positions the cursor to the line indentation level, obtained from parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartIndent(System.Char)">
            <summary>
            When implemented by a class, formats given current line using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies character being pressed</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartFormatBlock(System.Boolean,System.Char)">
            <summary>
            When implemented by a class, formats current syntax block using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
            <param name="extended">Specifies that search should be extended outside current scope</param>
            <param name="ch">Character being typed</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SmartFormatDocument">
            <summary>
            When implemented by a class, formats entire document using indentation obtained from Syntax Parser supporting <c>Alternet.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Tabify">
            <summary>
            When implemented by a class, converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UnTabify">
            <summary>
            When implemented by a class, converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Indent">
            <summary>
            When implemented by a class, indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UnIndent">
            <summary>
            When implemented by a class, unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.LowerCase">
            <summary>
            When implemented by a class, converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.UpperCase">
            <summary>
            When implemented by a class, converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Capitalize">
            <summary>
            When implemented by a class, changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteWhiteSpace">
            <summary>
            When implemented by a class, removes all space and tab characters from selected text. If no text selected - removes space and tab characters from current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expands some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SwapAnchor">
            <summary>
            When implemented by a class, change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CanCopy">
            <summary>
            When implemented by a class, indicates whether selected text can be copied to the clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CanCut">
            <summary>
            When implemented by a class, indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CanDelete">
            <summary>
            When implemented by a class, indicates whether selected text can be deleted.
            </summary>
            <returns>True if the selection can be deleted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CanPaste">
            <summary>
            When implemented by a class, indicates whether the control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Copy">
            <summary>
            When implemented by a class, copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Cut">
            <summary>
            When implemented by a class, cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Paste">
            <summary>
            When implemented by a class, pastes the content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Delete">
            <summary>
            When implemented by a class, deletes selected text from the control.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Delete(Alternet.Editor.Wpf.ExtendedSelectionScope)">
            <summary>
            When implemented by a class, deletes selected text from the control.
            </summary>
            <param name="scope">Specifies extended selection scope for null-width blocks</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Clear">
            <summary>
            When implemented by a class, makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.BeginUpdate">
            <summary>
            When implemented by a class, prevents the <c>ISelection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="M:Alternet.Editor.Wpf.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.EndUpdate">
            <summary>
            When implemented by a class, re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="M:Alternet.Editor.Wpf.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteLeft">
            <summary>
            When implemented by a class, deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteRight">
            <summary>
            When implemented by a class, deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteWordLeft">
            <summary>
            When implemented by a class, deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteWordRight">
            <summary>
            When implemented by a class, deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DeleteLine">
            <summary>
            When implemented by a class, deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CutLine">
            <summary>
            When implemented by a class, cuts current line to the clipboard if no text is selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.NewLine">
            <summary>
            When implemented by a class, inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ProcessEscape">
            <summary>
            When implemented by a class, processes escape pressure: method deselects selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ProcessTab">
            <summary>
            When implemented by a class, inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ProcessShiftTab">
            <summary>
            When implemented by a class, moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ToggleOverWrite">
            <summary>
            When implemented by a class, toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.InsertString(System.String)">
            <summary>
            When implemented by a class, inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="s">Text to insert.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CharTransponse">
            <summary>
            When implemented by a class, transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.WordTransponse">
            <summary>
            When implemented by a class, transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.LineTransponse">
            <summary>
            When implemented by a class, transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.CanDrag(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether the control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ChangeBlock(Alternet.Editor.Wpf.StringEvent)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ChangeBlock(Alternet.Editor.Wpf.TextUndoEvent,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selected region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ChangeBlock(Alternet.Editor.Wpf.TextUndoEvent)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ChangeBlock(Alternet.Editor.Wpf.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selected region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ApplyTextChanges(System.Collections.Generic.IList{Alternet.Syntax.ITextUndo},System.Boolean)">
            <summary>
            When implemented by a class, applies text changes to the text.
            </summary>
            <param name="textChanges">List of text changes</param>
            <param name="format">Specifies if inserted block needs to be formatted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, sets left and right parameter to the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.GetSearchSelectionForLine(System.Int32,System.Int32@,System.Int32@,Alternet.Editor.Wpf.SelectionType@,System.Drawing.Rectangle@)">
            <summary>
            When implemented by a class, sets left and right parameter to the first and last selected characters within specified line, when edit control is in search selection mode.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <param name="searchSelType"> Receives search selection type.</param>
            <param name="searchSelRect"> Receives search selection rectangle.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectedCount">
            <summary>
            When implemented by a class, returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectedString(System.Int32)">
            <summary>
            When implemented by a class, returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies an index of the line.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.StartSelection">
            <summary>
            When implemented by a class, forces selection start.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.EndSelection">
            <summary>
            When implemented by a class, stops selection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Invalidate">
            <summary>
            When implemented by a class, invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Invalidate(Alternet.Editor.Wpf.SelectionType,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            <param name="selectionType">Selection type.</param>
            <param name="selectionRect">Selection rectangle.</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.Modified">
            <summary>
            When implemented by a class, responds on any modifications in the editor.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on changing position in the editor.
            </summary>
            <param name="x">X-part of position to change.</param>
            <param name="y">Y-part of position to change.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.OnSelectionChanged">
            <summary>
            When implemented by a class, raises <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.OnSelect(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, selects part of text source settings. Reserved for internal use.
            </summary>
            <param name="source">The source of the selection.</param>
            <param name="e">An <c>EventArgs</c> that contains the data.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ScrollIfNeeded(System.Windows.Point)">
            <summary>
            When implemented by a class, scrolls to specified position if needed.
            </summary>
            <param name="pt">Position to scroll.</param>
            <returns>True if scroll needed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.SelectionToScreen">
            <summary>
            When implemented by a class, represents selection region in a screen coordinates.
            </summary>
            <returns>Screen coordinate rectangle corresponding to selection region.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.IsValidSelectionPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether specified position located at the top-left or right-bottom corners of selection area.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if specified position valid; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISelection.ResetAllowedSelectionMode">
            <summary>
            When implemented by a class, resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawStage">
            <summary>
            DrawState is used to specify a stage in the custom drawing process.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawStage.Before">
            <summary>
            After painting.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawStage.After">
            <summary>
            Before painting.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.DrawState">
            <summary>
            DrawState is used to specify a custom drawing state, including information about elements of the control currently drawn.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Control">
            <summary>
            Entire control is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Text">
            <summary>
            Text fragment is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Selection">
            <summary>
            Text currently drawn is selected.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.WhiteSpace">
            <summary>
            WhiteSpace is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineHighlight">
            <summary>
            Line highlighter is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineSeparator">
            <summary>
            Line separator is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineBookMark">
            <summary>
            Line bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Brace">
            <summary>
            Brace is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.BeyondEol">
            <summary>
            Space after end of line is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.BeyondEof">
            <summary>
            Space after end of file is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Gutter">
            <summary>
            Gutter area is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.GutterImage">
            <summary>
            Gutter bookmark or other gutter image is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.BookMark">
            <summary>
            Bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineNumber">
            <summary>
            Line number are currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.OutlineArea">
            <summary>
            Outline area is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.OutlineImage">
            <summary>
            Outline image (plus/minus button) is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.OutlineButton">
            <summary>
            Outline button is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineModificator">
            <summary>
            Line modificator is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Spelling">
            <summary>
            Misspelled wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.SyntaxError">
            <summary>
            Syntax error wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Page">
            <summary>
            Edit page is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.PageHeader">
            <summary>
            Page header is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.PageBorder">
            <summary>
            Page border is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.LineStyle">
            <summary>
            Line Style is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.CodeSnippet">
            <summary>
            Code snippet is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.UserMargin">
            <summary>
            User margin is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Warning">
            <summary>
            Warning wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Info">
            <summary>
            Info wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.Reference">
            <summary>
            Symbol reference is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.SearchResult">
            <summary>
            Search result is currently drawing.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.DrawState.SelectedWord">
            <summary>
            Selected word is currently drawing.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISyntaxPaint.LineSpace">
            <summary>
            When implemented by a class, Represents additional height added to the height of the font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISyntaxPaint.FontHeight">
            <summary>
            When implemented by a class, represents height of the current font.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISyntaxPaint.IsFontMonospace">
            <summary>
            When implemented by a class, get a boolean value indicating whether current font is monospaced.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.CharWidth(System.Char,System.Int32)">
            <summary>
            When implemented by a class, measures summary character width accordingly to specified conditions.
            </summary>
            <param name="ch">Char to measure.</param>
            <param name="count">Number of characters to measure.</param>
            <returns>Summary characters width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.StringWidth(System.String)">
            <summary>
            When implemented by a class, measures specified string.
            </summary>
            <param name="text">Text to measure.</param>
            <returns>Summary string width.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.OnFontFamilyChanged">
            <summary>
            When implemented by a class, occurs when font changed.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.GetBackColor(System.Boolean)">
            <summary>
            When implemented by a class, retrieves background color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return background color for readonly state.</param>
            <returns>Appropriate background color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.GetForeColor(System.Boolean)">
            <summary>
            When implemented by a class, retrieves foreground color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return foreground color for readonly state.</param>
            <returns>Appropriate foreground color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of the string given at by its Index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.MeasureLine(System.String,Alternet.Syntax.StringItemInfo[],System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.MeasureLine(System.String,Alternet.Syntax.StringItemInfo[],System.Int32,System.Int32,System.Double,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.GetFontColor(System.Drawing.Color,Alternet.Syntax.TextStyle)">
            <summary>
            When implemented by a class, retrieves font color corresponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.GetFontStyle(System.Drawing.FontStyle,Alternet.Syntax.TextStyle)">
            <summary>
            When implemented by a class, retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.GetLexStyle(Alternet.Syntax.StringItemInfo,Alternet.Syntax.TextStyle@)">
            <summary>
            When implemented by a class, retrieves lex state corresponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISyntaxPaint.EqualStyles(Alternet.Syntax.StringItemInfo,Alternet.Syntax.StringItemInfo,System.Boolean)">
            <summary>
            When implemented by a class, indicates whether given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whether colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IWhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether white space symbols are visible in the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.TabSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.SpaceSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.LongSpaceSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.EolSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.EofSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.WordWrapSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.SpaceString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.TabString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.EolString">
            <summary>
            When implemented by a class, represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.EofString">
            <summary>
            When implemented by a class, represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.WordWrapString">
            <summary>
            When implemented by a class, represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWhiteSpace.SymbolColor">
            <summary>
            When implemented by a class, gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.Assign(Alternet.Editor.Wpf.IWhiteSpace)">
            <summary>
            When implemented by a class, copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetTabSymbol">
            <summary>
            When implemented by a class, resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetSpaceSymbol">
            <summary>
            When implemented by a class, resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetEolSymbol">
            <summary>
            When implemented by a class, resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetEofSymbol">
            <summary>
            When implemented by a class, resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetWordWrapSymbol">
            <summary>
            When implemented by a class, resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWhiteSpace.ResetSymbolColor">
            <summary>
            When implemented by a class, resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IWordWrap">
            <summary>
            Represents properties and methods to wrap Edit control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWordWrap.WordWrap">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWordWrap.WrapAtMargin">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWordWrap.WrapMargin">
            <summary>
            When implemented by a class, gets position of the wrapping margin.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordWrap.UpdateWordWrap">
            <summary>
            When implemented by a class, re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordWrap.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordWrap.GetWrapMargin">
            <summary>
            When implemented by a class, returns position of the wrapping margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordWrap.ResetWordWrap">
            <summary>
            When implemented by a class, resets the <c>WordWrap</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordWrap.ResetWrapAtMargin">
            <summary>
            When implemented by a class, resets the <c>WrapAtMargin</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrollBarAnnotations">
            <summary>
            Represents properties and methods describing scroll bar annotations.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IScrollBarAnnotations.CustomAnnotationsRequested">
            <summary>
            When implemented by a class, occurs when a custom annotation is requested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollBarAnnotations.Enabled">
            <summary>
            When implemented by a class, indicates whether <c>IScrollBarAnnotations</c> is enabled.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollBarAnnotations.EnabledAnnotationKinds">
            <summary>
            When implemented by a class, gets or sets active scrollbar annotation kinds.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotations.GetAnnotationTypeAppearance(Alternet.Editor.Wpf.ScrollBarAnnotationType)">
            <summary>
            When implemented by a class, gets appearance for specified annotation type.
            </summary>
            <param name="type"><c>ScrollBarAnnotationType</c> to check.</param>
            <returns><c>ScrollBarAnnotationTypeAppearance</c> that describes apperance of the given annotation type.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotations.Initialize(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            When implemented by a class, initializes an instance of the <c>ScrollBarAnnotations</c> class with a specified owner.
            </summary>
            <param name="editor"><c>TextEditor</c> to which this new instance belongs.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotations.SetAnnotationTypeAppearance(Alternet.Editor.Wpf.ScrollBarAnnotationType,Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance)">
            <summary>
            When implemented by a class, sets appearance for specified annotation type.
            </summary>
            <param name="type"><c>ScrollBarAnnotationType</c> to update.</param>
            <param name="appearance">A new appearance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotations.SetLineStyleAnnotationAppearance(System.Int32,Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance)">
            <summary>
            When implemented by a class, sets appearance for specified line style.
            </summary>
            <param name="lineStyleIndex">Index of line style to update.</param>
            <param name="appearance">New appearance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotations.Invalidate">
            <summary>
            When implemented by a class, updates the layout and redraws all scrollbar annotations.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrollBarAnnotationsPainter">
            <summary>
            Represents methods to paint scrollbar annotations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotationsPainter.Initialize(Alternet.Editor.Wpf.TextEditor,Alternet.Editor.Wpf.IScrollBarAnnotationsPainterSite)">
            <summary>
            When implemented by a class, initializes an instance of the <c>IScrollBarAnnotationsPainter</c> class with a specified owner.
            </summary>
            <param name="editor"><c>TextEditor</c> to which this new instance belongs.</param>
            <param name="site"><c>IScrollBarAnnotationsPainterSite</c> used to retrieve <c>ScrollBarAnnotationPaintData</c></param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotationsPainter.RedrawAnnotations">
            <summary>
            When implemented by a class, updates the layout and redraws all scrollbar annotations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotationsPainter.Paint(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            When implemented by a class, draws annotations using the specified DrawingContext.
            </summary>
            <param name="drawingContext">DrawingContext used to draw annotations.</param>
            <param name="paintRect">Rectangular area where annotations will be drawn.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationKinds">
            <summary>
            Defines a kind of the scrollbar annotation.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.Change">
            <summary>
            Specifies that modified lines marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.Bookmark">
            <summary>
            Specifies that bookmarks marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.SearchResult">
            <summary>
            Specifies that found results marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.Error">
            <summary>
            Specifies that syntax errors marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.CursorPosition">
            <summary>
            Specifies that current line marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.Custom">
            <summary>
            Specifies that custom marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.LineStyle">
            <summary>
            Specifies that line style marker is in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationKinds.All">
            <summary>
            Specifies that all markers are in effect.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrollBarAnnotationsSource">
            <summary>
            Represents methods to get scroll bar annotations from text edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotationsSource.Initialize(Alternet.Editor.Wpf.TextEditor,System.Action)">
            <summary>
            When implemented by a class, initializes scrollbar annotation data from specified source.
            </summary>
            <param name="edit"><c>TextEditor</c> that is a source of the annotations.</param>
            <param name="annotationsChangedAction">Action to be performed when annotations changed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollBarAnnotationsSource.GetAnnotations(Alternet.Editor.Wpf.ScrollBarAnnotationKinds)">
            <summary>
            When implemented by a class, gets a list of the scrollbar annotations matching to the specified kinds.
            </summary>
            <param name="kinds">Kinds of the scrollbar annotations.</param>
            <returns>List of scrollbar annotations.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollingOptions">
            <summary>
            Defines scrolling behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.SmoothScroll">
            <summary>
            Specifies that Edit control should reposition immediately while user tracking the thumb.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.ShowScrollHint">
            <summary>
            Specifies that control should display hint text in the popup window when user tracking the thumb.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.UseScrollDelta">
            <summary>
            Specifies that horizontal scrolling should scroll client area at the several characters rather than one character when caret is at the right border.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.SystemScrollbars">
            <summary>
            Specifies that Edit control should use system scroll bars rather than scrollbar controls.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.FlatScrollbars">
            <summary>
            Specifies that scroll bars appears in flat style.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.AllowSplitHorz">
            <summary>
            Allows user to split Edit control horizontally.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.AllowSplitVert">
            <summary>
            Allows user to split Edit control vertically.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.HorzButtons">
            <summary>
            Specifies that scroll bars should display a collection of horizontal buttons at the left side of the horizontal scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.VertButtons">
            <summary>
            Specifies that scroll bars should display a collection of vertical buttons at the bottom side of vertical scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.ScrollByPixels">
            <summary>
            Specifies that scroll bars should calculate their size using pixels rather than characters.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollingOptions.VerticalScrollBarAnnotations">
            <summary>
            Specifies that annotations should be drawn over vertical scroll bar.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrolling">
            <summary>
            Represents properties and methods that describe scrolling behavior of Edit control.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IScrolling.VerticalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IScrolling.HorizontalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in horizontal direction. This can be caused by dragging horizontal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IScrolling.ScrollButtonClick">
            <summary>
            When implemented by a class, occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.WindowOriginX">
            <summary>
            When implemented by a class, gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.Annotations">
            <summary>
            When implemented by a class, gets the scroll bars annotations control interface.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.WindowOriginY">
            <summary>
            When implemented by a class, gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.HScrollBar">
            <summary>
            When implemented by a class, gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.VScrollBar">
            <summary>
            When implemented by a class, gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.HasHScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.HasVScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.HorzButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.VertButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.Owner">
            <summary>
            When implemented by a class, represents owner of this <c>IScrolling</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.Options">
            <summary>
            When implemented by a class, gets or sets a <c>ScrollingOptions</c> that determine scrolling behavior.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.VertScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether vertical scrollbar is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.HorzScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.FixedScrollSize">
            <summary>
            When implemented by a class, indicates whether horz scrollbar has fixed size.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrolling.ScrollByPixels">
            <summary>
            When implemented by a class, indicates whether scrollbars should use pixels rather than characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.Assign(Alternet.Editor.Wpf.IScrolling)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.UpdateScroll">
            <summary>
            When implemented by a class, updates scrolling control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.UpdateScroll(System.Boolean)">
            <summary>
            When implemented by a class, updates scrolling control.
            </summary>
            <param name="updateSize">True if scrolling control should be resized; otherwise false.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.MouseScroll(System.Int32)">
            <summary>
            When implemented by a class, scrolls editor control vertically.
            </summary>
            <param name="delta">Specifies mouse wheel delta.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.SystemScroll(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, performs a system scrolls by calling Windows API.
            </summary>
            <param name="code">Specifies scrolling request.</param>
            <param name="vert">True if vertical scroll bar should be scrolled; otherwise false.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.UpdateFlat">
            <summary>
            When implemented by a class, initializes flat scroll bars for editor control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrolling.OnScrollButtonClick(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, raises <c>ScrollButtonClick</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrollingButton">
            <summary>
            Represents properties specifying appearance and behavior of button displayed on the scroll bar.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether this <c>IScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.BorderStyle">
            <summary>
            When implemented by a class, gets or sets the border style for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.GroupIndex">
            <summary>
            When implemented by a class, gets or sets a value allows buttons to work together as a group.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Checked">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether button appears pressed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.AllowCheck">
            <summary>
            When implemented by a class, gets or sets a value indicating whether button should automatically appear pressed in and not pressed in when clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Scrolling">
            <summary>
            When implemented by a class, gets or sets <c>IScrolling</c> contains this button.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IScrollingButton.Button">
            <summary>
            When implemented by a class, represents windowed control that appears as a button.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButton.Assign(Alternet.Editor.Wpf.IScrollingButton)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IScrollingButtons">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IScrollingButton</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButtons.Assign(Alternet.Editor.Wpf.IScrollingButtons)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButtons</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButtons</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButtons.AddScrollingButton">
            <summary>
            When implemented by a class, creates and adds a new <c>IScrollingButton</c> to the collection.
            </summary>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButtons.AddScrollingButton(System.String,System.String,System.Int32)">
            <summary>
            When implemented by a class, creates new <c>IScrollingButton</c> with specified parameters and adds it to the collection.
            </summary>
            <param name="name"><c>Name</c> of this new <c>IScrollingButton</c>.</param>
            <param name="description"><c>Description</c> of this new <c>IScrollingButton</c>.</param>
            <param name="imageIndex"><c>ImageIndex</c> of this new <c>IScrollingButton</c>.</param>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButtons.Add(Alternet.Editor.Wpf.IScrollingButton)">
            <summary>
            When implemented by a class, adds an <c>IScrollingButton</c> to the list.
            </summary>
            <param name="item"><c>IScrollingButton</c> to be added.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IScrollingButtons.ClearButtons">
            <summary>
            When implemented by a class, clears entire collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.LineStyleScrollBarAnnotation">
            <summary>
            Represents scrollbar annotation for the line style.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.LineStyleScrollBarAnnotation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineStyleScrollBarAnnotation</c> class with specified parameters.
            </summary>
            <param name="textLineNumber">Index of the text line where this annotation appears.</param>
            <param name="lineStyleIndex">Index of a line style within the line styles collection.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.LineStyleScrollBarAnnotation.LineStyleIndex">
            <summary>
            Gets index of line style within the controls line styles collection.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationType">
            <summary>
            Defines a type of the particular scrollbar annotation.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.UnsavedChange">
            <summary>
            Specifies that annotation represents an unsaved modified line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.SavedChange">
            <summary>
            Specifies that annotation represents a saved modified line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.Bookmark">
            <summary>
            Specifies that annotation represents a bookmark.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.SearchResult">
            <summary>
            Specifies that annotation represents a search result.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.SyntaxError">
            <summary>
            Specifies that annotation represents a syntax error.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.SyntaxWarning">
            <summary>
            Specifies that annotation represents a syntax warning.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.SyntaxInfo">
            <summary>
            Specifies that annotation represents a syntax information.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.CursorPosition">
            <summary>
            Specifies that annotation represents a current line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.Custom">
            <summary>
            Specifies custom annotation.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationType.LineStyle">
            <summary>
            Specifies that annotation represents a line style.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotation">
            <summary>
            Represents a particular scroll bar annotation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotation.#ctor(Alternet.Editor.Wpf.ScrollBarAnnotationType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>ScrollBarAnnotation</c> class with specified parameters.
            </summary>
            <param name="type">Specifies type of the annotation.</param>
            <param name="textLineStartIndex">Specifies an index of the first line in the text to which this new instance belongs.</param>
            <param name="textLinesCount">Specifies the number of lines in the text to which this new instance belongs.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotation.TextLineStartIndex">
            <summary>
            Gets an index of the first line in the text to which this annotation belongs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotation.TextLinesCount">
            <summary>
            Gets a number of lines in the text to which this annotation belongs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotation.Type">
            <summary>
            Gets type of the annotation.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment">
            <summary>
            Specifies how annotation is horizontally aligned relative to the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment.Stretch">
            <summary>
            Annotation stretches to fill the scrollbar's layout.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment.Left">
            <summary>
            Annotation aligned to the left of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment.Center">
            <summary>
            Annotation aligned to the center of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment.Right">
            <summary>
            Annotation aligned to the right of the scrollbar.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment">
            <summary>
            Specifies how annotation is vertically aligned relative to the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment.Stretch">
            <summary>
            Annotation stretches to fill the scrollbar's layout.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment.Top">
            <summary>
            Annotation aligned to the top of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment.Center">
            <summary>
            Annotation aligned to the center of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment.Bottom">
            <summary>
            Annotation aligned to the bottom of the scrollbar.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationAlignment">
            <summary>
            Specifies how annotation is aligned relative to the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationAlignment.Stretch">
            <summary>
            Annotation stretches to fill the scrollbar's layout.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationAlignment.Top">
            <summary>
            Annotation aligned to the top of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationAlignment.Center">
            <summary>
            Annotation aligned to the center of the scrollbar.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.ScrollBarAnnotationAlignment.Bottom">
            <summary>
            Annotation aligned to the bottom of the scrollbar.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData">
            <summary>
            Represents a class that contains data used to paint scrollbar annotation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.#ctor(Alternet.Editor.Wpf.ScrollBarAnnotationType,System.Int32,Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment,Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment,System.Windows.Media.Color,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <c>ScrollBarAnnotationPaintData</c> class with specified parameters.
            </summary>
            <param name="type">Type of the annotation.</param>
            <param name="textLineStartIndex">Index of line from which annotation starts.</param>
            <param name="horizontalAlignment">Horizontal alignment of the annotation.</param>
            <param name="verticalAlignment">Vertical alignment of the annotation.</param>
            <param name="color">Annotation background color.</param>
            <param name="height">Annotation height.</param>
            <param name="textLinesCount">Number of lines to which annotation belongs.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.#ctor(Alternet.Editor.Wpf.ScrollBarAnnotationType,System.Int32,Alternet.Editor.Wpf.ScrollBarAnnotationAlignment,System.Windows.Media.Color,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <c>ScrollBarAnnotationPaintData</c> class with specified parameters.
            </summary>
            <param name="type">Type of the annotation.</param>
            <param name="textLineStartIndex">Index of line from which annotation starts.</param>
            <param name="alignment">Alignment of the annotation.</param>
            <param name="color">Annotation background color.</param>
            <param name="height">Annotation height.</param>
            <param name="textLinesCount">Number of lines to which annotation belongs.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.HorizontalAlignment">
            <summary>
            Gets horizontal alignment of the annotation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.VerticalAlignment">
            <summary>
            Gets vertical alignment of the annotation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.Color">
            <summary>
            Gets annotation background color.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.Height">
            <summary>
            Gets annotation height.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.TextLineStartIndex">
            <summary>
            Gets index of line from which annotation starts.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.TextLinesCount">
            <summary>
            Gets amount of lines to which annotation belongs.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationPaintData.Type">
            <summary>
            Gets type of the annotation.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance">
            <summary>
            Represents a class that contains data used to paint scrollbar annotation related to its specific type.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.#ctor(Alternet.Editor.Wpf.ScrollBarAnnotationHorizontalAlignment,Alternet.Editor.Wpf.ScrollBarAnnotationVerticalAlignment,System.Windows.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <c>ScrollBarAnnotationTypeAppearance</c> class with specified parameters.
            </summary>
            <param name="horizontalAlignment">Horizontal alignment of the annotation.</param>
            <param name="verticalAlignment">Vertical alignment of the annotation.</param>
            <param name="color">Annotation background color.</param>
            <param name="height">Annotation height.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.#ctor(Alternet.Editor.Wpf.ScrollBarAnnotationAlignment,System.Windows.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <c>ScrollBarAnnotationTypeAppearance</c> class with specified parameters.
            </summary>
            <param name="alignment">Alignment of the annotation.</param>
            <param name="color">Annotation background color.</param>
            <param name="height">Annotation height.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.HorizontalAlignment">
            <summary>
            Gets horizontal alignment of the annotation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.VerticalAlignment">
            <summary>
            Gets vertical alignment of the annotation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.Color">
            <summary>
            Gets annotation background color.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarAnnotationTypeAppearance.Height">
            <summary>
            Gets annotation height.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ScrollBarCustomAnnotationsEventArgs">
            <summary>
            Provides data for the <c>CustomAnnotationsRequested</c> handler.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ScrollBarCustomAnnotationsEventArgs.Annotations">
            <summary>
            Gets or sets a list of scrollbar annotation paint data.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IBookMark">
            <summary>
            Represents properties and methods to store individual bookmark within Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Line">
            <summary>
            When implemented by a class, gets Y-coordinate of the position (index of line) within the Edit control's text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Pos">
            <summary>
            When implemented by a class, gets X-coordinate of the bookmark position (position of character in a line) within the control's text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Index">
            <summary>
            When implemented by a class, gets an integer value that specifies an ordinal index of the bookmark.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Position">
            <summary>
            When implemented by a class, gets or sets position of the bookmark within the control's text. Y-Coordinate represents index of line and X-Coordinate - index of character in this line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Url">
            <summary>
            When implemented by a class, gets or sets an Url address of this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.FileName">
            <summary>
            When implemented by a class, gets or sets a file name associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.ImageIndex">
            <summary>
            When implemented by a class, gets or sets an image index associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Group">
            <summary>
            When implemented by a class, gets or sets a category associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.ZIndex">
            <summary>
            When implemented by a class, gets or sets an z-index associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMark.Tag">
            <summary>
            When implemented by a class, gets or sets user-defined data associated with this <c>IBookMark</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMark.Assign(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, copies the contents of another <c>IBookMark</c> object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IBookMarkEx">
            <summary>
            Do not use this class, it's provided for backward compatibility only.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.TooltipEvent">
            <summary>
            Represents a method that will handle the <c>IBookMarks.ShowToolTip</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>TooltipEvent</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.BookmarkClickEvent">
            <summary>
            Represents a method that will handle the <c>IBookMarks.Click</c> and <c>IBookMarks.DoubleClick</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>BookmarkClickEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IBookMarks">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IBookMark</c> object.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IBookMarks.ShowToolTip">
            <summary>
            When implemented by a class, occurs when Bookmark Tooltip needs to be displayed.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IBookMarks.Click">
            <summary>
            When implemented by a class, occurs when Bookmark is being clicked.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IBookMarks.DoubleClick">
            <summary>
            When implemented by a class, occurs when Bookmark is being double clicked.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBookMarks.Shared">
            <summary>
            When implemented by a class, specifies if bookmarks should be shared across all documents.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.Assign(Alternet.Editor.Wpf.IBookMarks)">
            <summary>
            When implemented by a class, copies the contents from another <c>IBookMarks</c> object.
            </summary>
            <param name="source">Specifies <c>IBookMarks</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GetBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.Generic.IList{Alternet.Editor.Wpf.IBookMark})">
            <summary>
            When implemented by a class, finds all items in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified scope.</param>
            <returns>Index of the located bookmarks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.FindBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index in a specific line within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <param name="line">Specifies line Index.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.FindBookMark(System.String)">
            <summary>
            When implemented by a class, finds the bookmark with specified Name property within bookmark collection.
            </summary>
            <param name="name">Specifies bookmark name.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the position specified by Line parameter.
            </summary>
            <param name="line">The integer value that specifies an index of the text line.</param>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark.</param>
            <param name="bookMark">The integer value that specifies an index of the bookmark.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SetBookMark(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, sets bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark index.</param>
            <param name="position">Receives position(index of character and line) of the found bookmark.</param>
            <returns>True if the bookmark successfully found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified line.
            </summary>
            <param name="line">Index of line to toggle.</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark (index of character and current line).</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, toggles (sets or removes) specified bookmark.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, toggles (sets or removes) the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the bookmark to toggle.</param>
            <param name="bookMark">Specifies <c>BookMark</c> index.</param>
            <param name="name">Specifies <c>BookMark</c> name.</param>
            <param name="description">Specifies <c>BookMark</c> description.</param>
            <param name="url">Specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark(System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the current line.
            </summary>
            <param name="bookMark"></param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ToggleBookMark">
            <summary>
            When implemented by a class, toggles (sets or removes) an unnumbered bookmark on the current line in the control's text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ClearBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index and removes its from bookmark collection.
            </summary>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookmark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ClearBookMarks(System.Int32)">
            <summary>
            When implemented by a class, removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies an index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ClearAllBookMarks">
            <summary>
            When implemented by a class, removes all items from the bookmark collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            When implemented by a class, removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.NextBookMark">
            <summary>
            When implemented by a class, returns the minimal possible value of the bookmark's Index property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GotoBookMark(System.Int32)">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the specified bookmark.
            </summary>
            <param name="bookMark">Specifies Index property of the bookmark.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GotoNextBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the next unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GotoPrevBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the previous unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.GetImages(System.Int32)">
            <summary>
            When implemented by a class, returns image list by its group.
            </summary>
            <param name="category">Given category.</param>
            <returns>ImageList associated with category.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.OnShowTooltip(System.String@,Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, raises OnShowTooltip event.
            </summary>
            <param name="tooltip">Tooltip to be displayed.</param>
            <param name="bookMark">Bookmark under the mouse cursor.</param>
            <returns>True if event is handled, otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.OnClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, raises OnClick event.
            </summary>
            <param name="bookMark">Bookmark being clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.OnDoubleClick(Alternet.Editor.Wpf.IBookMark)">
            <summary>
            When implemented by a class, raises OnDoubleClick event.
            </summary>
            <param name="bookMark">Bookmark being clicked.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves bookmark content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads bookmark content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.SaveStream(System.IO.Stream)">
            <summary>
            When implemented by a class, saves bookmark content to the specific stream.
            </summary>
            <param name="stream">The Stream object to save content.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBookMarks.LoadStream(System.IO.Stream)">
            <summary>
            When implemented by a class, loads bookmark content from the specified stream.
            </summary>
            <param name="stream">The Stream object to load content.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.BracesOptions">
            <summary>
            Defines braces behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.BracesOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.BracesOptions.Highlight">
            <summary>
            Specifies that matching braces should be highlighted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.BracesOptions.HighlightBounds">
            <summary>
            Specifies that matching braces should be highlighted only if caret is positioned on the brace.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.BracesOptions.TempHighlight">
            <summary>
            Specifies that the highlighting will disappear after small delay.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IBraceMatching">
            <summary>
            Represents properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBraceMatching.BracesOptions">
            <summary>
            When implemented by a class, gets or sets options specifying appearance and behavior of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBraceMatching.OpenBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IBraceMatching.ClosingBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.HighlightBraces">
            <summary>
            When implemented by a class, highlights braces containing caret  position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.UnhighlightBraces">
            <summary>
            When implemented by a class, unhighlights braces containing caret position.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            When implemented by a class, temporary highlights all text within the area specified by rects.
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.TempUnhighlightBraces">
            <summary>
            When implemented by a class, cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="M:Alternet.Editor.Wpf.IBraceMatching.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.ResetBracesOptions">
            <summary>
            When implemented by a class, resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.ResetOpenBraces">
            <summary>
            When implemented by a class, resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IBraceMatching.ResetClosingBraces">
            <summary>
            When implemented by a class, resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeSnippetRange">
            <summary>
            Represents properties to store individual code snippet that can appear in the Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeSnippetRange.ID">
            <summary>
            When implemented by a class, represents name of code snippet.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeSnippetRange.Tooltip">
            <summary>
            When implemented by a class, represents short description of the code snippet.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeSnippetRange.IsEditable">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether code snippet can be edited.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeSnippetRange.SupportsCode">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether code snippet can fill code.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ICodeSnippetRange.Visible">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether code snippet is visible.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ICodeSnippetRanges">
            <summary>
            Represents methods to provide an indexed access to individual <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.NeedClear(System.Int32)">
            <summary>
            When implemented by a class, obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="y">Line being changed.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.NeedClear(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="rect">Rectangle specifying block being deleted.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, changes positions of any code snippet located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="preserveBounds">Specifies whether snippet bounds should be preserved.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all snippets from the snippet collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove snippets.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.GetFirstSnippet">
            <summary>
            When implemented by a class, finds first snippet in snippet collection with nonempty id.
            </summary>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.GetNextSnippet(System.Int32)">
            <summary>
            When implemented by a class, finds next snippet in snippet collection with different id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.GetPrevSnippet(System.Int32)">
            <summary>
            When implemented by a class, finds previous snippet in snippet collection with different id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.IsFirstSnippet(Alternet.Editor.Wpf.ICodeSnippetRange)">
            <summary>
            When implemented by a class, checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="range">Specified the code snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.IsFirstSnippet(System.Int32)">
            <summary>
            When implemented by a class, checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="index">Specified index of the snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.FindSnippet(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            When implemented by a class, locates code snippet at specified position.
            </summary>
            <param name="position">Position to locate code snippet.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of code snippet in the snippets collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ICodeSnippetRanges.Sort">
            <summary>
            When implemented by a class, sorts the snippet list.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IndentOptions">
            <summary>
            Defines behavior of Edit control when user presses Enter to insert new text line.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.IndentOptions.None">
            <summary>
            No indentation.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.IndentOptions.AutoIndent">
            <summary>
            Positions the cursor under the first non blank character of the preceding non blank line when user presses Enter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.IndentOptions.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting option <c>SyntaxOptions.SmartIndent</c> when user presses Enter.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.IndentOptions.UsePrevIndent">
            <summary>
            Uses spaces and tabs from previous line when indenting the line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.IndentOptions.JumpToIndent">
            <summary>
            Jumps to indent position rather than adding tabs or spaces.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IEdit">
            <summary>
            Represents properties and methods used for editing the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.ReadOnly">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.Overwrite">
             <summary>
             When implemented by a class, gets or sets a value indicating whether the inserted text overwrites existing text.
             </summary>
            
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.Modified">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.SingleLineMode">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.IndentOptions">
            <summary>
            When implemented by a class, gets or sets <c>Alternet.Editor.IndentOptions</c> for this class, allowing to customize behavior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IEdit.MaxLength">
            <summary>
            When implemented by a class, specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.Insert(System.String,System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.InsertFromFile(System.String)">
            <summary>
            When implemented by a class, inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.DeleteRight(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.DeleteLeft(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.InsertBlock(System.String,System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.InsertBlock(System.String[],System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.InsertBlock(Alternet.Editor.Wpf.ITextStrings,System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.InsertBlock(System.String[],System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.DeleteBlock(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            When implemented by a class, deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.CanDeleteBlock(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, determines if a specified block can be deleted.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if the block can be deleted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.BreakLine(System.Boolean)">
            <summary>
            When implemented by a class, breaks current line into two lines.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.UnBreakLine(System.Boolean)">
            <summary>
            When implemented by a class, concatenates lines at current position.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.NewLine">
            <summary>
            When implemented by a class, inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.NewLine(System.String@,System.Boolean)">
            <summary>
            When implemented by a class, inserts a line break at the current position with indentation.
            </summary>
            <param name="indent">pass desired indentation level, or null for automatic indentation</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.IndentLine">
            <summary>
            When implemented by a class, inserts spaces to the start of the current line.
            Number of spaces is calculated from indent options or <c>SyntaxParser</c> if assigned.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.IndentLine(System.String,System.Boolean)">
            <summary>
            When implemented by a class, inserts white space to the start of the current line.
            <param name="indent">white space string</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.GetIndentString">
            <summary>
            When implemented by a class, gets indentation string at current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.LineIsReadonly(System.Int32)">
            <summary>
            When implemented by a class, determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.LineIsHidden(System.Int32)">
            <summary>
            When implemented by a class, determines whether the given line is hidden.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is hidden; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.PositionIsReadonly(System.Drawing.Point)">
            <summary>
            When implemented by a class, determines whether the text at given position is readonly.
            </summary>
            <param name="position">Position in text coordinates.</param>
            <returns>True if the text can be edited at given position; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.SetLineReadonly(System.Int32[],System.Boolean)">
            <summary>
            When implemented by a class, sets readonly state for the given line.
            </summary>
            <param name="indexes">Line indexes.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.SetLineHidden(System.Int32[],System.Boolean)">
            <summary>
            When implemented by a class, sets hidden state for the given line.
            </summary>
            <param name="indexes">Line indexes.</param>
            <param name="hidden">Indicates hidden flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.SetLineHidden(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, sets hidden state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="hidden">Indicates hidden flag should be set or cleared.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetReadOnly">
            <summary>
            When implemented by a class, resets the <c>Readonly</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetOverWrite">
            <summary>
            When implemented by a class, resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetModified">
            <summary>
            When implemented by a class, resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetIndentOptions">
            <summary>
            When implemented by a class, resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetMaxLength">
            <summary>
            When implemented by a class, resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IEdit.ResetSingleLineMode">
            <summary>
            When implemented by a class, resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IHyperText">
            <summary>
            Represents methods to operate with hypertext sections within the text.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IHyperText.HyperText">
            <summary>
            When implemented by a class, occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHyperText.HighlightHyperText">
            <summary>
            When implemented by a class, gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IHyperText.UrlTable">
            <summary>
            When implemented by a class, represents hash table containing hyper-text characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IHyperText.IsHyperText(System.String)">
            <summary>
            When implemented by a class, indicates whether given text represents hypertext.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IHyperText.ResetHighlightHyperText">
            <summary>
            When implemented by a class, resets <c>HighlightUrls</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IInnerTextSource">
            <summary>
            Represents internal text source for Edit control.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ILineStyle">
            <summary>
            This represents a particular style of some text line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineStyle.Range">
            <summary>
            Specifies range where line style is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ILineStyle.Priority">
            <summary>
            Specifies priority of the line style.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ILineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            When implemented by a class, removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.RemoveLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.GetLineStyle(System.Int32)">
            <summary>
            When implemented by a class, finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="index">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.GetLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds specific linestyle in the line style collection located at the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
            <returns>The found line style if the search succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.GetLineStyles(System.Int32,System.Collections.Generic.IList{Alternet.Editor.Wpf.ILineStyle})">
            <summary>
            When implemented by a class, finds all linestyles in the <c>ILineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="index">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.SetLineStyle(Alternet.Common.IRange,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.SetLineStyle(System.Drawing.Point,Alternet.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is useful only for line styles having image indexes.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.Assign(Alternet.Editor.Wpf.ILineStyles)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all line styles within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ILineStyles.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all line styles starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.NavigateOptions">
            <summary>
            Defines specific options for navigation through the editor's content.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.BeyondEol">
            <summary>
            Specifies that user can navigate beyond end of line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.BeyondEof">
            <summary>
            Specifies that user can navigate beyond end of file.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.UpAtLineBegin">
            <summary>
            Specifies that the current position should move to the previous line when user click Left key and caret locates at the line begin.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.DownAtLineEnd">
            <summary>
            Specifies that the current position should move to the next line when user click Right key at the end of the line.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.MoveOnRightButton">
            <summary>
            Specifies that current should moves to the mouse pointer when a user clicks right mouse button.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NavigateOptions.KeepCaret">
            <summary>
            Specifies that caret should not move when modifying lines programmatically.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.INavigate">
            <summary>
            Represents properties and methods allowing to navigate within the Edit control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.INavigate.NavigateOptions">
            <summary>
            When implemented by a class, gets or sets navigating options.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.INavigate.Position">
            <summary>
            When implemented by a class, gets or sets the current position within the control's text content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.INavigate.PrevPosition">
            <summary>
            When implemented by a class, gets previous position within the control's text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.Navigate(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.MoveTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.MoveTo(System.Drawing.Point)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.MoveToChar(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.MoveToLine(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.MoveToLine(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.ValidatePosition(System.Drawing.Point@)">
            <summary>
            When implemented by a class, validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.StorePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.StorePositionWithUndo(System.Drawing.Point)">
            <summary>
            When implemented by a class, stores given position to stored position list preserving it for undo.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.RestorePosition(System.Int32)">
            <summary>
            When implemented by a class, restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.RestorePositionWithUndo(System.Int32)">
            <summary>
            When implemented by a class, restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.DisablePositionUpdate">
            <summary>
            When implemented by a class, prevents notification of changing of caret position until
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.EnablePositionUpdate">
            <summary>
            When implemented by a class, re-enables notification of changing of caret position
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.ResetNavigateOptions">
            <summary>
            When implemented by a class, resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.INavigate.SetNavigateOptions(Alternet.Editor.Wpf.NavigateOptions)">
            <summary>
            When implemented by a class, sets navigating options without validating position.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ISpelling">
            <summary>
            Represents properties and methods allowing check spelling of the text.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.ISpelling.WordSpell">
            <summary>
            When implemented by a class, occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISpelling.CheckSpelling">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISpelling.HasSpelling">
            <summary>
            When implemented by a class, gets boolean value indicating that editor has external spell checker assigned.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISpelling.SpellTable">
            <summary>
            When implemented by a class, represents a hash table containing delimiters.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISpelling.SpellDelimiters">
            <summary>
            When implemented by a class, gets or sets an array of characters used as delimiters between words in the text when performing spelling check.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ISpelling.SpellDelimiterString">
            <summary>
            When implemented by a class, gets or sets <c>SpellDelimiters</c> as a single string.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISpelling.IsWordCorrect(System.String,System.Drawing.Point)">
            <summary>
            When implemented by a class, checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <param name ="position">Specifies position of the word in the text</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISpelling.IsWordCorrect(System.String)">
            <summary>
            When implemented by a class, checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISpelling.ResetCheckSpelling">
            <summary>
            When implemented by a class, resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ISpelling.ResetSpellDelimiters">
            <summary>
            When implemented by a class, resets the <c>SpellDelimiters</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IStringExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            When implemented by a class, starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringExport.EndWrite">
            <summary>
            When implemented by a class, finalizes writing routine.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringExport.WriteLine(Alternet.Syntax.IStringItem)">
            <summary>
            When implemented by a class, saves a particular <c>IStringItem</c> object.
            </summary>
            <param name="item"><c>IStringItem</c> to save.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringExport.Write">
            <summary>
            When implemented by a class, saves entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.IStringImport">
            <summary>
            Provides methods to load text content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringImport.BeginRead(System.IO.TextReader,System.Object)">
            <summary>
            When implemented by a class, starts reading routine.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="userData">Data to be loaded.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringImport.EndRead">
            <summary>
            When implemented by a class, finalizes reading routine.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IStringImport.Read">
            <summary>
            When implemented by a class, loads entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITabulation">
            <summary>
            Represents properties and methods for handling tabulations within the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITabulation.TabStops">
            <summary>
            When implemented by a class, gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITabulation.UseSpaces">
            <summary>
            When implemented by a class, gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.ResetTabStops">
            <summary>
            When implemented by a class, resets the <c>ITabulation.TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.ResetUseSpaces">
            <summary>
            When implemented by a class, resets the <c>ITabulation.UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetTabString(System.String)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetTabString(System.String,Alternet.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs).</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetPrevTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetIndentString(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.TabPosToPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.PosToTabPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITabulation.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Position of the character in the string.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextErrors">
            <summary>
            Represents properties and methods to handle syntax error collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextErrors.SyntaxErrors">
            <summary>
            When implemented by a class, represents a syntax errors collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextErrors.GetSyntaxErrorAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, gets syntax error at specified position.
            </summary>
            <param name="x">X-coordinate or the position to evaluate.</param>
            <param name="y">Y-coordinate or the position to evaluate.</param>
            <returns><c>ISyntaxError</c> object at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextErrors.HighlightSyntaxErrors">
            <summary>
            When implemented by a class, highlights syntax errors.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextErrors.UnhighlightSyntaxErrors">
            <summary>
            When implemented by a class, removes syntax errors highlighting.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextErrors.InvalidateSyntaxErrors">
            <summary>
            When implemented by a class, invalidates highlighting of syntax errors.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextExport">
            <summary>
            Represents properties methods to save text content using different formats.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextExport.LineTerminator">
            <summary>
            When implemented by a class, gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            When implemented by a class, saves content to the given file with specified exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.SaveFile(System.String,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves content to the given file with specified exported and specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.SaveStream(System.IO.Stream,Alternet.Editor.Wpf.IStringExport,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.SaveStream(System.IO.TextWriter,Alternet.Editor.Wpf.IStringExport)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="writer">The TextWriter object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextExport.GetFlowDocument(Alternet.Editor.Wpf.FlowDocumentExportOptions)">
            <summary>
            When implemented by a class, gets FlowDocument object describes ITextExport content accordingly to specified settings.
            </summary>
            <param name="options">Specifies settings to describe ITextExport content.</param>
            <returns>FlowDocument describes ITextExport content.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextImport">
            <summary>
            Represents methods to load text content in different formats.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextImport.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            When implemented by a class, loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextImport.LoadFile(System.String,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextImport.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextImport.LoadStream(System.IO.Stream,Alternet.Editor.Wpf.IStringImport,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to load the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextImport.LoadStream(System.IO.TextReader,Alternet.Editor.Wpf.IStringImport)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="reader">The TextReader object to load the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.NotifyState">
            <summary>
            Represents the last changes to the text stored in the text source.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.PositionChanged">
            <summary>
            Current position in the text was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.CountChanged">
            <summary>
            Amount of lines in the text was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.OverWriteChanged">
            <summary>
            Overwrite mode was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.ModifiedChanged">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SyntaxChanged">
            <summary>
            Syntax scheme or Lexer was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.ReadOnlyChanged">
            <summary>
            ReadOnly state was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.BlockChanged">
            <summary>
            Block of text was changed and needs invalidating.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.BookMarkChanged">
            <summary>
            Bookmark was set or removed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.IncrementalSearchChanged">
            <summary>
            Incremental search state was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SearcRectChanged">
            <summary>
            Rectangle that holds last found text was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.Undo">
            <summary>
            Undo operation was performed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.Edit">
            <summary>
            Text was edited.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.Modified">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.Outline">
            <summary>
            Outline section was collapsed or expanded.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.WordWrap">
            <summary>
            Lines were wrapped.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.GotoBookMark">
            <summary>
            Position of the text was changed due to moving to the bookmark.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SelectBlock">
            <summary>
            Block of text was selected or unselected.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.FirstSearchChanged">
            <summary>
            <c>TextEditor.FirstSearch</c> property was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.CenterLine">
            <summary>
            <c>TextEditor</c> should center current line if it's not in view.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.TextParsed">
            <summary>
            Text was completely parsed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SmartFormat">
            <summary>
            Selection was formatted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.StringsChanged">
            <summary>
            Strings was changed programmatically.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.PageOptionsChanged">
            <summary>
            Page options was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.ScrollingOptionsChanged">
            <summary>
            Scrolling options was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.ScrollingOriginChanged">
            <summary>
            Window was scrolled.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SelectionOptionsChanged">
            <summary>
            Selection options was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SelectionChanged">
            <summary>
            Selection options was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.SelectedTextChanged">
            <summary>
            Selected text was changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.NotifyState.TextLineChanged">
            <summary>
            Text was modified and changed.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextNotify">
            <summary>
            Represents properties and methods to perform Text Source notification.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextNotify.State">
            <summary>
            When implemented by a class, gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextNotify.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextNotify.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextNotify.SelectBlockRect">
            <summary>
            When implemented by a class, represents a rectangular block of selected text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextNotify.BeginUpdate(Alternet.Editor.Wpf.UpdateReason)">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextNotify.LinesChanged(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextNotify.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextParsing">
            <summary>
            Represents properties and methods to perform Text Source parsing.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextParsing.Lexer">
            <summary>
            When implemented by a class, gets or sets an object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextParsing.ParserLine">
            <summary>
            When implemented in a class, gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.SetLastParsed(System.Int32)">
            <summary>
            When implemented by a class, updates the last parsed line and resets first changed line to it's default value.
            </summary>
            <param name="index">New value of the last parsed line.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.ParseString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.ParseStrings(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis specified strings.
            </summary>
            <param name="first">Index of the first line to parse.</param>
            <param name="last">Index of the last line to parse.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.ParseToString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedQuickInfoTips">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can obtain short description for syntax tokens within its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedParse">
            <summary>
            When implemented by a class, indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedFormatText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can format its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedCacheIndent">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can reuse previous indentation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedIndentText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can indent its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedOutlineText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can outline its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedAutoComplete">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should try to autocomplete statements.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedReparseTextOnLineChange">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should replace text when changing the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedAdvancedFormatText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should format indetnation and spaces upon text pasting or auto-completing.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedFormatTextOnLineChange">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should format spaces and case when changing the current line.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedCodeCompletion">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can provide code completion operation for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedCodeCompletionTabs(Alternet.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, indicates code completion content can be filtered based on its priority.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedCodeFixes">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can provide code fixes operations for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedCodeRefactors">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can provide code refactor operations for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.NeedStructureGuideLines">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can structure guidelines for its content.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.SupportsAsyncParsing">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can perform syntax analysis asynchronously.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.ProcessAutoComplete(System.String@)">
            <summary>
            When implemented by a class, inserts end-of-block code fragment if needed.
            </summary>
            <param name="code">Code fragment to be inserted.</param>
            <returns>True if end-of-block is inserted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.FormatText">
            <summary>
            When implemented by a class, formats and outlines <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.FormatText(System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, formats and outlines <c>TextSource</c> text using attached <c>Lexer</c>.
            <param name="immediate">Indicates if parsing should be performed without instantiating parser thread.</param>
            <param name="notify">Indicates if attached editors should be notified on reparsing</param>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.GetStructureGuideLines(System.Int32,System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, gets list of guide lines.
            </summary>
            <param name="line">Start of guide line.</param>
            <param name="guideLines">List of guide lines coordinates</param>
            <returns>Number of guidelines found.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextParsing.IsContentDivider(System.Int32)">
            <summary>
            When implemented by a class, gets boolean value indicating whether text content is divided at given line.
            </summary>
            <param name="index">Line to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.SearchOptions">
            <summary>
            Defines options for search and replace operations.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.CaseSensitive">
            <summary>
            Specifies that search should be case sensitive.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.WholeWordsOnly">
            <summary>
            Searches only for whole words, rather than matching the text as it occurs within words.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.RegularExpressions">
            <summary>
            Specifies that text to find represents notations for patterns of text rather than the literal character.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.BackwardSearch">
            <summary>
            Specifies that search should be executed towards the beginning of text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.SelectionOnly">
            <summary>
            Searches only within the selected text in the currently active document.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.EntireScope">
            <summary>
            Specifies that search should start from the beginning of text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.SearchHiddenText">
            <summary>
            Specifies that the search includes invisible text, such as an collapsed section.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.FindTextAtCursor">
            <summary>
            Specifies that text at the current position of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.PromptOnReplace">
            <summary>
            Specifies that confirm dialog should appear before replacing found text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.FindSelectedText">
            <summary>
            Specifies that selected text of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.CycledSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.SilentSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.AllDocuments">
            <summary>
            Search is performed in all documents.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.CurrentProject">
            <summary>
            Search is performed in current project.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.EntireSolution">
            <summary>
            Search is performed in entire solution.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.SearchOptions.DisplayIncrementalSearchDiaog">
            <summary>
            Incremental search is performed with dialog.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextSearch">
            <summary>
            Represents method used to search text within the string collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSearch.Find(System.String,Alternet.Editor.Wpf.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.Boolean)">
            <summary>
            When implemented by a class, searches for given text within the control's text content.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successful.</param>
            <param name="searchHiddenLines">Specifies if hidden lines should be processed.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextSnippets">
            <summary>
            Represents properties and methods to provide code snippet functionality.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSnippets.CurrentSnippet">
            <summary>
            When implemented by a class, gets or sets the current <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSnippets.AutoInsertSnippet">
            <summary>
            When implemented by a class, gets or sets auto-inserted <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSnippets.CodeSnippets">
            <summary>
            When implemented by a class, gets or sets <c>ICodeSnippetRangeList</c> for Edit control.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSnippets.BeginUpdateSnippet">
            <summary>
            When implemented by a class, prevents the Edit control from updating snippets until the <c>EndUpdateSnippet</c> method is called.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSnippets.EndUpdateSnippet">
            <summary>
            When implemented by a class, resumes updating snippets after updating is suspended by the <c>BeginUpdateSnippet</c> method.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSnippets.HighlightCodeSnippets">
            <summary>
            When implemented by a class, highlights code snippets using appropriate style.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSnippets.UnhighlightCodeSnippets">
            <summary>
            When implemented by a class, removes highlighting from code snippets and clears snippet collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSnippets.GetCodeSnippetRangeAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, locates code snippet at specified position.
            </summary>
            <param name="position">Position to evaluate.</param>
            <returns><c>ICodeSnippetRange</c> at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextSource">
            <summary>
            Represents properties and methods that provide interface between edited text and Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.FileName">
            <summary>
            When implemented by a class, gets or sets the name of the file that holds text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.Edits">
            <summary>
            When implemented by a class, represents a collection of <c>TextEditor</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.Lines">
            <summary>
            When implemented by a class, represents the object that implements <c>ITextStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.Text">
            <summary>
            When implemented by a class, gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.LineStyles">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineStyles</c> interface holding collection of line styles for this document.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.BookMarks">
            <summary>
            When implemented by a class, represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determining particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.ActiveEdit">
            <summary>
            When implemented by a class, gets or sets an object that represent currently active (focused) <c>TextEditor</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.ThreadAction">
            <summary>
            When implemented by a class, returns method executed in thread when parsing.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.OptimizedForMemory">
            <summary>
            When implemented by a class, specifies whether internal text representation should optimized memory usage.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.References">
            <summary>
            When implemented by a class, gets or sets <c>IRangeList</c> of found references for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.SearchResults">
            <summary>
            When implemented by a class, gets <c>IRangeList</c> of search results highlighted by TempHighlightSearchResults.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.HighlightReferences">
            <summary>
            When implemented by a class, specifies that edit control should highlight found references.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.SymbolReference">
            <summary>
            When implemented by a class, gets or sets <c>IRange</c> of the symbol reference for Edit control.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextSource.HighlightMatchingBlocks">
            <summary>
            When implemented by a class, specifies that edit control should highlight begin/end blocks.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            When implemented by a class, converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.CreateStringItem(System.String)">
            <summary>
            Create a new <c>IStrItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStrItem</c> contain.</param>
            <returns>Created <c>IStrItem</c> object.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.Clear">
            <summary>
            When implemented by a class, clears content of the <c>TextSource</c>
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempHighlightReferences">
            <summary>
            When implemented by a class, highlights found references.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempUnhighlightReferences">
            <summary>
            When implemented by a class, unhighlights references highlighted with previous call of TempHighlightReferences.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempHighlightSearchResults(Alternet.Common.IRangeList)">
            <summary>
            When implemented by a class, highlights search results.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempHighlightSelectedWords(Alternet.Common.IRangeList)">
            <summary>
            When implemented by a class, highlights selected words.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempUnhighlightSearchResults">
            <summary>
            When implemented by a class, unhighlights  search results highlighted with previous call of TempHighlightSearchResults.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextSource.TempUnhighlightSelectedWords">
            <summary>
            When implemented by a class, unhighlights selected words highlighted with previous call of TempHighlightSelectedWords.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextStrings">
            <summary>
            Represents a collection of strings with extended possibilities.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.Source">
            <summary>
            When implemented by a class, gets the text source owning the <c>ITextStrings</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.RemoveTrailingSpaces">
            <summary>
            When implemented by a class, gets or set a boolean value that indicates whether <c>ITextStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.Owner">
            <summary>
            When implemented by a class, gets or set the <c>TextEditor</c> control that owns this collection.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ITextStrings.DelimTable">
            <summary>
            When implemented by a class, represents delimiters as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.GetLength(System.Int32)">
            <summary>
            When implemented by a class, returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.Changed(System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.Changed(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Character from specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Character from specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.AfterSave">
            <summary>
            When implemented by a class, performs additional actions after <c>ITextStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.Assign(Alternet.Editor.Wpf.ITextStrings)">
            <summary>
            When implemented by a class, copies the contents from another <c>ITextStrings</c> object.
            </summary>
            <param name="source">Specifies <c>ITextStrings</c> to assign.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.GetTabString(System.String@,Alternet.Syntax.StringItemInfo[]@,System.Boolean,Alternet.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="str">Text to convert.</param>
            <param name="data">Color data of specified string.</param>
            <param name="needData">Indicates whether method should return color data.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs).</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextStrings.SetTextAndData(System.String,System.String)">
            <summary>
            When implemented by a class, sets the text and color data at the same time.
            </summary>
            <param name="text">Text of the strings.</param>
            <param name="data">Color data associated with the text.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ThreadProc">
            <summary>
            Represents a method that will handle thread method.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ITextThread">
            <summary>
            Represents properties and methods allowing to execute actions in a thread.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextThread.StartThread(Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc)">
            <summary>
            When implemented in a class, executes action in thread.
            </summary>
            <param name="action">Specifies action to execute in the thread.</param>
            <param name="start">Specifies action to execute in the thread.</param>
            <param name="end">Specifies action to execute when the thread starts.</param>
            <param name="stop">Specifies action to execute when a user aborts thread execution.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.ITextThread.StopThread(Alternet.Editor.Wpf.ThreadProc,System.Boolean)">
            <summary>
            When implemented in a class, aborts executing action in thread.
            </summary>
            <param name="action">Specifies action to abort.</param>
            <param name="wait">Specifies whether calling application should wait for background thread to finish execution.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ThreadProcsEventArgs">
            <summary>
            Provides data for the actions executed in a separate thread.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ThreadProcsEventArgs.#ctor(Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc,Alternet.Editor.Wpf.ThreadProc)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.ThreadProcsEventArgs"/> with specified parameters.
            </summary>
            <param name="action">Specifies action to execute in a thread.</param>
            <param name="start">Specifies action to execute when the thread starts.</param>
            <param name="end">Specifies action to execute when the thread ends.</param>
            <param name="stop">Specifies action to execute when a user aborts thread execution.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ThreadProcsEventArgs.Action">
            <summary>
            Gets or sets action to execute in a thread.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ThreadProcsEventArgs.Start">
            <summary>
            Gets or sets action to execute when the thread starts.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ThreadProcsEventArgs.End">
            <summary>
            Gets or sets action to execute when the thread ends.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ThreadProcsEventArgs.Stop">
            <summary>
            Gets or sets action to execute when a user aborts thread execution.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ThreadProcsEventArgs.Aborted">
            <summary>
            Gets or sets a value indicating whether thread execution was aborted.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoOptions">
            <summary>
            Defines undo/redo behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.AllowUndo">
            <summary>
            Allows undo/redo operations.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.GroupUndo">
            <summary>
            Specifies that last editing command should be undone together with any subsequent editing commands of the same type.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.UndoNavigations">
            <summary>
            Specifies that navigate operations can be undone.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.UndoAfterSave">
            <summary>
            Allows undo operation after a save.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOptions.UngroupBreaks">
            <summary>
            Specifies whether single break and unbreak operation should be undone rather than subsequent operations.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoFlags">
            <summary>
            Defines additional flags for undo/redo operation.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoFlags.FirstTime">
            <summary>
            Indicates first undo operation in the undo sequences.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoFlags.Saved">
            <summary>
            Indicates that undoable operation occurred prior to saving editor's content.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UpdateReason">
            <summary>
            Defines reason of updating control's text content.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.Navigate">
            <summary>
            Specifies that current position in the control's text content changed.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.Insert">
            <summary>
            Specifies that some text inserted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.Delete">
            <summary>
            Specifies that some text deleted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.Break">
            <summary>
            Specifies that text line was broken into two lines.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.UnBreak">
            <summary>
            Specifies that two lines concatenated.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.DeleteBlock">
            <summary>
            Specifies that some block of text deleted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.InsertBlock">
            <summary>
            Specifies that some block of text inserted.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UpdateReason.Other">
            <summary>
            Specifies another reason of the control's text content updating.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.UndoOperation">
            <summary>
            Defines a type of the operation to undo.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.Insert">
            <summary>
            Specifies operation that inserts some text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.Delete">
            <summary>
            Specifies operation that deletes some text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.Break">
            <summary>
            Specifies operation that breaks text line into two lines.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.UnBreak">
            <summary>
            Specifies operation that concatenates two text lines.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.InsertBlock">
            <summary>
            Specifies operation that inserts some block of text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.DeleteBlock">
            <summary>
            Specifies operation that deletes some block of text.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.Navigate">
            <summary>
            Specifies operation that navigates within text content.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.NavigateEx">
            <summary>
            Specifies operation that navigates within text content. (this operation is always undone, regardless of UndoOptions).
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.UndoBlock">
            <summary>
            Specifies that subsequent undo operations will be undone at once.
            </summary>
        </member>
        <member name="F:Alternet.Editor.Wpf.UndoOperation.Unknown">
            <summary>
            Specifies unknown operation.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IUndo">
            <summary>
            Represents properties and methods to perform undo/redo operation with the text.
            </summary>
        </member>
        <member name="E:Alternet.Editor.Wpf.IUndo.UndoEvent">
            <summary>
            When implemented by a class, occurs when undo/redo operation performed.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.UndoOptions">
            <summary>
            When implemented by a class, gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.ModifiedLines">
            <summary>
            When implemented by a class, gets modified lines information.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.ModifiedLineRegions">
            <summary>
            When implemented by a class, gets modified lines information, grouped in regions.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.UndoLimit">
            <summary>
            When implemented by a class, gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.UndoUpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.UndoList">
            <summary>
            When implemented by a class, provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndo.RedoList">
            <summary>
            When implemented by a class, provides an indexed access to redo data.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.Undo(System.Boolean)">
            <summary>
            When implemented by a class, performs the last undo operation.
            </summary>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.Undo(Alternet.Editor.Wpf.IUndoData,System.Boolean)">
            <summary>
            When implemented by a class, performs the single undo operation.
            </summary>
            <param name="undoData">Data related to the undo operation.</param>
            <param name="withChange">Indicates if the change needs to be translated to the parser.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.Redo">
            <summary>
            When implemented by a class, performs the last redo operation.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.CanUndo">
            <summary>
            When implemented by a class, indicating whether the undo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.CanRedo">
            <summary>
            When implemented by a class, indicating whether the redo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.ClearUndo">
            <summary>
            When implemented by a class, clears list of undo operations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.ClearRedo">
            <summary>
            When implemented by a class, clears list of redo operations.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.DisableUndo">
            <summary>
            When implemented by a class, disables recording of undo/redo operations.
            <seealso cref="M:Alternet.Editor.Wpf.IUndo.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.EnableUndo">
            <summary>
            When implemented by a class, re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="M:Alternet.Editor.Wpf.IUndo.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.BeginUndoUpdate">
            <summary>
            When implemented by a class, allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.EndUndoUpdate">
            <summary>
            When implemented by a class, ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.LineIsModified(System.Int32)">
            <summary>
            When implemented by a class, indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.LineIsModified(System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since the last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.ResetUndoOptions">
            <summary>
            When implemented by a class, resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.ResetUndoLimit">
            <summary>
            When implemented by a class, resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndo.AddUndo(Alternet.Editor.Wpf.UndoOperation,System.Object)">
            <summary>
            When implemented by a class, stores undo operation in the appropriate list.
            </summary>
            <param name="operation">Operation to store.</param>
            <param name="data">Data to store.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.ModifiedLine">
            <summary>
            Represents information about a particular line in the text whose content is modified.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ModifiedLine.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.ModifiedLine"/> class with specified parameters.
            </summary>
            <param name="index">Line index.</param>
            <param name="saved">Line state.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifiedLine.Index">
            <summary>
            Gets line index.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifiedLine.Saved">
            <summary>
            Gets a value indicating whether the line has not changed since the last saving.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IUndoData">
            <summary>
            Represents data for a single undo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.Operation">
            <summary>
            When implemented by a class, represents the type of the undo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.Reason">
            <summary>
            When implemented by a class, represents the reason of the undo operation.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.UpdateCount">
            <summary>
            When implemented by a class, keeps track of nested undo operations.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.UndoFlag">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.Data">
            <summary>
            When implemented by a class, represents the object associated with this <c>IUndoData</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoData.Position">
            <summary>
            When implemented by a class, represents the position of the undoable operation within the text.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IUndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IUndoList.UndoCount">
            <summary>
            When implemented by a class, determines number of undo operations stored in the list.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndoList.Clear">
            <summary>
            When implemented by a class, clears entire collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndoList.Add(Alternet.Editor.Wpf.IUndoData)">
            <summary>
            When implemented by a class, adds an item to the collection.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IUndoList.RemoveAt(System.Int32)">
            <summary>
            When implemented by a class, removes item at the specified index.
            </summary>
            <param name="index">Specifies index of item to remove.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.IWordBreak">
            <summary>
            Represents properties and methods used to separate words within Edit control content.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWordBreak.Delimiters">
            <summary>
            When implemented by a class, gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IWordBreak.DelimiterString">
            <summary>
            When implemented by a class, gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.IsDelimiter(System.String,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.IsWhitespace(System.String,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of given string is a whitespace character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.IsDelimiter(System.Char)">
            <summary>
            When implemented by a class, indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Char[])">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetTextAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="pos">Specifies an index of the line.</param>
            <param name="line">Specifies index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.GetTextAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IWordBreak.ResetDelimiters">
            <summary>
            When implemented by a class, resets the <c>Delimiters</c> to the default value.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.ModifiedLineRegion">
            <summary>
            Represents information about a scope of lines in the text whose content is modified.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.ModifiedLineRegion.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Editor.Wpf.ModifiedLineRegion"/> class with specified parameters.
            </summary>
            <param name="startLineIndex">Start index of the region area.</param>
            <param name="lineCount">Number of modified lines.</param>
            <param name="saved">Line state.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifiedLineRegion.StartLineIndex">
            <summary>
            Gets the start index of the region area.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifiedLineRegion.LineCount">
            <summary>
            Gets the number of modified lines.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.ModifiedLineRegion.Saved">
            <summary>
            Gets a value indicating whether the lines inside this region have not changed since the last saving.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.IVisualTheme">
            <summary>
            Properties and methods for representing a single visual theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.Name">
            <summary>
            When implemented by a class, gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.ReadOnly">
            <summary>
            When implemented by a class, gets or sets a bool value that indicates
            whether or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.Font">
            <summary>
            When implemented by a class, gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.LexStyles">
            <summary>
            When implemented by a class, gets or sets the LexStyle array used for the
            color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.LineStyles">
            <summary>
            When implemented by a class, gets or sets the IEditLineStyle array used for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.ImagesColor">
            <summary>
            When implemented by a class, gets or sets the type of background (light or dark) for the color theme.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.IVisualTheme.Item(System.String)">
            <summary>
            When implemented by a class, specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="name">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the name parameter, or null for an invalid name.</returns>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.LoadFromEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            When implemented by a class, changes values stored in the <c>IVisualTheme</c> accordingly to property values of <c>TextEditor</c> control.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to copy properties from.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.ApplyToCodeCompletionBox(Alternet.Editor.Wpf.ICodeCompletionBox)">
            <summary>
            When implemented by a class, assigns color teme properties to a given <c>ICodeCompletionBox</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionBox">Specifies <c>ICodeCompletionBox</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.ApplyToCodeCompletionButton(Alternet.Editor.Wpf.ICodeCompletionButton)">
            <summary>
            When implemented by a class, assigns color teme properties to a given <c>ICodeCompletionButton</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionButton">Specifies <c>ICodeCompletionButton</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.ApplyToCodeCompletionHint(Alternet.Editor.Wpf.ICodeCompletionHint)">
            <summary>
            When implemented by a class, assigns color teme properties to a given <c>ICodeCompletionHint</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="codeCompletionHint">Specifies <c>ICodeCompletionHint</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.ApplyToEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            When implemented by a class, assigns color teme properties to a given <c>TextEditor</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="edit">Specifies <c>TextEditor</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.ApplyLexStylesToEdit(Alternet.Editor.Wpf.TextEditor)">
            <summary>
            When implemented by a class, assigns only lex style properties to a given <c>TextEditor</c> according to values stored in the <c>IVisualTheme</c>.
            </summary>
            <param name="edit">Specifies <c>TextEditor</c> to assign settings.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.IVisualTheme.Assign(Alternet.Editor.Wpf.IVisualTheme)">
            <summary>
            When implemented by a class, copies the content from another <c>IVisualTheme</c> object.
            </summary>
            <param name="source">Specifies <c>IVisualTheme</c> to assign.</param>
        </member>
        <member name="T:Alternet.Editor.Wpf.MediaFont">
            <summary>
            Defines a particular format for text, including FontFamily, size, and style attributes.
            </summary>
        </member>
        <member name="M:Alternet.Editor.Wpf.MediaFont.#ctor(System.Windows.Media.FontFamily,System.Double,System.Windows.FontStretch,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Initializes a new instance of the <c>MediaFont</c> class with specified parameters.
            </summary>
            <param name="family">Specifies FontFamily of this new instance.</param>
            <param name="size">Specifies size of this new instance.</param>
            <param name="stretch">Specifies FontStretch of this new instance.</param>
            <param name="style">Specifies FontStyle of this new instance.</param>
            <param name="weight">Specifies FontWeight of this new instance.</param>
        </member>
        <member name="M:Alternet.Editor.Wpf.MediaFont.#ctor(System.Windows.Media.FontFamily,System.Double,System.Windows.FontStyle)">
            <summary>
            Initializes a new instance of the <c>MediaFont</c> class with specified parameters.
            </summary>
            <param name="family">Specifies FontFamily of this new instance.</param>
            <param name="size">Specifies size of this new instance.</param>
            <param name="style">Specifies FontStyle of this new instance.</param>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Family">
            <summary>
            Gets or sets the FontFamily associated with this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Name">
            <summary>
            Gets or sets face name of this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Size">
            <summary>
            Gets or sets size of this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Stretch">
            <summary>
            Gets or sets FontStretch of this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Style">
            <summary>
            Gets or sets FontStyle of this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.MediaFont.Weight">
            <summary>
            Gets or sets FontWeight of this <c>MediaFont</c>.
            </summary>
        </member>
        <member name="T:Alternet.Editor.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Properties.Resources.LeftArrow">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Alternet.Editor.Wpf.Properties.Resources.LeftArrowHighDpi">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlFromXamlConverter">
            <summary>
            HtmlFromXamlConverter is a static class that takes an XAML string
            and converts it into HTML.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.ConvertXamlToHtml(System.String)">
            <summary>
            Main entry point for Xaml-to-Html converter.
            Converts a xaml string into html string.
            </summary>
            <param name="xamlString">
            Xaml string to convert.
            </param>
            <returns>
            Html string produced from a source xaml.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.WriteFlowDocument(System.Xml.XmlTextReader,System.Xml.XmlTextWriter)">
            <summary>
            Processes a root level element of XAML (normally it's FlowDocument element).
            </summary>
            <param name="xamlReader">
            XmlTextReader for a source xaml.
            </param>
            <param name="htmlWriter">
            XmlTextWriter producing resulting html.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.WriteFormattingProperties(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Reads attributes of the current xaml element and converts
            them into appropriate html attributes or css styles.
            </summary>
            <param name="xamlReader">
            XmlTextReader which is expected to be at XmlNodeType.Element
            (opening element tag) position.
            The reader will remain at the same level after function complete.
            </param>
            <param name="htmlWriter">
            XmlTextWriter for output html, which is expected to be in
            after WriteStartElement state.
            </param>
            <param name="inlineStyle">
            String builder for collecting css properties for inline STYLE attribute.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.WriteElementContent(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Reads a content of current xaml element, converts it.
            </summary>
            <param name="xamlReader">
            XmlTextReader which is expected to be at XmlNodeType.Element
            (opening element tag) position.
            </param>
            <param name="htmlWriter">
            May be null, in which case we are skipping the xaml element;
            without producing any output to html.
            </param>
            <param name="inlineStyle">
            StringBuilder used for collecting css properties for inline STYLE attribute.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.AddComplexProperty(System.Xml.XmlTextReader,System.Text.StringBuilder)">
            <summary>
            Converts an element notation of complex property into.
            </summary>
            <param name="xamlReader">
            On entry this XmlTextReader must be on Element start tag;
            on exit - on EndElement tag.
            </param>
            <param name="inlineStyle">
            StringBuilder containing a value for STYLE attribute.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.WriteElement(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Converts a xaml element into an appropriate html element.
            </summary>
            <param name="xamlReader">
            On entry this XmlTextReader must be on Element start tag;
            on exit - on EndElement tag.
            </param>
            <param name="htmlWriter">
            May be null, in which case we are skipping xaml content
            without producing any html output.
            </param>
            <param name="inlineStyle">
            StringBuilder used for collecting css properties for inline STYLE attributes on every level.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlFromXamlConverter.ReadNextToken(System.Xml.XmlReader)">
            <summary>
            Reads several items from xamlReader skipping all non-significant stuff.
            </summary>
            <param name="xamlReader">
            XmlTextReader from tokens are being read.
            </param>
            <returns>
            True if new token is available; false if end of stream reached.
            </returns>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlTokenType">
            <summary>
            Types of lexical tokens for html-to-xaml converter.
            </summary>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlLexicalAnalyzer">
            <summary>
            Lexical analyzer class
            recognizes tokens as groups of characters separated by arbitrary amounts of whitespace
            also classifies tokens according to type.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.#ctor(System.String)">
            <summary>
            Initializes the _inputStringReader member with the string to be read
            also sets initial values for nextCharacterCode and nextTokenType.
            </summary>
            <param name="inputTextString">
            Text string to be parsed for xml content.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.GetNextContentToken">
            <summary>
            Retrieves next recognizable token from input string
            and identifies its type
            if no valid token is found, the output parameters are set to null
            if end of stream is reached without matching any token, token type
            parameter is set to EOF.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.GetNextTagToken">
            <summary>
            Unconditionally returns a token which is one of: TagEnd, EmptyTagEnd, Name, Atom or EndOfStream
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.GetNextEqualSignToken">
            <summary>
            Unconditionally returns equal sign token. Even if there is no
            real equal sign in the stream, it behaves as if it were there.
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.GetNextAtomToken">
            <summary>
            Unconditionally returns an atomic value for an attribute
            Even if there is no appropriate token it returns Atom value
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.GetNextCharacter">
            <summary>
            Advances a reading position by one character code
            and reads the next available character from a stream.
            This character becomes available as NextCharacter property.
            </summary>
            <remarks>
            Throws InvalidOperationException if attempted to be called on EndOfStream
            condition.
            </remarks>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.SkipWhiteSpace">
            <summary>
            Skips whitespace in the input string
            leaves the first non-whitespace character available in the NextCharacter property
            this may be the end-of-file character, it performs no checking.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.IsGoodForNameStart(System.Char)">
            <summary>
            Checks if a character can be used to start a name
            if this check is true then the rest of the name can be read.
            </summary>
            <param name="character">
            Character value to be checked.
            </param>
            <returns>
            True if the character can be the first character in a name
            false otherwise.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.IsGoodForName(System.Char)">
            <summary>
            Checks if a character can be used as a non-starting character in a name
            uses the IsExtender and IsCombiningCharacter predicates to see
            if a character is an extender or a combining character.
            </summary>
            <param name="character">
            Character to be checked for validity in a name.
            </param>
            <returns>
            True if the character can be a valid part of a name.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.IsCombiningCharacter(System.Char)">
            <summary>
            Identifies a character as being a combining character, permitted in a name
            TODO: only a placeholder for now but later to be replaced with comparisons against
            the list of combining characters in the XML documentation.
            </summary>
            <param name="character">
            Character to be checked.
            </param>
            <returns>
            True if the character is a combining character, false otherwise.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.IsExtender(System.Char)">
            <summary>
            Identifies a character as being an extender, permitted in a name
            TODO: only a placeholder for now but later to be replaced with comparisons against
            the list of extenders in the XML documentation.
            </summary>
            <param name="character">
            Character to be checked.
            </param>
            <returns>
            True if the character is an extender, false otherwise.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.ReadDynamicContent">
            <summary>
            skips dynamic content starting with '&lt;![' and ending with ']>'
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.ReadComment">
            <summary>
            skips comments starting with '&lt;!-' and ending with '-->'
            NOTE: 10/06/2004: processing changed, will now skip anything starting with
            the "&lt;!-"  sequence and ending in "!>" or "->", because in practice many html pages do not
            use the full comment specifying conventions
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.ReadUnknownDirective">
            <summary>
            skips past unknown directives that start with "&lt;!" but are not comments or Cdata
            ignores content of such directives until the next ">" character
            applies to directives such as DOCTYPE, etc that we do not presently support
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlLexicalAnalyzer.SkipProcessingDirective">
            <summary>
            skips processing directives starting with the characters '&lt;?' and ending with '?>'
            NOTE: 10/14/2004: IE also ends processing directives with a />, so this function is
            being modified to recognize that condition as well
            </summary>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlParser">
            <summary>
            HtmlParser class accepts a string of possibly badly formed Html, parses it and returns a string
            of well-formed Html that is as close to the original string in content as possible.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlParser.#ctor(System.String)">
            <summary>
            Constructor. Initializes the htmlLexicalAnalyzer element with the given input string.
            </summary>
            <param name="inputString">
            String to parsed into well-formed Html.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlParser.ParseHtml(System.String)">
            <summary>
            Instantiates an HtmlParser element and calls the parsing function on the given input string.
            </summary>
            <param name="htmlString">
            Input string of possibly badly-formed Html to be parsed into well-formed Html.
            </param>
            <returns>
            XmlElement rep.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlParser.ExtractHtmlFromClipboardData(System.String)">
            <summary>
            Extracts Html string from clipboard data by parsing header information in htmlDataString.
            </summary>
            <param name="htmlDataString">
            String representing Html clipboard data. This includes Html header.
            </param>
            <returns>
            String containing only the Html data part of htmlDataString, without header.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlParser.AddHtmlClipboardHeader(System.String)">
            <summary>
            Adds Xhtml header information to Html data string so that it can be placed on clipboard.
            </summary>
            <param name="htmlString">
            Html string to be placed on clipboard with appropriate header.
            </param>
            <returns>
            String wrapping htmlString with appropriate Html header.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlParser.ParseHtmlContent">
            <summary>
            Parses the stream of html tokens starting
            from the name of top-level element.
            Returns XmlElement representing the top-level
            html element.
            </summary>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlSchema">
            <summary>
            HtmlSchema class
            maintains static information about HTML structure
            can be used by HtmlParser to check conditions under which an element starts or ends, etc.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.#cctor">
            <summary>
            Static constructor, initializes the ArrayLists
            that hold the elements in various sub-components of the schema
            e.g _htmlEmptyElements, etc.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.IsEmptyElement(System.String)">
            <summary>
            Returns true when xmlElementName corresponds to empty element.
            </summary>
            <param name="xmlElementName">
            String representing name to test.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.IsBlockElement(System.String)">
            <summary>
            Returns true if xmlElementName represents a block formatting element.
            It used in an algorithm of transferring inline elements over block elements
            in HtmlParser.
            </summary>
            <param name="xmlElementName"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.IsInlineElement(System.String)">
            <summary>
            Returns true if the xmlElementName represents an inline formatting element.
            </summary>
            <param name="xmlElementName"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.IsKnownOpenableElement(System.String)">
            <summary>
            It is a list of known html elements which we
            want to allow to produce by HTML parser,
            but don't want to act as inline, block or no-scope.
            Presence in this list will allow to open
            elements during html parsing, and adding the
            to a tree produced by html parser.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.ClosesOnParentElementEnd(System.String)">
            <summary>
            Returns true when xmlElementName closes when the outer element closes
            this is true of elements with optional start tags.
            </summary>
            <param name="xmlElementName">
            String representing name to test.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.ClosesOnNextElementStart(System.String,System.String)">
            <summary>
            Returns true if the current element closes when the new element, whose name has just been read, starts.
            </summary>
            <param name="currentElementName">
            String representing current element name.
            </param>
            <param name="nextElementName"></param>
            String representing name of the next element that will start.
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.IsEntity(System.String)">
            <summary>
            Returns true if the string passed as argument is an Html entity name.
            </summary>
            <param name="entityName">
            String to be tested for Html entity name.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.EntityCharacterValue(System.String)">
            <summary>
            Returns the character represented by the entity name string which is passed as an argument, if the string is an entity name
            as specified in _htmlCharacterEntities, returns the character value of 0 otherwise.
            </summary>
            <param name="entityName">
            String representing entity name whose character value is desired.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.InitializeEmptyElements">
            <summary>
            Initializes _htmlEmptyElements with empty elements in HTML 4 spec at
            http://www.w3.org/TR/REC-html40/index/elements.html.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.InitializeElementsClosingOnParentElementEnd">
            <summary>
            Initializes _htmlElementsClosingOnParentElementEnd with the list of HTML 4 elements for which closing tags are optional
            we assume that for any element for which closing tags are optional, the element closes when it's outer element
            (in which it is nested) does.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlSchema.InitializeHtmlCharacterEntities">
            <summary>
            Initializes _htmlCharacterEntities hashtable with the character corresponding to entity names.
            </summary>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlTextBoxProperties">
            <summary>
            Represents HtmlText property for TextBlock controls.
            </summary>
        </member>
        <member name="F:HtmlToXamlConvert.HtmlTextBoxProperties.HtmlTextProperty">
            <summary>
            Registers "HtmlText" property as string property.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlTextBoxProperties.GetHtmlText(System.Windows.Controls.TextBlock)">
            <summary>
            Gets a "HtmlText" property value for the specified TextBlock.
            </summary>
            <param name="wb">TextBlock contains "HtmlText" property.</param>
            <returns>String stored as a "HtmlText" property in the TextBlock control.</returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlTextBoxProperties.SetHtmlText(System.Windows.Controls.TextBlock,System.String)">
            <summary>
            Sets a "HtmlText" property value for the specified TextBlock.
            </summary>
            <param name="wb">TextBlock contains "HtmlText" property.</param>
            <param name="html">New value of the "HtmlText" property.</param>
        </member>
        <member name="T:HtmlToXamlConvert.HtmlToXamlConverter">
            <summary>
            HtmlToXamlConverter is a static class that takes an HTML string
            and converts it into XAML.
            </summary>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.ConvertHtmlToXaml(System.String,System.Boolean)">
            <summary>
            Converts an html string into xaml string.
            </summary>
            <param name="htmlString">
            Input html which may be badly formatted xml.
            </param>
            <param name="asFlowDocument">
            True indicates that we need a FlowDocument as a root element;
            false means that Section or Span elements will be used
            depending on StartFragment/EndFragment comments locations.
            </param>
            <returns>
            Well-formed xml representing XAML equivalent for the input html string.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Returns a value for an attribute by its name (ignoring casing).
            </summary>
            <param name="element">
            XmlElement in which we are trying to find the specified attribute.
            </param>
            <param name="attributeName">
            String representing the attribute name to be searched for.
            </param>
            <returns></returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.UnQuote(System.String)">
            <summary>
            Returns string extracted from quotation marks.
            </summary>
            <param name="value">
            String representing value enclosed in quotation marks.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddBlock(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
             <summary>
             Analyzes the given htmlElement expecting it to be converted
             into some of xaml Block elements and adds the converted block
             to the children collection of xamlParentElement.
            
             Analyzes the given XmlElement htmlElement, recognizes it as some HTML element
             and adds it as a child to a xamlParentElement.
             In some cases several following siblings of the given htmlElement
             will be consumed too (e.g. LIs encountered without wrapping UL/OL,
             which must be collected together and wrapped into one implicit List element).
             </summary>
             <param name="xamlParentElement">
             Parent xaml element, to which new converted element will be added.
             </param>
             <param name="htmlNode">
             Source html element subject to convert to xaml.
             </param>
             <param name="inheritedProperties">
             Properties inherited from an outer context.
             </param>
             <param name="stylesheet"></param>
             <param name="sourceContext"></param>
             <returns>
             Last processed html node. Normally it should be the same htmlElement
             as was passed as a parameter, but in some irregular cases
             it could one of its following siblings.
             The caller must use this node to get to next sibling from it.
             </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddSection(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Generates Section or Paragraph element from DIV depending whether it contains any block elements or not
            true indicates that a content added by this call contains at least one block element
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlElement">
            XmlElement representing Html element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddParagraph(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Generates Paragraph element from P, H1-H7, Center etc.
            true indicates that a content added by this call contains at least one block element
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlElement">
            XmlElement representing Html element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddImplicitParagraph(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Creates a Paragraph element and adds all nodes starting from htmlNode
            converted to appropriate Inlines.
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlNode">
            XmlNode starting a collection of implicitly wrapped inlines.
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            true indicates that a content added by this call contains at least one block element
            <returns>
            The last htmlNode added to the implicit paragraph
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddList(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts Html ul or ol element into Xaml list element. During conversion if the ul/ol element has any children
            that are not li elements, they are ignored and not added to the list element.
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added.
            </param>
            <param name="htmlListElement">
            XmlElement representing Html ul/ol element to be converted.
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddOrphanListItems(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            If li items are found without a parent ul/ol element in Html string, creates xamlListElement as their parent and adds
            them to it. If the previously added node to the same xamlParentElement was a List, adds the elements to that list.
            Otherwise, we create a new xamlListElement and add them to it. Elements are added as long as li elements appear sequentially.
            The first non-li or text node stops the addition.
            </summary>
            <param name="xamlParentElement">
            Parent element for the list.
            </param>
            <param name="htmlLIElement">
            Start Html li element without parent list.
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            XmlNode representing the first non-li node in the input after one or more li's have been processed.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddListItem(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlLIElement into Xaml ListItem element, and appends it to the parent xamlListElement.
            </summary>
            <param name="xamlListElement">
            XmlElement representing Xaml List element to which the converted td/th should be added.
            </param>
            <param name="htmlLIElement">
            XmlElement representing Html li element to be converted.
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddTable(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlTableElement to a Xaml Table element. Adds tbody elements if they are missing so
            that a resulting Xaml Table element is properly formed.
            </summary>
            <param name="xamlParentElement">
            Parent xaml element to which a converted table must be added.
            </param>
            <param name="htmlTableElement">
            XmlElement reprsenting the Html table element to be converted.
            </param>
            <param name="inheritedProperties">
            Hashtable representing properties inherited from parent context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddColumnInformation(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Processes the information about table columns - COLGROUP and COL html elements.
            </summary>
            <param name="htmlTableElement">
            XmlElement representing a source html table.
            </param>
            <param name="xamlTableElement">
            XmlElement repesenting a resulting xaml table.
            </param>
            <param name="columnStartsAllRows">
            Array of doubles - column start coordinates.
            Can be null, which means that column size information is not available
            and we must use source colgroup/col information.
            In case when it's not null, we will ignore source colgroup/col information.
            </param>
            <param name="currentProperties"></param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddTableColumnGroup(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlColgroupElement into Xaml TableColumnGroup element, and appends it to the parent xamlTableElement
            </summary>
            <param name="xamlTableElement">XmlElement representing Xaml Table element to which the converted column group should be added</param>
            <param name="htmlColgroupElement">XmlElement representing Html colgroup element to be converted</param>
            <param name="inheritedProperties">Properties inherited from parent context</param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddTableColumn(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlColElement into Xaml TableColumn element, and appends it to the parent
            xamlTableColumnGroupElement.
            </summary>
            <param name="xamlTableElement"></param>
            <param name="htmlColElement">
            XmlElement representing Html col element to be converted.
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddTableRowsToTableBody(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Adds TableRow elements to xamlTableBodyElement. The rows are converted from Html tr elements that
            may be the children of an Html tbody element or an Html table element with tbody missing.
            </summary>
            <param name="xamlTableBodyElement">
            XmlElement representing Xaml TableRowGroup element to which the converted rows should be added.
            </param>
            <param name="htmlTRStartNode">
            XmlElement representing the first tr child of the tbody element to be read.
            </param>
            <param name="currentProperties">
            Hashtable representing current properties of the tbody element that are generated and applied in the
            AddTable function; to be used as inheritedProperties when adding tr elements.
            </param>
            <param name="columnStarts"></param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            XmlNode representing the current position of the iterator among tr elements.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddTableCellsToTableRow(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList,System.Collections.ArrayList,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Adds TableCell elements to xamlTableRowElement.
            </summary>
            <param name="xamlTableRowElement">
            XmlElement representing Xaml TableRow element to which the converted cells should be added.
            </param>
            <param name="htmlTDStartNode">
            XmlElement representing the child of tr or tbody element from which we should start adding td elements.
            </param>
            <param name="currentProperties">
            Properties of the current html tr element to which cells are to be added.
            </param>
            <param name="columnStarts"></param>
            <param name="activeRowSpans"></param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            XmlElement representing the current position of the iterator among the children of the parent Html tbody/tr element.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AddDataToTableCell(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Adds table cell data to xamlTableCellElement.
            </summary>
            <param name="xamlTableCellElement">
            XmlElement representing Xaml TableCell element to which the converted data should be added.
            </param>
            <param name="htmlDataStartNode">
            XmlElement representing the start element of data to be added to xamlTableCellElement.
            </param>
            <param name="currentProperties">
            Current properties for the html td/th element corresponding to xamlTableCellElement.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AnalyzeTableStructure(System.Xml.XmlElement,HtmlToXamlConvert.CssStylesheet)">
            <summary>
            Performs a parsing pass over a table to read information about column width and rowspan attributes. This information
            is used to determine the starting point of each column.
            </summary>
            <param name="htmlTableElement">
            XmlElement representing Html table whose structure is to be analyzed.
            </param>
            <param name="stylesheet"></param>
            <returns>
            ArrayList of type double which contains the function output. If analysis is successful, this ArrayList contains
            all the points which are the starting position of any column in the table, ordered from left to right.
            In case if analysis was impossible we return null.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AnalyzeTbodyStructure(System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.ArrayList,System.Double,HtmlToXamlConvert.CssStylesheet)">
            <summary>
            Performs a parsing pass over a tbody to read information about column width and rowspan attributes. Information read about width
            attributes is stored in the reference ArrayList parameter columnStarts, which contains a list of all starting
            positions of all columns in the table, ordered from left to right. Row spans are taken into consideration when
            computing column starts.
            </summary>
            <param name="htmlTbodyElement">
            XmlElement representing Html tbody whose structure is to be analyzed.
            </param>
            <param name="columnStarts">
            ArrayList of type double which contains the function output. If analysis fails, this parameter is set to null.
            </param>
            <param name="tableWidth">
            Current width of the table. This is used to determine if a new column when added to the end of table should
            come after the last column in the table or is actually splitting the last column in two. If it is only splitting
            the last column it should inherit row span for that column.
            </param>
            <param name="stylesheet"></param>
            <param name="activeRowSpans"></param>
            <returns>
            Calculated width of a tbody.
            In case of non-analizable column width structure return 0.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.AnalyzeTRStructure(System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.ArrayList,System.Double,HtmlToXamlConvert.CssStylesheet)">
            <summary>
            Performs a parsing pass over a tr element to read information about column width and rowspan attributes.
            </summary>
            <param name="htmlTRElement">
            XmlElement representing Html tr element whose structure is to be analyzed.
            </param>
            <param name="columnStarts">
            ArrayList of type double which contains the function output. If analysis is successful, this ArrayList contains
            all the points which are the starting position of any column in the tr, ordered from left to right. If analysis fails,
            the ArrayList is set to null.
            </param>
            <param name="activeRowSpans">
            ArrayList representing all columns currently spanned by an earlier row span attribute. These columns should
            not be used for data in this row. The ArrayList actually contains notation for all columns in the table, if the
            active row span is set to 0 that column is not presently spanned but if it is > 0 the column is presently spanned.
            </param>
            <param name="tableWidth">
            <param name="stylesheet"></param>
            Double value representing the current width of the table.
            Return 0 if analysis was unsuccessful.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetRowSpan(System.Xml.XmlElement)">
            <summary>
            Gets row span attribute from htmlTDElement. Returns an integer representing the value of the rowspan attribute.
            Default value if attribute is not specified or if it is invalid is 1.
            </summary>
            <param name="htmlTDElement">
            Html td element to be searched for rowspan attribute.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetNextColumnIndex(System.Int32,System.Double,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Gets index at which a column should be inserted into the columnStarts ArrayList. This is
            decided by the value columnStart. The columnStarts ArrayList is ordered in ascending order.
            Returns an integer representing the index at which the column should be inserted.
            </summary>
            <param name="columnStarts">
            Array list representing starting coordinates of all columns in the table.
            </param>
            <param name="columnWidth">
            Starting coordinate of column we wish to insert into columnStart.
            </param>
            <param name="columnIndex">
            Int representing the current column index. This acts as a clue while finding the insertion index.
            If the value of columnStarts at columnIndex is the same as columnStart, then this position already exists
            in the array and we can jsut return columnIndex.
            </param>
            <param name="activeRowSpans"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.ClearActiveRowSpans(System.Collections.ArrayList)">
            <summary>
            Used for clearing activeRowSpans array in the beginning/end of each tbody.
            </summary>
            <param name="activeRowSpans">
            ArrayList representing currently active row spans.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.InitializeActiveRowSpans(System.Collections.ArrayList,System.Int32)">
            <summary>
            Used for initializing activeRowSpans array in the before adding rows to tbody element.
            </summary>
            <param name="activeRowSpans">
            ArrayList representing currently active row spans.
            </param>
            <param name="count">
            Size to be give to array list.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetNextColumnStart(System.Xml.XmlElement,System.Double)">
            <summary>
            Calculates width of next TD element based on starting position of current element and it's width, which
            is calculated by the function.
            </summary>
            <param name="htmlTDElement">
            XmlElement representing Html td element whose width is to be read.
            </param>
            <param name="columnStart">
            Starting position of current column.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.CalculateColumnSpan(System.Int32,System.Double,System.Collections.ArrayList)">
            <summary>
            Calculates column span based the column width and the widths of all other columns. Returns an integer representing
            the column span.
            </summary>
            <param name="columnIndex">
            Index of the current column.
            </param>
            <param name="columnWidth">
            Width of the current column.
            </param>
            <param name="columnStarts">
            ArrayList representing starting coordinates of all columns.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.VerifyColumnStartsAscendingOrder(System.Collections.ArrayList)">
            <summary>
            Verifies that values in columnStart, which represent starting coordinates of all columns, are arranged
            in ascending order.
            </summary>
            <param name="columnStarts">
            ArrayList representing starting coordinates of all columns.
            </param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.ApplyLocalProperties(System.Xml.XmlElement,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Analyzes local properties of Html element, converts them into Xaml equivalents, and applies them to xamlElement.
            </summary>
            <param name="xamlElement">
            XmlElement representing Xaml element to which properties are to be applied.
            </param>
            <param name="localProperties">
            Hashtable representing local properties of Html element that is converted into xamlElement.
            </param>
            <param name="isBlock"></param>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetElementProperties(System.Xml.XmlElement,System.Collections.Hashtable,System.Collections.Hashtable@,HtmlToXamlConvert.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Analyzes the tag of the htmlElement and infers its associated formatted properties.
            After that parses style attribute and adds all inline css styles.
            The resulting style attributes are collected in output parameter localProperties.
            </summary>
            <param name="htmlElement">
            </param>
            <param name="inheritedProperties">
            Set of properties inherited from ancestor elements. Currently not used in the code. Reserved for the future development.
            </param>
            <param name="localProperties">
            Returns all formatting properties defined by this element - implied by its tag, its attributes, or its css inline style.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            Returns a combination of previous context with local set of properties.
            This value is not used in the current code - intended for the future development.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.GetCssAttribute(System.String,System.String)">
            <summary>
            Extracts a value of css attribute from css style definition.
            </summary>
            <param name="cssStyle">
            Source css style definition.
            </param>
            <param name="attributeName">
            A name of css attribute to extract.
            </param>
            <returns>
            A string representation of an attribute value if found;
            null if there is no such attribute in a given string.
            </returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.TryGetLengthValue(System.String,System.Double@)">
            <summary>
            Converts a length value from string representation to a double.
            </summary>
            <param name="lengthAsString">
            Source string value of a length.
            </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlToXamlConvert.HtmlToXamlConverter.ApplyPropertiesToTableCellElement(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Applies properties to xamlTableCellElement based on the html td element it is converted from.
            </summary>
            <param name="htmlChildNode">
            Html td/th element to be converted to xaml.
            </param>
            <param name="xamlTableCellElement">
            XmlElement representing Xaml element for which properties are to be processed.
            </param>
            <remarks>
            TODO: Use the processed properties for htmlChildNode instead of using the node itself.
            </remarks>
        </member>
    </members>
</doc>
